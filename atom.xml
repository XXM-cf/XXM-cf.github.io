<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cf-Blog</title>
  
  <subtitle>静可谓其道</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-24T09:04:44.147Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>虾莫先生de球鞋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>收集常用工具函数，拿来即用</title>
    <link href="http://yoursite.com/2018/03/24/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/%E6%94%B6%E9%9B%86%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0%EF%BC%8C%E6%8B%BF%E6%9D%A5%E5%8D%B3%E7%94%A8/"/>
    <id>http://yoursite.com/2018/03/24/工欲善其事，必先利其器/收集常用工具函数，拿来即用/</id>
    <published>2018-03-24T09:04:57.464Z</published>
    <updated>2018-03-24T09:04:44.147Z</updated>
    
    <content type="html"><![CDATA[<p>一些常用的工具函数<br><a id="more"></a></p><p><a href="https://www.cnblogs.com/pdq-phper/p/5093486.html" target="_blank" rel="noopener">sublime配置</a></p><h4 id="url地址对象解析"><a href="#url地址对象解析" class="headerlink" title="url地址对象解析"></a>url地址对象解析</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseQueryString</span>(<span class="params">url</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> result=&#123;&#125;;  </span><br><span class="line">    <span class="keyword">var</span> params=url.split(<span class="string">"?"</span>)[<span class="number">1</span>].split(<span class="string">"&amp;"</span>);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,length=params.length;i&lt;length;i++)&#123;  </span><br><span class="line">        <span class="keyword">var</span> temp=params[i].split(<span class="string">"="</span>);  </span><br><span class="line">        result[temp[<span class="number">0</span>]]=temp[<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><h4 id="生成随机密码"><a href="#生成随机密码" class="headerlink" title="生成随机密码"></a>生成随机密码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomPassword</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> seed = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>, <span class="string">"I"</span>, <span class="string">"J"</span>, <span class="string">"K"</span>, <span class="string">"L"</span>, <span class="string">"M"</span>, <span class="string">"N"</span>, <span class="string">"P"</span>, <span class="string">"Q"</span>, <span class="string">"R"</span>, <span class="string">"S"</span>, <span class="string">"T"</span>, <span class="string">"U"</span>, <span class="string">"V"</span>, <span class="string">"W"</span>, <span class="string">"X"</span>, <span class="string">"Y"</span>, <span class="string">"Z"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"p"</span>, <span class="string">"Q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>];</span><br><span class="line">  <span class="keyword">const</span> seedlength = seed.length;</span><br><span class="line">  <span class="keyword">let</span> createPassword = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * seedlength);</span><br><span class="line">    createPassword += seed[j];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> createPassword;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">randomPassword(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 输出："a5Csy"</span></span><br></pre></td></tr></table></figure><h4 id="判断时间间隔（几天前）"><a href="#判断时间间隔（几天前）" class="headerlink" title="判断时间间隔（几天前）"></a>判断时间间隔（几天前）</h4><p>传入的参数为需要判断的时间戳（毫秒）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateStr</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取js 时间戳</span></span><br><span class="line">    <span class="keyword">var</span> time=<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    time=<span class="built_in">parseInt</span>((time-date*<span class="number">1000</span>)/<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储转换值</span></span><br><span class="line">    <span class="keyword">var</span> s;</span><br><span class="line">    <span class="keyword">if</span>(time&lt;<span class="number">60</span>*<span class="number">10</span>)&#123;<span class="comment">//十分钟内</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'刚刚'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((time&lt;<span class="number">60</span>*<span class="number">60</span>)&amp;&amp;(time&gt;=<span class="number">60</span>*<span class="number">10</span>))&#123;</span><br><span class="line">        <span class="comment">//超过十分钟少于1小时</span></span><br><span class="line">        s = <span class="built_in">Math</span>.floor(time/<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span>  s+<span class="string">"分钟前"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((time&lt;<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>)&amp;&amp;(time&gt;=<span class="number">60</span>*<span class="number">60</span>))&#123; </span><br><span class="line">        <span class="comment">//超过1小时少于24小时</span></span><br><span class="line">        s = <span class="built_in">Math</span>.floor(time/<span class="number">60</span>/<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span>  s+<span class="string">"小时前"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((time&lt;<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">3</span>)&amp;&amp;(time&gt;=<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>))&#123; </span><br><span class="line">        <span class="comment">//超过1天少于3天内</span></span><br><span class="line">        s = <span class="built_in">Math</span>.floor(time/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line">        <span class="keyword">return</span> s+<span class="string">"天前"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="comment">//超过3天</span></span><br><span class="line">        <span class="keyword">var</span> date= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(date) * <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> date.getFullYear()+<span class="string">"/"</span>+(date.getMonth()+<span class="number">1</span>)+<span class="string">"/"</span>+date.getDate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dateStr(<span class="number">1521697302999</span>)</span><br><span class="line"><span class="comment">// 输出 "刚刚"</span></span><br></pre></td></tr></table></figure></p><h4 id="时间日期格式化"><a href="#时间日期格式化" class="headerlink" title="时间日期格式化"></a>时间日期格式化</h4><p>date参数为待格式化的日期字符串<br>参数format为格式化格式 默认为yyyy-MM-dd hh:mm:ss  </p><p>return a.toString().replace(/^(\d)$/,”0$1”)</p><p>如果a是一位数，则在前面加0<br>1—-&gt;01<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFmt</span>(<span class="params">date, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!date) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  date = <span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">  <span class="keyword">const</span> paddNum = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">      num += <span class="string">''</span></span><br><span class="line">      <span class="keyword">return</span> num.replace(<span class="regexp">/^(\d)$/</span>, <span class="string">'0$1'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 指定格式字符</span></span><br><span class="line">  <span class="keyword">const</span> cfg = &#123;</span><br><span class="line">    yyyy: date.getFullYear(),</span><br><span class="line">    yy: date.getFullYear().toString().substring(<span class="number">2</span>),</span><br><span class="line">    M: date.getMonth() + <span class="number">1</span>,</span><br><span class="line">    MM: paddNum(date.getMonth() + <span class="number">1</span>),</span><br><span class="line">    d: date.getDate(),</span><br><span class="line">    dd: paddNum(date.getDate()),</span><br><span class="line">    hh: paddNum(date.getHours()),</span><br><span class="line">    mm: paddNum(date.getMinutes()),</span><br><span class="line">    ss: paddNum(date.getSeconds())</span><br><span class="line">  &#125;</span><br><span class="line">  format || (format = <span class="string">'yyyy-MM-dd hh:mm:ss'</span>)</span><br><span class="line">  <span class="keyword">return</span> format.replace(<span class="regexp">/([a-z])(\1)*/ig</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cfg[m]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dateFmt(<span class="number">1521697721522</span>,<span class="string">'yyyy-MM-dd'</span>)</span><br><span class="line"><span class="comment">// 输出： "2018-03-22"</span></span><br><span class="line">dateFmt(<span class="number">1521697721522</span>,<span class="string">'hh:mm:ss'</span>)</span><br><span class="line"><span class="comment">// 输出  "13:48:41"</span></span><br></pre></td></tr></table></figure></p><h4 id="判断日期是否为今天"><a href="#判断日期是否为今天" class="headerlink" title="判断日期是否为今天"></a>判断日期是否为今天</h4><p>基于上例的格式化函数dateFmt()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isToday</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = str &amp;&amp; <span class="keyword">new</span> <span class="built_in">Date</span>(str);</span><br><span class="line">  date = dateFmt(date, <span class="string">'yyyy-MM-dd'</span>);</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> y = now.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> m = (now.getMonth() + <span class="number">1</span>) &lt; <span class="number">10</span> ? <span class="string">'0'</span> + (now.getMonth() + <span class="number">1</span>) : (now.getMonth() + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> d = now.getDate() &lt; <span class="number">10</span> ? <span class="string">'0'</span> + now.getDate() : now.getDate();</span><br><span class="line">  <span class="keyword">var</span> today = y + <span class="string">'-'</span> + m + <span class="string">'-'</span> + d;</span><br><span class="line">  <span class="keyword">return</span> today === date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数字转金额"><a href="#数字转金额" class="headerlink" title="数字转金额"></a>数字转金额</h4><p>参数s为待转换的金额  </p><p>n为需要保留的小数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function currencyFmt(s, n) &#123;</span><br><span class="line">  n = n &gt; 0 &amp;&amp; n &lt;= 20 ? n : 2;</span><br><span class="line">  if (!s &amp;&amp; s !== 0) &#123;</span><br><span class="line">    return &apos;&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">  s = parseFloat((s + &apos;&apos;).replace(/[^\d\.-]/g, &apos;&apos;)).toFixed(n) + &apos;&apos;;</span><br><span class="line">  var l = s.split(&apos;.&apos;)[0],</span><br><span class="line">    r = s.split(&apos;.&apos;)[1];</span><br><span class="line">  return &apos;\u00a5&apos; + &apos; &apos; + l + &apos;.&apos; + r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">currencyFmt(123.2568,3)</span><br><span class="line">// 输出 &quot;¥ 123.257&quot;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些常用的工具函数&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>数字动态切换</title>
    <link href="http://yoursite.com/2018/03/20/%E4%B8%80%E4%B8%AA%E5%89%8D%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/03/20/一个前段数据动态显示的插件/</id>
    <published>2018-03-20T15:27:42.519Z</published>
    <updated>2018-03-20T15:37:05.872Z</updated>
    
    <content type="html"><![CDATA[<p>贴代码<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"number-slide"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> numRun2 = $(<span class="string">".number-slide"</span>).numberAnimate(&#123;</span></span><br><span class="line"><span class="javascript">    num: <span class="string">'212135'</span>, <span class="comment">// 初始值</span></span></span><br><span class="line"><span class="javascript">    speed: <span class="number">1000</span>, <span class="comment">//  切换速度</span></span></span><br><span class="line"><span class="javascript">    symbol: <span class="string">","</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> nums2 = <span class="number">212135</span>;</span></span><br><span class="line"><span class="javascript">  setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> n = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">7</span> + <span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">    nums2 += n;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(n, nums2)</span></span><br><span class="line"><span class="undefined">    numRun2.resetData(nums2);</span></span><br><span class="line"><span class="undefined">  &#125;, 5000);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.mt-number-animate</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Helvetica35-Thin"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-number-animate</span> <span class="selector-class">.mt-number-animate-dot</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">text-align</span>: center</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-number-animate</span> <span class="selector-class">.mt-number-animate-dom</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Helvetica35-Thin"</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-number-animate</span> <span class="selector-class">.mt-number-animate-dom</span> <span class="selector-class">.mt-number-animate-span</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $.fn.numberAnimate = <span class="function"><span class="keyword">function</span>(<span class="params">setting</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">        speed: <span class="number">1000</span>, <span class="comment">//动画速度</span></span><br><span class="line">        num: <span class="string">""</span>, <span class="comment">//初始化值</span></span><br><span class="line">        iniAnimate: <span class="literal">true</span>, <span class="comment">//是否要初始化动画效果</span></span><br><span class="line">        symbol: <span class="string">''</span>, <span class="comment">//默认的分割符号，千，万，千万</span></span><br><span class="line">        dot: <span class="number">0</span> <span class="comment">//保留几位小数点</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果setting为空，就取default的值</span></span><br><span class="line">    <span class="keyword">var</span> setting = $.extend(defaults, setting);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果对象有多个，提示出错</span></span><br><span class="line">    <span class="keyword">if</span> ($(<span class="keyword">this</span>).length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      alert(<span class="string">"just only one obj!"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果未设置初始化值。提示出错</span></span><br><span class="line">    <span class="keyword">if</span> (setting.num == <span class="string">""</span>) &#123;</span><br><span class="line">      alert(<span class="string">"must set a num!"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> nHtml = <span class="string">'&lt;div class="mt-number-animate-dom" data-num="&#123;&#123;num&#125;&#125;"&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;0&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;1&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;2&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;3&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;4&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;5&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;6&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;7&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;8&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;9&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;.&lt;/span&gt;\</span></span><br><span class="line"><span class="string">          &lt;/div&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数字处理</span></span><br><span class="line">    <span class="keyword">var</span> numToArr = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">      num = <span class="built_in">parseFloat</span>(num).toFixed(setting.dot);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span>(num) == <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> arrStr = num.toString().split(<span class="string">""</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> arrStr = num.split(<span class="string">""</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//console.log(arrStr);</span></span><br><span class="line">      <span class="keyword">return</span> arrStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置DOM symbol:分割符号</span></span><br><span class="line">    <span class="keyword">var</span> setNumDom = <span class="function"><span class="keyword">function</span>(<span class="params">arrStr</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> shtml = <span class="string">'&lt;div class="mt-number-animate"&gt;'</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arrStr.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; (len - i) % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; setting.symbol != <span class="string">""</span> &amp;&amp; arrStr[i] != <span class="string">"."</span>) &#123;</span><br><span class="line">          shtml += <span class="string">'&lt;div class="mt-number-animate-dot"&gt;'</span> + setting.symbol + <span class="string">'&lt;/div&gt;'</span> + nHtml.replace(<span class="string">"&#123;&#123;num&#125;&#125;"</span>, arrStr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          shtml += nHtml.replace(<span class="string">"&#123;&#123;num&#125;&#125;"</span>, arrStr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      shtml += <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">      <span class="keyword">return</span> shtml;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行动画</span></span><br><span class="line">    <span class="keyword">var</span> runAnimate = <span class="function"><span class="keyword">function</span>(<span class="params">$parent</span>) </span>&#123;</span><br><span class="line">      $parent.find(<span class="string">".mt-number-animate-dom"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = $(<span class="keyword">this</span>).attr(<span class="string">"data-num"</span>);</span><br><span class="line">        num = (num == <span class="string">"."</span> ? <span class="number">10</span> : num);</span><br><span class="line">        <span class="keyword">var</span> spanHei = $(<span class="keyword">this</span>).height() / <span class="number">11</span>; <span class="comment">//11为元素个数</span></span><br><span class="line">        <span class="keyword">var</span> thisTop = -num * spanHei + <span class="string">"px"</span>;</span><br><span class="line">        <span class="keyword">if</span> (thisTop != $(<span class="keyword">this</span>).css(<span class="string">"top"</span>)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (setting.iniAnimate) &#123;</span><br><span class="line">            <span class="comment">//HTML5不支持</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">window</span>.applicationCache) &#123;</span><br><span class="line">              $(<span class="keyword">this</span>).animate(&#123;</span><br><span class="line">                top: thisTop</span><br><span class="line">              &#125;, setting.speed);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              $(<span class="keyword">this</span>).css(&#123;</span><br><span class="line">                <span class="string">'transform'</span>: <span class="string">'translateY('</span> + thisTop + <span class="string">')'</span>,</span><br><span class="line">                <span class="string">'-ms-transform'</span>: <span class="string">'translateY('</span> + thisTop + <span class="string">')'</span>,</span><br><span class="line">                <span class="comment">/* IE 9 */</span></span><br><span class="line">                <span class="string">'-moz-transform'</span>: <span class="string">'translateY('</span> + thisTop + <span class="string">')'</span>,</span><br><span class="line">                <span class="comment">/* Firefox */</span></span><br><span class="line">                <span class="string">'-webkit-transform'</span>: <span class="string">'translateY('</span> + thisTop + <span class="string">')'</span>,</span><br><span class="line">                <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">                <span class="string">'-o-transform'</span>: <span class="string">'translateY('</span> + thisTop + <span class="string">')'</span>,</span><br><span class="line">                <span class="string">'-ms-transition'</span>: setting.speed / <span class="number">1000</span> + <span class="string">'s'</span>,</span><br><span class="line">                <span class="string">'-moz-transition'</span>: setting.speed / <span class="number">1000</span> + <span class="string">'s'</span>,</span><br><span class="line">                <span class="string">'-webkit-transition'</span>: setting.speed / <span class="number">1000</span> + <span class="string">'s'</span>,</span><br><span class="line">                <span class="string">'-o-transition'</span>: setting.speed / <span class="number">1000</span> + <span class="string">'s'</span>,</span><br><span class="line">                <span class="string">'transition'</span>: setting.speed / <span class="number">1000</span> + <span class="string">'s'</span></span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setting.iniAnimate = <span class="literal">true</span>;</span><br><span class="line">            $(<span class="keyword">this</span>).css(&#123;</span><br><span class="line">              top: thisTop</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">$parent</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//初始化</span></span><br><span class="line">      $parent.html(setNumDom(numToArr(setting.num)));</span><br><span class="line">      runAnimate($parent);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置参数</span></span><br><span class="line">    <span class="keyword">this</span>.resetData = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> newArr = numToArr(num);</span><br><span class="line">        <span class="keyword">var</span> $dom = $(<span class="keyword">this</span>).find(<span class="string">".mt-number-animate-dom"</span>);</span><br><span class="line">        <span class="keyword">if</span> ($dom.length &lt; newArr.length) &#123;</span><br><span class="line">          $(<span class="keyword">this</span>).html(setNumDom(numToArr(num)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $dom.each(<span class="function"><span class="keyword">function</span>(<span class="params">index, el</span>) </span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).attr(<span class="string">"data-num"</span>, newArr[index]);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        runAnimate($(<span class="keyword">this</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//init</span></span><br><span class="line">    init($(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;贴代码&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>gulp搭建项目流程</title>
    <link href="http://yoursite.com/2018/03/20/gulp%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/03/20/gulp搭建项目流程/</id>
    <published>2018-03-20T15:27:39.425Z</published>
    <updated>2018-03-24T09:00:03.907Z</updated>
    
    <content type="html"><![CDATA[<p>关于gulp的一点介绍<br><a id="more"></a><br>所有的环境都是在 node 安装好的基础上执行的。 node -v 查看node的安装情况。npm -v查看npm 的安装情况.</p><p>gulp自动化构建常用参数</p><p>1、src 读取文件或者文件夹</p><p>2、dest 生成文件也就是写文件</p><p>3、watch 检测文件</p><p>4、tesk 指定任务</p><p>5、pipe 用流的方式处理 gulp.</p><p>在项目中创建以下文件夹<br>build<br>dist<br>src</p><blockquote><p>解释：</p><p>build  : 项目整合目录，一般在这里整合所有的代码，不压缩。</p><p>dist : 项目发布目录，也是压缩所有文件后的。</p><p>src :  项目源文件目录，这里放置的都是源文件。</p></blockquote><p>test : 这个是编写自动化测试的</p><p><strong>安装查看gulp，在项目根目录下。</strong>  </p><p>全局安装gulp </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp</span><br></pre></td></tr></table></figure><p>然后创建配置文件 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init    初始化并创建 package.json文件</span><br><span class="line">npm install --save-dev gulp  将Node的配置环境装进配置文件中</span><br></pre></td></tr></table></figure><p> 然后安装需要的插件</p><p><a href="https://www.cnblogs.com/Darren_code/p/gulp.html" target="_blank" rel="noopener">关于gulp插件的详细介绍请看这</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx —save-dev将文件自动写进配置文件中</span><br></pre></td></tr></table></figure></p><p>gulp-htmlmin 看到名字就能知道，这个插件是用来压缩HTML。PS：注释啥的都可以去掉哦，看文档get更多技能哈<br>gulp-imagemin 除了能压缩常见的图片格式，还能压缩 SVG，叼叼的~  </p><p>gulp-clean-css 压缩 CSS。我原本推荐的是  gulp-minify-css，结果其首页中已建议改用gulp-clean-css…   </p><p>gulp-uglify 专业压缩 Javascript<br>gulp-concat 上面几个都是压缩，这插件是管合并的…恭喜，“减少网络请求”的成就达成:)  </p><p>gulp-autoprefixer 给 CSS增加前缀。解决某些CSS属性不是标准属性，有各种浏览器前缀的情况，灰常有用  </p><p>gulp-rename 修改文件名称。比如有时我们需要把app.js改成app.min.js，瞬间高级了<br>gulp-util 最基础的工具，但俺只用来打日志…</p><p>一般常用的创建整站的有这些，多个的话可以将插件以空格的形式分开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-clean gulp-concat gulp-connect gulp-cssmin gulp-imagemin gulp-less gulp-load-plugins gulp-uglify open  -—save-dev</span><br></pre></td></tr></table></figure><p>然后则是gulpfile.js配置文件的编写。具体为下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入gulp</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="comment">//这样的话 其他的模块可以直接使用 $ 符号来引入</span></span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)();</span><br><span class="line"><span class="keyword">var</span> open = <span class="built_in">require</span>(<span class="string">'open'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义目录路径</span></span><br><span class="line"><span class="keyword">var</span> app = &#123;</span><br><span class="line">    <span class="comment">//源代码，文件目录</span></span><br><span class="line">    srcPath: <span class="string">'src/'</span>,</span><br><span class="line">    <span class="comment">//文件整合之后的目录</span></span><br><span class="line">    devPath: <span class="string">'build/'</span>,</span><br><span class="line">    <span class="comment">//项目，发布目录上产部署</span></span><br><span class="line">    prdPath: <span class="string">'dist/'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过bower安装的插件，需要拷贝到 devPath prdPath中</span></span><br><span class="line">gulp.task(<span class="string">'lib'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//   /**/* 读取这个文件夹下边的所有的文件或者文件夹</span></span><br><span class="line">    gulp.src(<span class="string">'bower_components/**/*'</span>)</span><br><span class="line">    <span class="comment">//读取完整后进行操作  西安拷贝到整合目录 并重命名，在拷贝到生产目录并重命名</span></span><br><span class="line">    .pipe(gulp.dest(app.devPath + <span class="string">'vendor'</span>))</span><br><span class="line">    .pipe(gulp.dest(app.prdPath + <span class="string">'vendor'</span>))</span><br><span class="line">    .pipe($.connect.reload());  <span class="comment">//文件更改后自动变异 并执行启动服务重新打开浏览器</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//将 html 拷贝到 devPath prdPath中</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'**/*.html'</span>)</span><br><span class="line">    .pipe(gulp.dest(app.devPath))</span><br><span class="line">    .pipe(gulp.dest(app.prdPath))</span><br><span class="line">    .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//将 模拟的json 文件 拷贝到 devPath prdPath中</span></span><br><span class="line">gulp.task(<span class="string">'json'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'data/**/*.json'</span>)</span><br><span class="line">    .pipe(gulp.dest(app.devPath + <span class="string">'data'</span>))</span><br><span class="line">    .pipe(gulp.dest(app.prdPath + <span class="string">'data'</span>))</span><br><span class="line">    .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 index.less 文件 拷贝到 devPath prdPath中，index.less引入了所有的其他的less</span></span><br><span class="line">gulp.task(<span class="string">'less'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'style/index.less'</span>)</span><br><span class="line">    .pipe($.less())</span><br><span class="line">    .pipe(gulp.dest(app.devPath + <span class="string">'css'</span>))</span><br><span class="line">    .pipe($.cssmin())</span><br><span class="line">    .pipe(gulp.dest(app.prdPath + <span class="string">'css'</span>))</span><br><span class="line">    .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 拷贝 js 文件  将所有的源文件中的js 文件整合成index.js 然后拷贝过去</span></span><br><span class="line">gulp.task(<span class="string">'script'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'script/**/*.js'</span>)</span><br><span class="line">    .pipe($.concat(<span class="string">'index.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(app.devPath + <span class="string">'js'</span>))</span><br><span class="line">    .pipe($.uglify())</span><br><span class="line">    .pipe(gulp.dest(app.prdPath + <span class="string">'js'</span>))</span><br><span class="line">    .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝 压缩 图片 最后放到发布目录下</span></span><br><span class="line">gulp.task(<span class="string">'image'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'image/**/*'</span>)</span><br><span class="line">    <span class="comment">//江源图片放到整合目录下，在压缩放到生产目录下</span></span><br><span class="line">    .pipe(gulp.dest(app.devPath + <span class="string">'image'</span>))</span><br><span class="line">    .pipe($.imagemin())</span><br><span class="line">    .pipe(gulp.dest(app.prdPath + <span class="string">'image'</span>))</span><br><span class="line">    .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//总的方法</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>,[<span class="string">'image'</span>, <span class="string">'script'</span>, <span class="string">'less'</span>, <span class="string">'json'</span>, <span class="string">'html'</span>, <span class="string">'lib'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除旧文件，每次更新的时候</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src([app.devPath,app.prdPath])</span><br><span class="line">    .pipe($.clean());</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写服务</span></span><br><span class="line">gulp.task(<span class="string">'serve'</span>,[<span class="string">'build'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.connect.server(&#123;</span><br><span class="line">        <span class="comment">//服务起来的入口</span></span><br><span class="line">        root: [app.devPath],</span><br><span class="line">        <span class="comment">//文件更改后自动刷新页面</span></span><br><span class="line">        livereload: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//端口号</span></span><br><span class="line">        port: <span class="number">1234</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 在 命令工具中执行 gulp serve  就相当于是启动了服务</span></span><br><span class="line">    <span class="comment">//自动打开浏览器</span></span><br><span class="line">    open(<span class="string">'http://localhost:1234'</span>);</span><br><span class="line">    <span class="comment">//我们希望更改了文件，就自动编译，并且打包等然后打开浏览器</span></span><br><span class="line">    gulp.watch(<span class="string">'bower_components/**/*'</span> , [<span class="string">'lib'</span>]);</span><br><span class="line">    <span class="comment">//监听 script 下边的 js 文件，并执行 script 方法</span></span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'script/**/*.js'</span>, [<span class="string">'script'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'**/*.html'</span>, [<span class="string">'html'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'data/**/*.json'</span>, [<span class="string">'json'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'style/**/*.less'</span>, [<span class="string">'less'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'image/**/*'</span>, [<span class="string">'image'</span>]);</span><br><span class="line">    <span class="comment">//这样文件变更了就会自动构建</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认执行的任务，直接 执行 gulp 变行了。都编写完成后再终端 执行 gulp 便可以了。</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'serve'</span>]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于gulp的一点介绍&lt;br&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊package.json</title>
    <link href="http://yoursite.com/2018/03/20/%E8%81%8A%E4%B8%80%E8%81%8Apackage.json/"/>
    <id>http://yoursite.com/2018/03/20/聊一聊package.json/</id>
    <published>2018-03-20T15:27:08.396Z</published>
    <updated>2018-03-25T07:33:50.493Z</updated>
    
    <content type="html"><![CDATA[<p>每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块<br><a id="more"></a></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境 </p><p>下面只介绍几个常见的字段，<a href="http://javascript.ruanyifeng.com/nodejs/packagejson.html" target="_blank" rel="noopener">更多字段请移步阮大神文章</a></p><h3 id="scripts字段"><a href="#scripts字段" class="headerlink" title="scripts字段"></a>scripts字段</h3><p>scripts指定了运行脚本命令的npm命令行缩写，比如start指定了运行npm run start时，所要执行的命令。</p><p>下面的设置指定了npm run preinstall、npm run postinstall、npm run start、npm run test时，所要执行的命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"preinstall"</span>: <span class="string">"echo here it comes!"</span>,</span><br><span class="line">    <span class="string">"postinstall"</span>: <span class="string">"echo there it goes!"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"node index.js"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"tap test/*.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dependencies字段，devDependencies字段"><a href="#dependencies字段，devDependencies字段" class="headerlink" title="dependencies字段，devDependencies字段"></a>dependencies字段，devDependencies字段</h3><p>dependencies字段指定了项目运行所依赖的模块，devDependencies指定项目开发所需要的模块。</p><p>它们都指向一个对象。该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。  </p><p>对应的版本可以加上各种限定，主要有以下几种：  </p><blockquote><p>指定版本：比如1.2.2，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。<br>波浪号（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。<br>插入号（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。<br>latest：安装最新版本。 </p></blockquote><p>有了package.json文件，直接使用npm install命令，就会在当前目录中安装所需要的模块。</p><p>如果一个模块不在package.json文件之中，可以单独安装这个模块，并使用相应的参数，将其写入package.json文件之中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express --save-dev</span><br></pre></td></tr></table></figure><h3 id="config-字段"><a href="#config-字段" class="headerlink" title="config 字段"></a>config 字段</h3><p>config字段用于添加命令行的环境变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>面经</title>
    <link href="http://yoursite.com/2018/03/14/%E9%9D%A2%E7%BB%8F/"/>
    <id>http://yoursite.com/2018/03/14/面经/</id>
    <published>2018-03-14T06:51:44.938Z</published>
    <updated>2017-10-15T03:44:54.404Z</updated>
    
    <content type="html"><![CDATA[<p>面试总结<br><a id="more"></a><br>先来看一篇文章吧  <a href="http://taobaofed.org/blog/2017/03/03/to-my-future-friend/" target="_blank" rel="noopener">致未来的实习生</a></p><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>你好，我叫xxx，就读XX专业，很高兴能得到这次面试的机会。我非常喜欢前端的各种新技术，对前端的现状也有一个比较宏观的了解。目前，我比较擅长使用 XX、XXX。如果公司因业务需求，我愿意去学习相应的前端技术！</p><p>在生活上，我待人真诚</p><pre><code>* 有点难度的开发经历值得一说* 面试：分析问题，再解决问题* 把面试官往你熟悉的领域引导</code></pre><h3 id="面试结束"><a href="#面试结束" class="headerlink" title="面试结束"></a>面试结束</h3><ul><li><p>问技术方面面试官的问题</p><ul><li>结合刚刚的面试，可以给我几点<strong>技术方面的建议</strong>吗</li><li>了解一下公司的前端大致在做<strong>哪些业务</strong></li><li>了解一下公司前端团队的<strong>技术栈</strong>有哪些</li><li><strong>后端</strong>主要用什么语言？</li><li>聊的不错的话，可以要一下联系方式</li></ul></li><li><p>问 HR 的问题</p><ul><li>薪水（税前税后月薪多少？一年十三薪？）</li><li>是否有补贴？（餐补？电脑补？）</li><li>上下班时间</li></ul></li></ul><blockquote><p>忌问面试结果</p></blockquote><h3 id="HR-面"><a href="#HR-面" class="headerlink" title="HR 面"></a>HR 面</h3><p>在公司选择上，我比较看重真正重视和尊重员工的公司。人性化</p><ul><li><p><strong>你有什么缺点？</strong></p><ul><li>大型项目经验不足</li></ul></li><li><p><strong>你有什么优点？</strong></p><ul><li>抗压能力强</li></ul></li><li><p><strong>你对薪水有什么要求？</strong></p><ul><li>我希望公司能结合我的专业能力和人才市场标准的水平，给我合理的薪水即可</li></ul></li><li><p><strong>你对加班有什么看法</strong></p><ul><li>如果工作需要，加班是没问题的，反正我现在单身，没啥家庭负担。但是我会在日常工作中尽量提高自己的工作效率，减少不必要的加班。</li></ul></li></ul><p><a href="https://www.zhihu.com/question/19603341" target="_blank" rel="noopener">面试的时候 -&gt;_-&gt;</a></p><h3 id="回答问题的方式"><a href="#回答问题的方式" class="headerlink" title="回答问题的方式"></a>回答问题的方式</h3><ul><li><p><strong>要是直接的问题答不出来的话，可以答一些相关的话题</strong></p><pre><code>问：你知道http的302是什么吗答：不好意思，这个我忘记了，不过我知道 200 表示请求成功，    404表示资源没有被找到，4xx代表客户端请求报文错误，5xx代表服务端错误</code></pre></li></ul><ul><li><strong>分点回答</strong></li><li><strong>不要冷场，结果并不那么重要，思考过程最重要</strong></li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><pre><code>2xx：成功3xx：重定向4xx：客户端错误5xx：服务端错误</code></pre><p>200 OK：成功</p><p>301 Moved Permanently：永久性重定向（请求的资源被分配了新的URL）</p><p>302 Found：临时性重定向（请求的资源临时被分配了新的URL）</p><p>304 Not Modified：在这种情况下，由于客户端仍然具有以前下载的资源的副本，因此不需要重新传输资源。</p><p>400 Bad Request：请求报文中存在语法错误</p><p>403 Forbidden：请求被服务器拒绝</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul><li><p><strong>减少 HTTP 请求次数</strong>：浏览器进程一次发送请求的数目是有限的（4、6 不等），如果有很多 HTTP 请求，就会造成请求阻塞，影响体验。</p><ul><li>将小图片转 base64 字符串嵌在页面中</li><li>合并图片（css 精灵 == CSS Sprites）</li><li>合并 CSS 和 JS 文件</li><li>采用 lazyLoad（懒加载）</li></ul></li><li><p><strong>控制资源文件加载优先级</strong>（css 放头部、js 放尾部）</p></li><li><strong>使用浏览器缓存</strong></li><li><strong>使用 cdn</strong></li><li><strong>减少重排</strong></li><li><strong>压缩 js、css、图片</strong></li><li><strong>DNS优化（即域名收敛）</strong>：将静态资源放在一个域名下面，而不要分开放在多个域名下面</li><li><strong>资源预加载：</strong> 我们可以使用该技术来预先告知浏览器某些资源可能在将来会被使用到（DNS预解析、资源预获取、预连接、预渲染）</li></ul><ul><li><p>CSS 解析选择器是从右向左的，所以应该尽量避免多层嵌套的选择器</p></li><li><p>http2: 一个二进制协议，头部压缩、多路复用、服务器推送</p></li></ul><blockquote><p><a href="https://github.com/chokcoco/cnblogsArticle/issues/1" target="_blank" rel="noopener">【前端性能】浅谈域名发散与域名收敛</a></p><p><a href="https://segmentfault.com/a/1190000006922364" target="_blank" rel="noopener">浅谈网站性能之前端性能优化</a></p><p><a href="http://bubkoo.com/2015/11/19/prefetching-preloading-prebrowsing/" target="_blank" rel="noopener">前端性能优化 - 资源预加载</a></p></blockquote><h3 id="js-坑"><a href="#js-坑" class="headerlink" title="js 坑"></a>js 坑</h3><p><strong>利用循环一次注册多个 setTimeout(()=&gt;{},1000) 后，会在一秒后同时执行这几个计时器，不是一秒执行一个</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从浏览器输入-URL-到页面渲染发生了什么事"><a href="#从浏览器输入-URL-到页面渲染发生了什么事" class="headerlink" title="从浏览器输入 URL 到页面渲染发生了什么事"></a>从浏览器输入 URL 到页面渲染发生了什么事</h3><pre><code>浏览器先检查请求的内容是否在浏览器缓存中，如果在，则直接解析内容DNS 解析 URL浏览器与服务器建立 TCP 连接客户端发送 HTTP 请求服务器处理请求，返回 HTTP 响应关闭 TCP 连接浏览器解析html生成 DOM tree，解析css生成 CSS Rule TreeDOM 树和 CSS 规则树一起构造出 render 树将 render 树显示在页面上同时异步加载网页中 CSS、JavaScript 等外部资源</code></pre><h3 id="浏览器的渲染过程"><a href="#浏览器的渲染过程" class="headerlink" title="浏览器的渲染过程"></a>浏览器的渲染过程</h3><ul><li>重绘</li><li>重排</li></ul><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><ul><li><strong>async 与 defer</strong></li></ul><p><a href="http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html" target="_blank" rel="noopener">http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html</a></p><p>一般情况：解析 html –&gt; 遇到js，暂停解析html –&gt; 下载js –&gt; 执行js –&gt; 继续解析html</p><p>async：解析html –&gt; 遇到js，异步下载js，但不会暂停解析html –&gt; js下载完毕后，暂停解析html，执行js –&gt; js执行完后，继续解析html</p><p>defer：解析html –&gt; 遇到js，异步下载js，但不会暂停解析html –&gt; html解析完毕后，开始执行js</p><ul><li><strong>this 就是你 call 一个函数时，传入的 context</strong></li></ul><p><a href="https://zhuanlan.zhihu.com/p/23804247" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/23804247</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="number">12</span>)      <span class="comment">// =&gt; func.call(undefined, 12)</span></span><br><span class="line"></span><br><span class="line">obj.func(<span class="number">12</span>)  <span class="comment">// =&gt; func.call(obj, 12)</span></span><br><span class="line"></span><br><span class="line">func.call(context, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [fn, fn]</span><br><span class="line">arr[<span class="number">0</span>]()  <span class="comment">// this ==&gt; arr</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>什么是闭包： 函数 + 函数所在的环境</strong> </p><ul><li>封装私有变量和私有方法</li></ul></li><li><p><strong>手动实现 bind 函数</strong> 对于实现的过程有什么具体点的要求吗</p><ul><li><strong>直接调用 bind 函数并不会直接执行函数</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myBind</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.apply(context, args)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>RESTFUL API</strong>：增查删改</p><pre><code>GET    用来获取资源POST   用来新建资源（也可以用于更新资源）PUT    用来更新资源DELETE  用来删除资源</code></pre></li><li><p><strong>事件模型：</strong> 事件捕获、事件冒泡、事件委托</p></li><li><p><strong>new 操作符</strong></p><pre><code>1. 创建一个新的空对象 obj2. 将空对象 obj  的 __proto__ 属性设置为构造函数的 prototype 属性3. 将构造函数内部的 this 设置为 obj</code></pre></li><li><p><strong>创建自定义类型目前最好的方式</strong>：组合使用构造函数模式和原型模式</p><ul><li>属性定义在构造函数中，共享的属性和方法定义在原型上</li></ul></li><li><p><strong>继承的实现</strong></p><ul><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承（最棒）</li></ul></li></ul><h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><ul><li><p>sessionStorage：只存在于当前页面上</p></li><li><p><strong>跨域</strong></p><ul><li>postMessage()</li><li><strong>jsonp :</strong> 本质上是请求回一段js代码，然后在本地执行</li><li><strong>CORS</strong></li></ul></li><li><p>web worker</p></li><li>服务器发送事件（SSE)</li><li>File API</li><li>Drag and Drop</li><li>indexedDB</li></ul><h3 id="vue-相关"><a href="#vue-相关" class="headerlink" title="vue 相关"></a>vue 相关</h3><ul><li><p><strong>数据双向绑定</strong></p><ul><li>最核心的方法便是通过 <code>Object.defineProperty()</code> 来实现对属性的劫持，达到监听数据变动的目的（ES6 可以使用）</li></ul></li><li><p><strong>组件化开发</strong></p><ul><li>单文件组件</li></ul></li><li><strong>虚拟 DOM</strong><ul><li>如果用 js 直接操作 DOM，会造成页面的重排，性能很差</li><li>用 js 对象模拟 DOM 树创建出最初的虚拟 DOM，数据发生变化时，生成新的虚拟DOM，与原来的虚拟dom进行比较并将变化应用到最初的虚拟 DOM上，最后再应用到真正的 DOM 上</li></ul></li><li><strong>社区环境好，上手简单</strong></li><li><strong>数据驱动，能让你将关注度集中在数据上，而不是繁琐的 DOM 操作上</strong></li></ul><h3 id="web-安全相关"><a href="#web-安全相关" class="headerlink" title="web 安全相关"></a>web 安全相关</h3><ul><li><p><strong>SQL 注入</strong></p></li><li><p><strong>XSS：</strong> 跨站脚本（Cross-site scripting）</p><ul><li>利用网站开发时留下的漏洞，将恶意脚本注入，在用户访问该网页时执行恶意脚本，从而达到某种恶意的目的（比如向一个有漏洞的评论框里注入 js 代码）</li><li>获取用户敏感信息</li><li>过滤用户字符串，对敏感字符进行转义</li></ul></li><li><p><strong>CSRF（或 XSRF）：</strong> 跨站请求伪造（Cross-site request forgery）</p><ul><li>以用户的名义发起请求，从而达到某种恶意的目的（盗号、发消息、发邮件、转账）</li><li>跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</li><li>加验证码。</li></ul></li></ul><blockquote><p><a href="https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/" target="_blank" rel="noopener">总结 XSS 与 CSRF 两种跨站攻击</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0" target="_blank" rel="noopener">跨站请求伪造</a></p></blockquote><p>永远不要信任从客户端发来的数据。</p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>vue-book 中正好把3月份找实习时候看的知识点都用上了，比如 cookie、localstorage、jsonp 等</p><h3 id="http的缓存机制"><a href="#http的缓存机制" class="headerlink" title="http的缓存机制"></a>http的缓存机制</h3><ul><li><p>Cache-Control（通过它提供的不同的值来定义缓存策略）</p></li><li><p>Etag（标识符，用作校验，资源发生变化时，他的值也会变化）</p></li></ul><blockquote><p><a href="http://www.cnblogs.com/vajoy/p/5341664.html" target="_blank" rel="noopener">浅谈浏览器http的缓存机制</a></p><p><a href="http://jixianqianduan.com/frontend-javascript/2015/12/28/nine-browser-cache-methods.html" target="_blank" rel="noopener">九种浏览器端缓存机制知多少</a></p></blockquote><h3 id="算法，数据结构"><a href="#算法，数据结构" class="headerlink" title="算法，数据结构"></a>算法，数据结构</h3><p>冒泡排序</p><p>快速排序</p><ul><li><strong>二叉树：</strong> 先序遍历、中序遍历、后序遍历</li></ul><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><ul><li><strong>Buffer模块是干什么的：</strong> nodejs 用来处理二进制数据的模块，对比与 ES6 的 TypedArray</li><li><strong>Stream是什么，使用的两种模式：</strong> stream 是一种用来表示数据流的抽象概念（文件流、）</li></ul><blockquote><p><a href="http://zhenhua-lee.github.io/nodejs/stream.html" target="_blank" rel="noopener">nodejs stream</a></p></blockquote><h3 id="js-的薄弱点"><a href="#js-的薄弱点" class="headerlink" title="js 的薄弱点"></a>js 的薄弱点</h3><p>模拟事件</p><p>前端安全相关</p><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><ul><li>给出一个实际的需求，看应聘者怎么解决</li><li>让应聘者画一个他所在领域的知识概括<ul><li>比如： CSS 有定位、BFC、文本格式等  </li></ul></li></ul><p>本文是好友<a href="http://blog.percymong.com" target="_blank" rel="noopener">percymong</a>提供的资源，非常感谢他的指导。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试总结&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>移动端事件介绍</title>
    <link href="http://yoursite.com/2018/03/14/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BA%8B%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/03/14/移动端事件介绍/</id>
    <published>2018-03-14T06:51:44.937Z</published>
    <updated>2017-09-23T03:30:40.624Z</updated>
    
    <content type="html"><![CDATA[<p>移动端常用事件介绍<br><a id="more"></a></p><h4 id="1-手势事件"><a href="#1-手势事件" class="headerlink" title="1.手势事件"></a>1.手势事件</h4><pre><code>touchstart：当手指放在屏幕上触发;touchmove：当手指在屏幕上滑动时，连续地触发;touchend：当手指从屏幕上离开时触发;touchcancel： 当系统停止跟踪时触发; 该事件暂时使用不到;</code></pre><h4 id="2-tap类事件"><a href="#2-tap类事件" class="headerlink" title="2.tap类事件"></a>2.tap类事件</h4><pre><code>触碰事件，一般用于代替click事件，tap: 手指碰一下屏幕会触发longTap: 手指长按屏幕会触发singleTap: 手指碰一下屏幕会触发doubleTap: 手指双击屏幕会触发</code></pre><h4 id="3-swipe类事件"><a href="#3-swipe类事件" class="headerlink" title="3.swipe类事件"></a>3.swipe类事件</h4><pre><code>swipe：手指在屏幕上滑动时会触发swipeLeft：手指在屏幕上向左滑动时会触发swipeRight：手指在屏幕上向右滑动时会触发swipeUp：手指在屏幕上向上滑动时会触发swipeDown：手指在屏幕上向下滑动时会触发</code></pre><h4 id="事件处理程序的添加与删除"><a href="#事件处理程序的添加与删除" class="headerlink" title="事件处理程序的添加与删除"></a>事件处理程序的添加与删除</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">    addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(element.addEventListener) &#123;</span><br><span class="line">            element.addEventListener(type,handler,<span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent) &#123;</span><br><span class="line">            element.attachEvent(<span class="string">"on"</span>+type,handler);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">"on"</span> +type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(element.removeEventListener) &#123;</span><br><span class="line">            element.removeEventListener(type,handler,<span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent) &#123;</span><br><span class="line">            element.detachEvent(<span class="string">"on"</span>+type,handler);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">"on"</span> +type] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该函数接受三个参数</p><ul><li>element 执行该函数的对象</li><li>type 触发事件对象</li><li>handler 执行事件  <h6 id="例-："><a href="#例-：" class="headerlink" title="例 ："></a>例 ：</h6>在window中触摸时触发 打印出事件对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> touch = <span class="built_in">document</span>.getElementById(<span class="string">"touch"</span>);</span><br><span class="line">EventUtil.addHandler(touch,<span class="string">"touchstart"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="touches"><a href="#touches" class="headerlink" title="touches:"></a>touches:</h4><p>表示当前跟踪的触摸操作的touch对象的数组。</p><p>当一个手指在触屏上时，event.touches.length = 1; 当二个手指在触屏上时，event.touches.length=2, 以此类推</p><h4 id="changedTouches"><a href="#changedTouches" class="headerlink" title="changedTouches:"></a>changedTouches:</h4><p>表示上次触摸以来发生了什么改变的touch对象的数组。</p><pre><code>每个touch对象都包含了以下几个属性：clientX 触摸目标在视口中的X坐标。clientY触摸目标在视口中的Y坐标。Identifier: 标示触摸的唯一ID。pageX 触摸目标在页面中的X坐标。pageY 触摸目标在页面中的Y坐标。screenX触摸目标在屏幕中的X坐标。screenY 触摸目标在屏幕中的Y坐标。target  触摸的DOM节点目标。</code></pre><h3 id="几个基本知识点"><a href="#几个基本知识点" class="headerlink" title="几个基本知识点"></a>几个基本知识点</h3><p>1.判断是否为iPhone<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAppleMobile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (navigator.platform.indexOf(‘iPad‘) != <span class="number">-1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>2.自动大写与自动修正</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要关闭这两项功能，可以通过autocapitalize 与autocorrect 这两个选项</span></span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> autocapitalize=<span class="string">"off"</span> autocorrect=<span class="string">"off"</span> /&gt;</span><br></pre></td></tr></table></figure><p>3.禁止 iOS 弹出各种操作窗口</p><p>-webkit-touch-callout:none</p><ol><li>禁止用户选中文字</li></ol><p>-webkit-user-select:none</p><ol><li>关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.value = <span class="keyword">this</span>.value.replace(<span class="regexp">/\u2006/g</span>, ‘‘);</span><br></pre></td></tr></table></figure><ol><li><p>Andriod 上去掉语音输入按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input::-webkit-input-speech-button &#123;<span class="attr">display</span>: none&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断是否为微信浏览器；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_weixn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span>(ua.match(<span class="regexp">/MicroMessenger/i</span>)==<span class="string">"micromessenger"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端常用事件介绍&lt;br&gt;
    
    </summary>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>移动端APP 自适应布局</title>
    <link href="http://yoursite.com/2018/03/14/%E7%A7%BB%E5%8A%A8%E7%AB%AFAPP%20%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/03/14/移动端APP 自适应布局/</id>
    <published>2018-03-14T06:51:44.936Z</published>
    <updated>2017-09-23T03:30:46.553Z</updated>
    
    <content type="html"><![CDATA[<p>初涉移动端 ，自适应布局的相关要点如下<br>本文摘自<br><a href="http://www.cocoachina.com/webapp/20151110/14148.html" target="_blank" rel="noopener">原文链接</a></p><h5 id="1-常规情况下js根据屏幕宽度动态计算"><a href="#1-常规情况下js根据屏幕宽度动态计算" class="headerlink" title="1.常规情况下js根据屏幕宽度动态计算"></a>1.常规情况下js根据屏幕宽度动态计算</h5><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0 ,user-scalable=no&quot;&gt;</span><br><span class="line">&lt;!--        视口                 宽度=设备的宽度       缩放比例为1           禁止用户缩放--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var deviceWidth = document.documentElement.clientWidth;</span><br><span class="line">document.documentElement.style.fontSize = deviceWidth / 7.5 + &apos;px&apos;;</span><br><span class="line">//设计稿基于iphone6，宽度为750px，body的width为750px / 100 = 7.5rem</span><br><span class="line">//http://520ued.com/tools/rem  PX转rem的网站</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure><p>width=device-width<br>这段代码是让布局视口的尺寸等于理想视口。<br>设备像素比（DPR） = 设备像素个数 / 理想视口像素个数（device-width）</p><h5 id="2-媒体查询较密集的断点"><a href="#2-媒体查询较密集的断点" class="headerlink" title="2.媒体查询较密集的断点"></a>2.媒体查询较密集的断点</h5><pre><code>@media screen and (min-width: 320px) {    html {font-size: 14px;}}@media screen and (min-width: 360px) {    html {font-size: 16px;}}@media screen and (min-width: 400px) {    html {font-size: 18px;}}@media screen and (min-width: 440px) {    html {font-size: 20px;}}@media screen and (min-width: 480px) {    html {font-size: 22px;}}@media screen and (min-width: 640px) {    html {font-size: 28px;}}</code></pre><p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局  </p><p><a href="http://www.cocoachina.com/webapp/20151110/14148.html" target="_blank" rel="noopener">flex布局教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初涉移动端 ，自适应布局的相关要点如下&lt;br&gt;本文摘自&lt;br&gt;&lt;a href=&quot;http://www.cocoachina.com/webapp/20151110/14148.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;1-常规情况下js根据屏幕宽度动态计算&quot;&gt;&lt;a href=&quot;#1-常规情况下js根据屏幕宽度动态计算&quot; class=&quot;headerlink&quot; title=&quot;1.常规情况下js根据屏幕宽度动态计算&quot;&gt;&lt;/a&gt;1.常规情况下js根据屏幕宽度动态计算&lt;/h5&gt;
    
    </summary>
    
    
      <category term="移动端App" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AFApp/"/>
    
  </entry>
  
  <entry>
    <title>理解移动端click的300ms的延迟响应</title>
    <link href="http://yoursite.com/2018/03/14/%E7%90%86%E8%A7%A3%E7%A7%BB%E5%8A%A8%E7%AB%AFclick%E7%9A%84300ms%E7%9A%84%E5%BB%B6%E8%BF%9F%E5%93%8D%E5%BA%94/"/>
    <id>http://yoursite.com/2018/03/14/理解移动端click的300ms的延迟响应/</id>
    <published>2018-03-14T06:51:44.930Z</published>
    <updated>2017-09-23T03:30:47.783Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍移动端点击事件的300ms延迟及其解决方法<br><a id="more"></a></p><h4 id="“Bug”的由来"><a href="#“Bug”的由来" class="headerlink" title="“Bug”的由来"></a>“Bug”的由来</h4><p>Click事件在移动手机开发中有300ms的延　<br>因为在手机早期，浏览器系统有放大和缩放功能，用户在屏幕上点击两次之后，系统会触发放大或者缩放功能，因此系统做了一个处理，当触摸一次后，在300ms这段时间内有没有触摸第二次，如果触摸了第二次的话，说明是触发放大或缩放功能，否则的话是click事件。因此当click时候，所有用户必须等待于300ms后才会触发click事件。所以当在移动端使用click事件的时候，会感觉到有300ms的迟钝</p><h4 id="以下情况不用考虑延迟"><a href="#以下情况不用考虑延迟" class="headerlink" title="以下情况不用考虑延迟"></a>以下情况不用考虑延迟</h4><ol><li>桌面浏览器；</li><li><p>如果 viewport meta 标签 中设置了<br>width=device-width，Android 上的 Chrome 32+ 会禁用 300ms 延时；  </p></li><li><p>viewport meta 标签如果设置了 user-scalable=no，Android 上的 Chrome（所有版本）都会禁用 300ms 延迟</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>IE10 中，可以使用 css 属性 -ms-touch-action: none 禁止元素双击缩放</p></li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h5 id="方案1：禁止用户缩放。"><a href="#方案1：禁止用户缩放。" class="headerlink" title="方案1：禁止用户缩放。"></a>方案1：禁止用户缩放。</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="方案2：使用zepto-js的tap事件。"><a href="#方案2：使用zepto-js的tap事件。" class="headerlink" title="方案2：使用zepto.js的tap事件。"></a>方案2：使用zepto.js的tap事件。</h5><p>tap事件可以理解为在移动端的click事件，而zepto.js因为几乎完全复制jQuery的api，因此常常被用在h5的开发上用来取代jquery</p><h5 id="缺陷："><a href="#缺陷：" class="headerlink" title="缺陷："></a>缺陷：</h5><p>tap事件解决了一个300ms延迟问题，却带来了一个新的重大bug，点击穿透</p><p>点击穿透的意思，就是如果一个绝对定位或者固定定位元素处于页面最顶层，对这个元素绑定一个点击事件，那么你点击这个点对应的下面凡是有点击事件或者a标签都会被触发执行.</p><h5 id="方案3：fastclick-js"><a href="#方案3：fastclick-js" class="headerlink" title="方案3：fastclick.js"></a>方案3：fastclick.js</h5><p>首先想办法引入fastclick.js<br>下载fastclick.js<br><a href="http://www.bootcdn.cn/fastclick/" target="_blank" rel="noopener">点击获取</a>插件源码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'application/javascript'</span> <span class="attr">src</span>=<span class="string">'/path/to/fastclick.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果你使用原生js开发则进行如下声明即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'addEventListener'</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你想使用jquery<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>部门内容转自<a href="https://segmentfault.com/a/1190000005791890" target="_blank" rel="noopener">移动端点击事件全攻略，这里的坑你知多少？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍移动端点击事件的300ms延迟及其解决方法&lt;br&gt;
    
    </summary>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Js中的事件捕获与冒泡</title>
    <link href="http://yoursite.com/2018/03/14/%E6%B5%85%E8%B0%88Js%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%86%92%E6%B3%A1/"/>
    <id>http://yoursite.com/2018/03/14/浅谈Js中的事件捕获与冒泡/</id>
    <published>2018-03-14T06:51:44.926Z</published>
    <updated>2017-09-23T03:30:48.940Z</updated>
    
    <content type="html"><![CDATA[<p>事件捕获与冒泡以及其解决方法<br><a id="more"></a></p><h3 id="1-事件捕获"><a href="#1-事件捕获" class="headerlink" title="1.事件捕获"></a>1.事件捕获</h3><p>JS还设置了另外一种处理多（父子）元素多事件触发的方式，叫做事件捕获。事件捕获与事件冒泡完全相反，先触发祖先元素的事件，然后再逐级触发子元素的事件。默认情况下，绑定事件时，采用事件冒泡原则，如果想要进行事件捕获的话，需要设置一个参数</p><h3 id="2-事件冒泡"><a href="#2-事件冒泡" class="headerlink" title="2.事件冒泡"></a>2.事件冒泡</h3><p>事件先出发后代元素，然后逐级‘向上’传递</p><ul><li><p>[ ] 当你使用事件捕获时，父级元素先触发，子级元素后触发</p></li><li><p>[ ] 当你使用事件冒泡时，子级元素先触发，父级元素后触发  </p></li></ul><p>冒泡和捕获事件可以用下图表示（<a href="http://www.jb51.net/article/42492.htm" target="_blank" rel="noopener">图片来自脚本之家</a>）<br><img src="http://files.jb51.net/file_images/article/201310/20131028160201571.jpg" alt="image">。</p><h3 id="3-addEventListener的基本用法"><a href="#3-addEventListener的基本用法" class="headerlink" title="3.addEventListener的基本用法"></a>3.addEventListener的基本用法</h3><p>在复杂的项目开发中，javascript和html的解耦变得至关重要，我们被推荐使用事件动态绑定的方式来处理按钮的事件。W3C为我们提供了==addEventListener(==)函数用来为指定的dom元素动态绑定事件<br>这个函数有三个参数：</p><blockquote><ol><li>type: 用来设置事件类型，例如click</li><li>listener: 用来设置监听事件的函数，及type类型的事件发生后执行的函数</li><li>useCapture  可选。布尔值，指定事件是否在捕获或冒泡阶段执行<br>可能值:<br>true - 事件句柄在捕获阶段执行<br>false- false- 默认。事件句柄在冒泡阶段执行</li></ol></blockquote><h3 id="4-事件冒泡与事件捕获要是同时进行怎么办"><a href="#4-事件冒泡与事件捕获要是同时进行怎么办" class="headerlink" title="4.事件冒泡与事件捕获要是同时进行怎么办"></a>4.事件冒泡与事件捕获要是同时进行怎么办</h3><p>在上述绑定事件的代码中，第三个参数不是全部设置的true，就是全部设置成false,那如果既有true，又有false，有的元素设置成按事件冒泡处理，有的元素设置成按事件捕获处理，那怎么办呢？<br>答案是，我们的浏览器更“喜爱”事件捕获：它会先把useCapture为false的元素绑定事件放到一边，按照事件捕获正常的顺序执行useCapture为true的元素绑定事件，最后在按照事件冒泡顺序执行useCapture为false。</p><h3 id="5-阻止冒泡、捕获"><a href="#5-阻止冒泡、捕获" class="headerlink" title="5.阻止冒泡、捕获"></a>5.阻止冒泡、捕获</h3><p>事件的传播是可以阻止的：</p><ul><li>在W3c中，使用stopPropagation（）方法</li><li>在IE下设置cancelBubble = true；</li><li>在捕获的过程中stopPropagation（）；后，后面的冒泡过程也不会发生了~</li></ul><p>阻止事件的默认行为，<br>例如click <a>后的跳转~</a></p><ul><li>在W3c中，使用preventDefault（）方法；</li><li>在IE下设置window.event.returnValue = false;</li></ul><blockquote><p>==attachEvent==——兼容：IE7、IE8；不兼容firefox、chrome、IE9、IE10、IE11、safari、opera</p><p>==addEventListener==——兼容：firefox、chrome、IE、safari、opera；不兼容IE7、IE8</p></blockquote><h3 id="6-addEventListener的使用方式："><a href="#6-addEventListener的使用方式：" class="headerlink" title="6.addEventListener的使用方式："></a>6.addEventListener的使用方式：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.addEventListener(type, listener, useCapture);</span><br></pre></td></tr></table></figure><ul><li>target： 文档节点、document、window 或 XMLHttpRequest。 </li><li>type： 字符串，事件名称，不含“on”，比如“click”、“mouseover”、“keydown”等。 </li><li>listener ：实现了 EventListener 接口或者是 JavaScript 中的函数。 </li><li>useCapture ：是否使用捕捉，一般用 false 。例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"testText"</span>).addEventListener(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123; alert(event.keyCode); &#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>在IE 7、8中使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.attachEvent(type, listener);</span><br></pre></td></tr></table></figure></p><ul><li>target： 文档节点、document、window 或 XMLHttpRequest。 </li><li>type： 字符串，事件名称，含“on”，比如“onclick”、“onmouseover”、“onkeydown”等。 </li><li>listener ：实现了 EventListener 接口或者是 JavaScript 中的函数。 例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"txt"</span>).attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;alert(event.keyCode);&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>W3C 及 IE 同时支持移除指定的事件, 用途是移除设定的事件, 格式分别如下: </p><p>W3C格式: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">removeEventListener(event,<span class="function"><span class="keyword">function</span>,<span class="title">capture</span>/<span class="title">bubble</span>);</span></span><br></pre></td></tr></table></figure><p>Windows IE的格式如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">detachEvent(event,<span class="function"><span class="keyword">function</span>);</span></span><br></pre></td></tr></table></figure></p><h3 id="阻止冒泡的兼容性写法"><a href="#阻止冒泡的兼容性写法" class="headerlink" title="阻止冒泡的兼容性写法"></a>阻止冒泡的兼容性写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e=<span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>]||event;</span><br><span class="line">    <span class="keyword">if</span>(e&amp;&amp;e.stopPropagation)&#123;</span><br><span class="line">        e.stopPropagation()</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.event)&#123;</span><br><span class="line">        <span class="built_in">window</span>.event.cancelBubble=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻止浏览器默认行为的兼容性写法"><a href="#阻止浏览器默认行为的兼容性写法" class="headerlink" title="阻止浏览器默认行为的兼容性写法"></a>阻止浏览器默认行为的兼容性写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopDefault</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e=<span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>]||event;</span><br><span class="line">    <span class="comment">//阻止默认浏览器动作(W3C)</span></span><br><span class="line">    <span class="keyword">if</span>(e&amp;&amp;e.preventDefault)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//IE中阻止函数默认动作的方式</span></span><br><span class="line">        <span class="built_in">window</span>.event.returnValue=<span class="literal">false</span>;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事件捕获与冒泡以及其解决方法&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>浅谈CSS布局</title>
    <link href="http://yoursite.com/2018/03/14/%E6%B5%85%E8%B0%88CSS%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/03/14/浅谈CSS布局/</id>
    <published>2018-03-14T06:51:44.917Z</published>
    <updated>2017-09-23T03:30:50.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1.水平居中"></a><strong>1.水平居中</strong></h2><p>水平居中的页面布局中最为常见的一种布局形式，多出现于标题，以及内容区域的组织形式，下面介绍三种实现水平居中的方法:</p><a id="more"></a><p>注：下面各个实例中实现的是child元素的对齐操作，child元素的父容器是parent元素</p><blockquote><p><strong>a.使用inline-block 和 text-align实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">text-align</span>: center;&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">display</span>: inline-block;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>优点：兼容性好；<br>不足：需要同时设置子元素和父元素</p><blockquote><p><strong>b.使用margin:0 auto来实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>缺点: 需要指定宽度</p><blockquote><p><strong>c.使用绝对定位实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">position</span>:relative;&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">left</span>:<span class="number">50%</span>;<span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%);&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>/<em>或者实用margin-left的负值为盒子宽度的一半也可以实现，不过这样就必须知道盒子的宽度，但兼容性好</em>/</p><h2 id="2-两列定宽，一列自适应"><a href="#2-两列定宽，一列自适应" class="headerlink" title="2.两列定宽，一列自适应"></a><strong>2.两列定宽，一列自适应</strong></h2><p><img src="2.jpg" alt="asddsa"></p><p>基本html结构为父容器为parent,自容器为left,center,right.其中，left,center定宽，right自适应</p><blockquote><p><strong>a.利用float+margin实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;<span class="attribute">float</span>:left:width:<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">margin-left</span>:<span class="number">400px</span>;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>b.利用float+overflow实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;<span class="attribute">float</span>:left:width:<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">overflow</span>:hidden;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="3-两侧定宽，中栏自适应"><a href="#3-两侧定宽，中栏自适应" class="headerlink" title="3.两侧定宽，中栏自适应"></a><strong>3.两侧定宽，中栏自适应</strong></h2><p><img src="3.jpg" alt="asddsa"></p><blockquote><p><strong>a.利用float+margin实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.left&#123;width：100px;float:left;&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">margin-right</span>:-<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">float</span>:right;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>b.利用table实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">display</span>:table;<span class="attribute">table-layout</span>:fixed&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>,<span class="selector-class">.right</span>&#123;<span class="attribute">display</span>:table-cell;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p> <a href="http://www.imooc.com/article/2235" target="_blank" rel="noopener">链接</a><br>来源：慕课网</p><hr><h2 id="4-inline和block-的区别"><a href="#4-inline和block-的区别" class="headerlink" title="4.inline和block 的区别"></a><strong>4.inline和block 的区别</strong></h2><ul><li>常见的<em>块级元</em>素 有 div, form, table, p, h1-h6, dl, ol, ul 等。</li><li>常见的<em>内联元素</em> 有 span, a, strong, em, lable, input, select, textarea, img, br 等。</li></ul><blockquote><ul><li><strong>display:block</strong><br>1.block元素会独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度自动填满其父元素宽度。<br>2.block元素可以设置width,height属性。块级元素即使设置了宽度,仍然是独占一行。<br>3.block元素可以设置margin和padding属性。</li></ul></blockquote><hr><blockquote><ul><li><strong>display:inline</strong><br>1.inline元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随元素的内容而变化。<br>2.inline元素设置width,height属性无效。<br>3.inline元素的margin和padding属性，水平方向的会产生边距效果；但竖直方向无效果</li></ul></blockquote><hr><blockquote><ul><li><strong>display:inline-block</strong><br>将对象呈现为inline对象的内容作为block对象呈现。</li></ul></blockquote><hr><h2 id="5-postion"><a href="#5-postion" class="headerlink" title="5.postion"></a><strong>5.postion</strong></h2><table><thead><tr><th>值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>absolute</td><td style="text-align:left">生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位 <strong>脱离文档流</strong></td></tr><tr><td>fixed</td><td style="text-align:left">生成绝对定位的元素，相对于浏览器窗口进行定位  <strong>脱离文档流</strong></td></tr><tr><td>relative</td><td style="text-align:left">生成相对定位的元素，相对于其正常位置进行定位。</td></tr><tr><td>static</td><td style="text-align:left">默认值。没有定位，元素出现在正常的流中</td></tr><tr><td>inherit</td><td style="text-align:left">规定应该从父元素继承 position 属性的值。</td></tr></tbody></table><h2 id="6-float"><a href="#6-float" class="headerlink" title="6.float"></a><strong>6.float</strong></h2><blockquote><p>1.元素浮动后脱离了文档流，所以父元素是无法根据元素来自适应的。<br>关于float产生的影响以及解决方法，请<a href="http://www.divcss5.com/jiqiao/j406.shtml" target="_blank" rel="noopener">查看此文档</a></p></blockquote><blockquote><p>2.浮动元素会被自动设置成块级元素，相当于给元素设置了display:block</p></blockquote><blockquote><p>3.多个浮动方向一致的元素使用流式排列</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-水平居中&quot;&gt;&lt;a href=&quot;#1-水平居中&quot; class=&quot;headerlink&quot; title=&quot;1.水平居中&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.水平居中&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;水平居中的页面布局中最为常见的一种布局形式，多出现于标题，以及内容区域的组织形式，下面介绍三种实现水平居中的方法:&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>文本框输入效果总结</title>
    <link href="http://yoursite.com/2018/03/14/%E6%96%87%E6%9C%AC%E6%A1%86%E8%BE%93%E5%85%A5%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2018/03/14/文本框输入效果/</id>
    <published>2018-03-14T06:51:44.911Z</published>
    <updated>2017-09-23T03:30:51.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文本框输入效果"><a href="#文本框输入效果" class="headerlink" title="文本框输入效果"></a>文本框输入效果</h1><hr><p>简单的罗列了几个文本框输入后的效果;话不多说，直接上代码：</p><p>1、选中去除文本框文字，离开后显示原有文字：</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">"关键词"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">onmouseover</span>=<span class="string">this.focus();this.select();</span> <span class="attr">onclick</span>=<span class="string">"if(value==defaultValue)&#123;value='';this.style.color='#000'&#125;"</span> <span class="attr">onBlur</span>=<span class="string">"if(!value)&#123;value=defaultValue;this.style.color='#999'&#125;"</span> <span class="attr">style</span>=<span class="string">"color:#999"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> 2、选中后方可编辑：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"tpbox"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">id</span>=<span class="string">"hydb1"</span>&gt;</span>选中这边编辑</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtNo"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">value</span>=<span class="string">"选中前面的选项方可编辑"</span> <span class="attr">edit</span>()&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function edit(val) &#123;</span><br><span class="line">    if (val) &#123;</span><br><span class="line">        C.disabled = false;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        document.getElementById(&quot;hydb1&quot;).disabled = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3、点击链接后方可编辑：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"username.readOnly=false;alert('你好，欢迎使用！')"</span>&gt;</span>先点击我哦！<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 你的姓名：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"--请输入--"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">readOnly</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、输入框从中间输入：从中间输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text "</span> <span class="attr">name</span>=<span class="string">"mid "</span> <span class="attr">style</span>=<span class="string">"text-align:center; "</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、输入框只能输入数字（用的是正则表达式）：你 的年龄： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[^\d]/g, '') "</span> <span class="attr">onbeforepaste</span>=<span class="string">"clipboardData.setData( 'text',clipboardData.getData( 'text').replace(/[^\d]/g, '')) "</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、输入框只能输入中文（用的是正则表达式）：你的中文名： <br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[ -~]/g, '') "</span> <span class="attr">onkeydown</span>=<span class="string">"if(event.keyCode==13)event.keyCode=9 "</span>&gt;</span> <span class="tag">&lt;</span></span><br></pre></td></tr></table></figure><p>8、只能输入英文和数字（用的是正则表达式）： 你 的昵称： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[\W]/g, '') "</span> <span class="attr">onbeforepaste</span>=<span class="string">"clipboardData.setData( 'text',clipboardData.getData( 'text').replace(/[^\d]/g, '')) "</span> <span class="attr">onkeydown</span>=<span class="string">"if(event.keyCode==13)event.keyCode=9 "</span>&gt;</span></span><br></pre></td></tr></table></figure><p>9、输入框不能编辑，但表单可以获得输入框内的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text "</span> <span class="attr">value</span>=<span class="string">"afreon "</span> <span class="attr">onclick</span>=<span class="string">"alert( '总和不能编辑！'); "</span> <span class="attr">onfocus</span>=<span class="string">"this.blur() "</span> /&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text "</span> <span class="attr">value</span>=<span class="string">"afreon "</span> <span class="attr">onclick</span>=<span class="string">"alert(this.value); "</span> <span class="attr">readonly</span> /&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"不可修改 "</span> <span class="attr">readonly</span>=<span class="string">"true "</span> <span class="attr">type</span>=<span class="string">"text "</span></span></span><br><span class="line"><span class="tag">/&gt;</span>//:字体颜色为黑体</span><br></pre></td></tr></table></figure><p> 10、输入框不能编辑，并且表单不能获得输入框内的值<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"不可修改 "</span> <span class="attr">disabled</span>=<span class="string">"disabled "</span> <span class="attr">type</span>=<span class="string">"text "</span> /&gt;</span>//:字体颜色为灰体 <span class="tag">&lt;/<span class="name">br</span>&gt;</span>11、输入框禁止输入法： <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onpaste</span>=<span class="string">"return false "</span> <span class="attr">style</span>=<span class="string">"ime-mode:disabled "</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以上代码部门引用<a href="http://www.cnblogs.com/apache-x/p/5368469.html" target="_blank" rel="noopener">这位大哥的博客</a></p><h3 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新….."></a>持续更新…..</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文本框输入效果&quot;&gt;&lt;a href=&quot;#文本框输入效果&quot; class=&quot;headerlink&quot; title=&quot;文本框输入效果&quot;&gt;&lt;/a&gt;文本框输入效果&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;简单的罗列了几个文本框输入后的效果;话不多说，直接上代码：&lt;/p&gt;
&lt;p&gt;1、选中去除文本框文字，离开后显示原有文字：&lt;/p&gt;
    
    </summary>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>visual studio code 编辑器</title>
    <link href="http://yoursite.com/2018/03/14/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    <id>http://yoursite.com/2018/03/14/工欲善其事，必先利其器/</id>
    <published>2018-03-14T06:51:44.896Z</published>
    <updated>2017-09-23T03:30:53.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工欲善其事，必先利其器"><a href="#工欲善其事，必先利其器" class="headerlink" title="工欲善其事，必先利其器"></a>工欲善其事，必先利其器</h1><h3 id="安装visual-studio-code"><a href="#安装visual-studio-code" class="headerlink" title="安装visual studio code"></a>安装visual studio code</h3><p> 选择一款合适自己的编辑器尤为重要，目前比较主流的编辑器 有sublime-text<br>atom 等，本文简单介绍VSC的安装及使用！<br> 在visual studio code<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">官网</a>中点击下载合适自己电脑的版本！然后一路next安装！</p><a id="more"></a><p>安装完成后点击打开窗口，安装新的插件。按照<a href="http://jingyan.baidu.com/article/4853e1e56628791909f72623.html" target="_blank" rel="noopener">插件安装经验</a>打开新的扩展窗口，选择自己需要的插件安装</p><p><img src="4.jpg" alt="asddsa"></p><h3 id="介绍几个比较实用的插件"><a href="#介绍几个比较实用的插件" class="headerlink" title="介绍几个比较实用的插件"></a>介绍几个比较实用的插件</h3><p><strong>1.HTML Snippets</strong><br>超级实用且初级的 H5代码片段以及提示</p><p><img src="3.jpg" alt="asd"></p><p><strong>2.HTML CSS Support</strong><br>让 html 标签上写class 智能提示当前项目所支持的样式</p><p><img src="1.jpg" alt="图片"></p><p><strong>3.Path Intellisense</strong><br>自动路劲补全，个人认为这个非常有用</p><p><img src="5.gif" alt="图片"></p><p><strong>4.Atuo Rename Tag</strong></p><p>修改 html 标签，自动帮你完成尾部闭合标签的同步修改，和 webstorm 一样</p><p><img src="6.gif" alt="图片"></p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p><strong>1.格式调整</strong></p><ul><li>代码行缩进 Ctrl+[ 、 Ctrl+]</li><li>Ctrl+C 、 Ctrl+V 复制或剪切当前行/当前选中内容</li><li>代码格式化： Shift+Alt+F，或 Ctrl+Shift+P 后输入 format code</li><li>上下移动一行： Alt+Up 或 Alt+Down</li><li>向上向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down</li><li>在当前行下边插入一行 Ctrl+Enter</li><li>在当前行上方插入一行 Ctrl+Shift+Enter</li></ul><p><strong>2.光标相关</strong></p><ul><li>移动到行首： Home</li><li>移动到行尾： End</li><li>移动到文件结尾： Ctrl+End</li><li>移动到文件开头： Ctrl+Home 移动到后半个括号： Ctrl+Shift+]</li><li>选择从光标到行尾： Shift+End</li><li>选择从行首到光标处： Shift+Home</li><li>删除光标右侧的所有字： Ctrl+Delete</li><li>扩展/缩小选取范围： Shift+Alt+Left 和 Shift+Alt+Right</li><li>多行编辑(列编辑)：Alt+Shift+鼠标左键，Ctrl+Alt+Down/Up</li><li>同时选中所有匹配： Ctrl+Shift+L</li><li>Ctrl+D 下一个匹配的也被选中 (在 sublime * 中是删除当前行，后面自定义快键键中，设置与 Ctrl+Shift+K 互换了)</li></ul><p><strong>3.查找替换</strong></p><ul><li>查找 Ctrl+F</li><li>查找替换 Ctrl+H</li><li>整个文件夹中查找 Ctrl+Shift+F</li></ul><p>好的，今天就写这么多，祝愿世界和平！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工欲善其事，必先利其器&quot;&gt;&lt;a href=&quot;#工欲善其事，必先利其器&quot; class=&quot;headerlink&quot; title=&quot;工欲善其事，必先利其器&quot;&gt;&lt;/a&gt;工欲善其事，必先利其器&lt;/h1&gt;&lt;h3 id=&quot;安装visual-studio-code&quot;&gt;&lt;a href=&quot;#安装visual-studio-code&quot; class=&quot;headerlink&quot; title=&quot;安装visual studio code&quot;&gt;&lt;/a&gt;安装visual studio code&lt;/h3&gt;&lt;p&gt; 选择一款合适自己的编辑器尤为重要，目前比较主流的编辑器 有sublime-text&lt;br&gt;atom 等，本文简单介绍VSC的安装及使用！&lt;br&gt; 在visual studio code&lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;中点击下载合适自己电脑的版本！然后一路next安装！&lt;/p&gt;
    
    </summary>
    
    
      <category term="vsc" scheme="http://yoursite.com/tags/vsc/"/>
    
  </entry>
  
  <entry>
    <title>工作杂记</title>
    <link href="http://yoursite.com/2018/03/14/%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/14/工作杂记（一）/</id>
    <published>2018-03-14T06:51:44.859Z</published>
    <updated>2017-11-16T15:15:36.357Z</updated>
    
    <content type="html"><![CDATA[<p>记录工作中的一些小知识点之类的杂谈<br><a id="more"></a></p><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><p>先安装好node 然后命令行执行 node -v<br>如下，表示安装成功<br><img src="http://img.blog.csdn.net/20160822125319646" alt="image"><br>然后安装cnpm  </p><p>需要详细了解cnpm的朋友请前往官网<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a> 查看<br>在cmd中输入  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p> 即可将npm指向国内镜像源，之后输入cnpm -v   </p><h3 id="直接将npm的仓库修改为淘宝镜像"><a href="#直接将npm的仓库修改为淘宝镜像" class="headerlink" title="直接将npm的仓库修改为淘宝镜像"></a>直接将npm的仓库修改为淘宝镜像</h3><p> 方法如下<br> npm是一个很好用的工具，全场是Node Packet Manager，是一个nodejs的包管理工具，但是美中不足的是当我们去安转包的时候却发现下载的速度太慢，但是没关系，还是有方法的就是利用淘宝的国内镜像，一下是3个设置的方法：<br>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p><p>1.通过config命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>npm info underscore （如果上面配置正确这个命令会有字符串response）<br>2.命令行指定</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org info underscore</span><br></pre></td></tr></table></figure><p>3.编辑 ~/.npmrc 加入下面内容</p><p>registry = <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><h3 id="网页中咨询客服随机跳转"><a href="#网页中咨询客服随机跳转" class="headerlink" title="网页中咨询客服随机跳转"></a>网页中咨询客服随机跳转</h3><p>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Btn.onclick = getServiceQQ(); <span class="comment">// 调用</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">rd</span>(<span class="params">n, m</span>) </span>&#123; <span class="comment">// 生成随机数</span></span><br><span class="line">    <span class="keyword">var</span> c = m - n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * c + n);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getServiceQQ</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 随机跳转到qq</span></span><br><span class="line">    <span class="keyword">var</span> qqary = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"2851282570"</span>, <span class="string">"2851282668"</span>, <span class="string">"2851282678"</span>, <span class="string">"2851282590"</span>, <span class="string">"2851282686"</span>, <span class="string">"2851282632"</span>, <span class="string">"2851282683"</span>, <span class="string">"2851282657"</span>);</span><br><span class="line">    <span class="built_in">window</span>.open(<span class="string">"http://wpa.qq.com/msgrd?v=3&amp;uin="</span> + qqary[rd(<span class="number">0</span>, <span class="number">7</span>)] + <span class="string">"&amp;site=qq&amp;menu=yes"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="less编译工具-考拉"><a href="#less编译工具-考拉" class="headerlink" title="less编译工具 考拉"></a>less编译工具 考拉</h3><p>十分强大的编译工具 <a href="http://ouz1r1b1f.bkt.clouddn.com/Koala.rar" target="_blank" rel="noopener">下载链接</a><br><a href="https://www.cnblogs.com/mrhgw/p/4535429.html" target="_blank" rel="noopener">博客园-Less/Sass编译工具，koala使用指南</a></p><h3 id="验证输入值不能包含特殊字符"><a href="#验证输入值不能包含特殊字符" class="headerlink" title="验证输入值不能包含特殊字符"></a>验证输入值不能包含特殊字符</h3><p>代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[.0-9a-zA-Z\u4e00-\u9fa5]+$|^[0-9a-zA-Z][0-9a-zA-Z ]+[0-9a-zA-Z]$/i</span>;</span><br><span class="line">    <span class="keyword">if</span> (!reg.test(value)) &#123;</span><br><span class="line">      alert(<span class="string">"关键词不可包含特殊字符和空格！"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录工作中的一些小知识点之类的杂谈&lt;br&gt;
    
    </summary>
    
    
      <category term="小知识" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>文字超出显示</title>
    <link href="http://yoursite.com/2018/03/14/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA.../"/>
    <id>http://yoursite.com/2018/03/14/多行文字超出显示.../</id>
    <published>2018-03-14T06:51:44.858Z</published>
    <updated>2017-10-09T08:12:49.415Z</updated>
    
    <content type="html"><![CDATA[<p>适用于移动端的文字超出布局<br><a id="more"></a></p><h4 id="单行文字超出："><a href="#单行文字超出：" class="headerlink" title="单行文字超出："></a>单行文字超出：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.txt</span>&#123;</span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span></span><br><span class="line"><span class="undefined">    white-space: nowrap;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多行文字超出显示："><a href="#多行文字超出显示：" class="headerlink" title="多行文字超出显示："></a>多行文字超出显示：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.txt</span>&#123;</span></span><br><span class="line"><span class="undefined">    display: -webkit-box;</span></span><br><span class="line"><span class="undefined">    -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="undefined">    -webkit-line-clamp: 3;</span></span><br><span class="line"><span class="undefined">overflow: hidden;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击查看<br><a href="http://www.css88.com/webkit/-webkit-line-clamp/" target="_blank" rel="noopener">相关链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;适用于移动端的文字超出布局&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>同源策略和JSONP</title>
    <link href="http://yoursite.com/2018/03/14/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%92%8CJSONP/"/>
    <id>http://yoursite.com/2018/03/14/同源策略和JSONP/</id>
    <published>2018-03-14T06:51:44.842Z</published>
    <updated>2017-10-10T09:32:40.657Z</updated>
    
    <content type="html"><![CDATA[<p>解决Ajax无法跨域请求的问题<br><a id="more"></a><br>先补充两个概念：</p><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><p>处于安全考虑，浏览器约定俗成执行这一规定：</p><ol><li>协议相同</li><li>端口相同</li><li>域名相同  </li></ol><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">阮一峰-浏览器同源政策及其规避方法</a></p><h4 id="跨域请求的概念"><a href="#跨域请求的概念" class="headerlink" title="跨域请求的概念"></a>跨域请求的概念</h4><p><img src="http://images2015.cnblogs.com/blog/1036514/201610/1036514-20161003230515692-763999447.png" alt="image"></p><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><blockquote><p>JSON的优点：</p><p>1、基于纯文本，跨平台传递极其简单；</p><p>2、Javascript原生支持，后台语言几乎全部支持；</p><p>3、轻量级数据格式，占用字符数量极少，特别适合互联网传递；</p><p>4、可读性较强，虽然比不上XML那么一目了然，但在合理的依次缩进之后还是很容易识别的；</p><p>5、容易编写和解析，当然前提是你要知道数据结构；</p></blockquote><h4 id="JSONP的诞生"><a href="#JSONP的诞生" class="headerlink" title="JSONP的诞生"></a>JSONP的诞生</h4><ol><li>首先，因为ajax无法跨域，然后开发者就有所思考</li><li>其次，开发者发现，script标签的src属性是可以跨域的把跨域服务器写成 调用本地的函数 ，回调数据回来不就好了？</li><li>json刚好被js支持（object）调用跨域服务器上动态生成的js格式文件（不管是什么类型的地址，最终生成的返回值都是一段js代码）</li><li>这种获取远程数据的方式看起来非常像ajax，但其实并不一样</li><li>便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP。</li><li>传递一个callback参数给跨域服务端，然后跨域服务端返回数据时会将这个callback参数作为函数名来包裹住json数据即可。</li></ol><p>简言之：</p><blockquote><p>json不支持跨域，而js可以跨域，因此在服务器端用客户端提供的js函数名将json数据封装起来，再将函数提供给客户端调用，从而获得json数据。</p></blockquote><p><a href="http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决Ajax无法跨域请求的问题&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://yoursite.com/2018/03/14/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/03/14/前端性能优化/</id>
    <published>2018-03-14T06:51:44.836Z</published>
    <updated>2017-11-29T15:16:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录前端性能优化的相关知识<br><a id="more"></a><br><img src="http://ouz1r1b1f.bkt.clouddn.com/WebAPP%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%A7%84%E8%8C%83.png" alt="image">  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录前端性能优化的相关知识&lt;br&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>前端开发的几款插件</title>
    <link href="http://yoursite.com/2018/03/14/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9A%84%E5%87%A0%E6%AC%BE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/03/14/前端开发的几款浏览器插件/</id>
    <published>2018-03-14T06:51:44.835Z</published>
    <updated>2017-11-05T13:34:40.728Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一些开发常用的利器”插件” 持续更新中<br><a id="more"></a></p><h3 id="json-viewer"><a href="#json-viewer" class="headerlink" title="json-viewer"></a>json-viewer</h3><p>最近在请求json 数据的时候，返回的一大堆数据，没有任何排版，看起来很不爽，网上找了个格式化的插件，json-viewer看起来爽多了。  </p><p>如下图：<img src="http://ouz1r1b1f.bkt.clouddn.com/blog/img/sa.png" alt="image"></p><h3 id="网址二维码："><a href="#网址二维码：" class="headerlink" title="网址二维码："></a>网址二维码：</h3><p> 有时候需要在移动端查看一些网址手动输入网址巨慢，这时候，就需要一个快捷方式啦，扫面二维码啊，下载插件<a href="https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg" target="_blank" rel="noopener">二维码(QR码)生成器(QR Code Generator)</a>就可以轻松搞定了。</p><h3 id="翻墙-Proxy-SwitchyOmega"><a href="#翻墙-Proxy-SwitchyOmega" class="headerlink" title="翻墙 Proxy SwitchyOmega"></a>翻墙 Proxy SwitchyOmega</h3><p>经常需要翻墙的我们，一直渴望一款持久好用的翻墙软件，现在就介绍一款自己用的 firefly.<a href="https://github.com/yinghuocho/firefly-proxy" target="_blank" rel="noopener">点击进入github下载</a>如下图，点击下载对应的版本安装即可<br><img src="http://ouz1r1b1f.bkt.clouddn.com/ss.png" alt="image">  </p><h3 id="代理管理插件-Proxy-SwitchyOmega"><a href="#代理管理插件-Proxy-SwitchyOmega" class="headerlink" title="代理管理插件 Proxy SwitchyOmega"></a>代理管理插件 Proxy SwitchyOmega</h3><p>顺便介绍介绍一款方便快捷的代理管理插件<br><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">Proxy SwitchyOmega</a>在安装好刚刚的firefly之后 点击运行可以看到他的端口号为  </p><p><img src="http://ouz1r1b1f.bkt.clouddn.com/ddd.png" alt="image"><br>在Proxy SwitchyOmega中添加对应的情景模式，就可以使用了<br>如图<img src="http://ouz1r1b1f.bkt.clouddn.com/aa.png" alt="image">  </p><p>持续更新中….</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一些开发常用的利器”插件” 持续更新中&lt;br&gt;
    
    </summary>
    
    
      <category term="插件" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>浏览器兼容性总结</title>
    <link href="http://yoursite.com/2018/03/14/%E5%85%BC%E5%AE%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/03/14/兼容性总结/</id>
    <published>2018-03-14T06:51:44.814Z</published>
    <updated>2017-09-26T14:15:11.095Z</updated>
    
    <content type="html"><![CDATA[<p>介绍前端常见的几个兼容性问题<br><a id="more"></a><br>1.input<br>input 设置左右padding之后，ie中输入过多内容后，padding消失。<br>解决方法：在外面套一层div设置宽高，padding然后设置input的宽高为100%  </p><p>2.在设置float的div在IE下设置margin时会产生双边距，这是IE6的一个典型bug，<br>解决方法是加上display:inline;  </p><p>3.Ie6下定义1px高的div<br>ie6默认div高度为一个字体显示的高度，所在ie6下div的高度大于等于一个字的高度，因此在ie6下定义高度为1px的容器，显示的是一个字体的高度  </p><p>overflow:hidden; || zoom:0.08;  ||  line-height:1px;  </p><p>4.chrome浏览器  中文界面下默认会将小于12px 的文本强制按照12px 显示,可通过加入 CSS 属性-webkit-text-size-adjust: none;解决.  </p><p>5.各个浏览器默认的内外边距不同<br>解决 ：<br>*{margin:0;padding:0;}  </p><ol><li>IE6 width为奇数，右边多出1px的问题<br>问题：<br>父级元素采用相对定位，且宽度设置为奇数时，子元素采用绝对定位，在ie6中会出现右侧多出1像素<br>解决：<br>将宽度的奇数值改成偶数  </li></ol><p>7.IE6两个层之间3px的问题<br>问题：<br>左边层采用浮动，右边没有采用浮动时在ie6中两层之间就会产生3像素的间距<br>解决：<br>A、右边层也采用浮动  float<br>B、左边层添加属性 margin-right:-3px;  </p><ol><li>除去滚动条的问题<br>问题：<br>隐藏滚动条<br>解决：<br>1、只有ie6-7支持<body scroll="no"><br>2、除ie6-7不支持 body{overflow:hidden}<br>3、所有浏览器 html{overflow:hidden}</body></li></ol><p>9、标准的事件绑定方法函数为addEventListener，但IE下是attachEvent；  </p><p>10.封装一个获取行外样式的函数:(兼容所有浏览器,包括低版本IE6,7)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">funtion getStyle(obj,name)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.currentStyle)&#123;</span><br><span class="line">        <span class="comment">//IE</span></span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[name];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//Chrom,FF</span></span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj,<span class="literal">false</span>)[name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    调用：getStyle(oDiv,<span class="string">'width'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍前端常见的几个兼容性问题&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>为啥行内元素还能设置宽高呢？</title>
    <link href="http://yoursite.com/2018/03/14/%E4%B8%BA%E5%95%A5%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E8%BF%98%E8%83%BD%E8%AE%BE%E7%BD%AE%E5%AE%BD%E9%AB%98%E5%91%A2%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/03/14/为啥行内元素还能设置宽高呢？/</id>
    <published>2018-03-14T06:51:44.812Z</published>
    <updated>2017-09-23T07:16:38.046Z</updated>
    
    <content type="html"><![CDATA[<p>HTML中的行内元素 ，块状元素以及置换元素<br><a id="more"></a><br>最近碰到一个很神奇的问题：<br>1.img标签是块状元素吗？<br>当然不是，他不会单独占据一行<br>那为何能够设置宽高呢？<br>这就把我难住了，后来插了一下资料<br>发现了个‘大秘密’<br>先来说说HTMl标签的极大特性</p><h3 id="块状元素"><a href="#块状元素" class="headerlink" title="块状元素"></a>块状元素</h3><p>最明显的特征就是独自占领一行，自动充满父级元素的内容区域，绝不会让别人“侵略”（当然可以通过其他方式去改变他）。<br>常见的有：div，p..等等。<br>通过CSS设定了浮动（float属性，可向左浮动或向右浮动）以及设定显示（display）属性为“block”或“list-item”的元素都是块级元素。</p><h3 id="行内元素："><a href="#行内元素：" class="headerlink" title="行内元素："></a>行内元素：</h3><p>上面说块及元素独自占领一行，行内元素就没这么霸道了，他可以左右都允许有元素，最常见的就是<a></a><br>通过display:’inline’设置以后都会变成行内元素。</p><h3 id="行内非替换元素："><a href="#行内非替换元素：" class="headerlink" title="行内非替换元素："></a>行内非替换元素：</h3><p>对行内非替换元素如a元素、span元素等，<br>设置宽度width 无效。<br>设置高度height无效，可以通过line-height来设置。<br>设置margin只有左右margin有效，上下无效。（这就是span的margin-top无效的原因）<br>设置padding只有左右padding有效，上下则无效。块级元素的width/height/margin/padding都是有效的</p><h3 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h3><p>浏览器根据其标签的元素与属性来判断显示具体的内容。<br>比如：<input> type=”text” 的是，这是一个文本输入框，换一个其他的时候，浏览器显示就不一样  </p><p>(X)HTML中的<img>、<input>、<textarea>、</textarea><select>、<object>都是替换元素，这些元素都没有实际的内容。</object></select></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML中的行内元素 ，块状元素以及置换元素&lt;br&gt;
    
    </summary>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>一种书写很简单的javascipt继承方式</title>
    <link href="http://yoursite.com/2018/03/14/%E4%B8%80%E7%A7%8D%E4%B9%A6%E5%86%99%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84javascipt%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/14/一种书写很简单的javascipt继承方式/</id>
    <published>2018-03-14T06:51:44.779Z</published>
    <updated>2017-09-23T02:34:08.523Z</updated>
    
    <content type="html"><![CDATA[<p>一、一种书写起来很简单的继承方式<br><a id="more"></a><br>js的继承一直是一个很烦人的概念，之前整理过一次 但是还是没有弄清楚。最近发现一种比较简单的书写方式，拿出来分享一下。</p><p>简单的理解为：<br>什么是继承：</p><blockquote><p>在原有对象上稍加修改，得到另一个新对象，原有对象不会受到影响  </p></blockquote><blockquote><p> 复用代码的一种形式；子类不影响父类 继承一些父类的功能</p></blockquote><p>二、下面这个实例演示继承的一种方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">id, name, age</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    person.prototype.sayhello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你好，我是"</span> + <span class="keyword">this</span>.name + <span class="string">"  我今年"</span> + <span class="keyword">this</span>.age + <span class="string">"岁了"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> student1 = <span class="keyword">new</span> person(<span class="string">"box"</span>, <span class="string">"gcf"</span>, <span class="number">22</span>)</span><br><span class="line">    student1.sayhello(); <span class="comment">//输出 你好 我是郭春福 今年22了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 继承核心</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">son, parent</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (arr <span class="keyword">in</span> parent) &#123;</span><br><span class="line">            son[arr] = parent[arr]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">man</span>(<span class="params">id, name, age</span>) </span>&#123;</span><br><span class="line">        person.call(<span class="keyword">this</span>, id, name, age)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    extend(man.prototype, person.prototype);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> student2 = <span class="keyword">new</span> man(<span class="string">"box2"</span>, <span class="string">"zjn"</span>, <span class="number">23</span>)</span><br><span class="line">    student2.sayhello() <span class="comment">//输出 你好我是zjn 今年23岁了 继承了父类person 的属性和方法</span></span><br><span class="line"></span><br><span class="line">    man.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"大家好，我是"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    student2.show() <span class="comment">//弹出 大家好 我是zjn </span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>就是这样，希望对大家有所帮助</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、一种书写起来很简单的继承方式&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
