<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[rem.js]]></title>
      <url>http://yoursite.com/2018/05/31/rem.js/</url>
      <content type="html"><![CDATA[<p> rem单位在各种屏幕上的适配代码<br> <a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rem单位在各种屏幕上的适配代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// width用来设置设计稿原型的屏幕宽度（这里是以 Iphone 6为原型的设计稿）</span></span><br><span class="line">  <span class="keyword">const</span> width = <span class="number">375</span></span><br><span class="line">  <span class="comment">// 注册 resize事件</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, setFontSize, <span class="literal">false</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setFontSize</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> clientWidth = <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">    <span class="comment">// 这里是设置屏幕的最大和最小值时候给一个默认值</span></span><br><span class="line">    <span class="keyword">if</span> (clientWidth &gt; <span class="number">720</span>) clientWidth = <span class="number">720</span></span><br><span class="line">    <span class="keyword">if</span> (clientWidth &lt; <span class="number">320</span>) clientWidth = <span class="number">320</span></span><br><span class="line">    <span class="comment">// 设置 rem 大小</span></span><br><span class="line">    <span class="built_in">document</span>.documentElement.style.fontSize = <span class="string">`<span class="subst">$&#123;clientWidth <span class="regexp">/ width * 20&#125;px`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  setFontSize()</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;</span></span></span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js比较版本号大小]]></title>
      <url>http://yoursite.com/2018/05/31/js%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7%E5%A4%A7%E5%B0%8F/</url>
      <content type="html"><![CDATA[<p>由于版本号是两个小数点不能直接比较，直接比较会出错（偶尔不对）。<br><a id="more"></a><br>所以就把前两位 转为浮点数比较，在相等的情况下比较后面一位。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> versionfunegt = <span class="function"><span class="keyword">function</span> (<span class="params">ver1, ver2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> version1pre = <span class="built_in">parseFloat</span>(ver1)</span><br><span class="line">  <span class="keyword">var</span> version2pre = <span class="built_in">parseFloat</span>(ver2)</span><br><span class="line">  <span class="keyword">var</span> version1next = ver1.replace(version1pre + <span class="string">'.'</span>, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">var</span> version2next = ver2.replace(version2pre + <span class="string">'.'</span>, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">if</span> (version1pre &gt; version2pre) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (version1pre &lt; version2pre) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (version1next &gt;= version2next) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决安卓返回键路由切换异常的问题]]></title>
      <url>http://yoursite.com/2018/04/27/%E8%A7%A3%E5%86%B3%E5%AE%89%E5%8D%93%E8%BF%94%E5%9B%9E%E9%94%AE%20%E8%B7%AF%E7%94%B1%E5%88%87%E6%8D%A2%E5%BC%82%E5%B8%B8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>使用$router.push()跳转路由.安装返回键返回路径问题<br><a id="more"></a></p>
<p>使用$router.push()跳转路由，在安卓返回键中不能正常返回，可以自定义返回路径，按如下操作：</p>
<h3 id="state中定义两个状态"><a href="#state中定义两个状态" class="headerlink" title="state中定义两个状态"></a>state中定义两个状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">currentRouterName: &apos;&apos;, // 存放当前页面的路由</span><br><span class="line">routerHistory: &#123; // 存放路由跳转规则，键为当前页面路由名称，值为返回时要回到的页面路径</span><br><span class="line">timing: &apos;/&apos;,</span><br><span class="line">timing_weekday: &apos;/timing&apos;,</span><br><span class="line">timing_weekend: &apos;/timing&apos;,</span><br><span class="line">timing_settingWeekday: &apos;/timing-weekday&apos;,</span><br><span class="line">timing_settingWeekend: &apos;/timing-weekend&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mutations-js中更改状态"><a href="#mutations-js中更改状态" class="headerlink" title="mutations.js中更改状态"></a>mutations.js中更改状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const getRouter = (state, routerName) =&gt; &#123;</span><br><span class="line">  state.currentRouterName = routerName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="App-vue-中设置路径"><a href="#App-vue-中设置路径" class="headerlink" title="App.vue 中设置路径"></a>App.vue 中设置路径</h3><p>如果页面中存在弹出层，返回键按下的时候应先关闭弹层,使用v-back指令，应添加v-if</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hk-pop(</span><br><span class="line">    v-model=&quot;settingPop&quot;</span><br><span class="line">    v-if=&quot;settingPop&quot;</span><br><span class="line">    v-back=&quot;settingPop&quot;</span><br><span class="line">    class=&quot;setting-pop&quot;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>
<p>将app.vue作如下修改<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">...mapState([</span><br><span class="line">  <span class="string">'routerHistory'</span>,</span><br><span class="line">  <span class="string">'currentRouterName'</span></span><br><span class="line">])</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 安卓返回键点击</span></span><br><span class="line"><span class="keyword">this</span>.$hekr.on(<span class="string">'back'</span>, () =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$back.length)</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.$back.length) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.$back.pop()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.$route.name === <span class="string">'home'</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.$hekr.close()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="keyword">this</span>.routerHistory[<span class="keyword">this</span>.currentRouterName])</span><br><span class="line"><span class="comment">// this.$router.back()</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="页面挂载的时候，更改状态，获取当前页面的路由name"><a href="#页面挂载的时候，更改状态，获取当前页面的路由name" class="headerlink" title="页面挂载的时候，更改状态，获取当前页面的路由name"></a>页面挂载的时候，更改状态，获取当前页面的路由name</h3><p>可以直接传入当前页面的路由name，需要和state中的routerHistory对象的键对应，<br>也可以用 this.$router.history.current.name 获取路由名称，但是state中键值名称不能包括中划线，如果路由名称中存在中划线，需作一定转换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> this.getRouter(&apos;timing_weekday&apos;) </span><br><span class="line">// this.getRouter(this.$router.history.current.name)</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[截流函数]]></title>
      <url>http://yoursite.com/2018/04/27/%E6%88%AA%E6%B5%81%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>避免多次触发<br><a id="more"></a></p>
<h3 id="什么是节流函数"><a href="#什么是节流函数" class="headerlink" title="什么是节流函数"></a>什么是节流函数</h3><p>简单讲就是让一个函数无法在短时间内连续调用，只有当上一次函数执行后过了规定的时间间隔，才能进行下一次该函数的调用。或者说你在操作的时候不会马上执行该函数，而是等你不操作的时候才会执行。</p>
<h3 id="原生封装"><a href="#原生封装" class="headerlink" title="原生封装"></a>原生封装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function thorttleFn(callBack,delay,intervalTime)&#123;</span><br><span class="line">    var timer=null;  // 定时器变量</span><br><span class="line">    var time=0;  // 时间变量</span><br><span class="line">    return function()&#123;</span><br><span class="line">        var context=this;</span><br><span class="line">        var curTime=new Date();  // 当前执行的时间</span><br><span class="line">        clearTimeout(timer);  //  清除上次的定时器</span><br><span class="line">        </span><br><span class="line">        if(!time)&#123;</span><br><span class="line">            time=curTime;</span><br><span class="line">        &#125;</span><br><span class="line">        // 当前执行时间距离上次执行的时间是否大于等于间隔时间</span><br><span class="line">        if(curTime - time &gt;= intervalTime)&#123;</span><br><span class="line">            time=curTime;</span><br><span class="line">            callBack.apply(context,arguments)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            timer=setTimeout(()=&gt;&#123;</span><br><span class="line">                callBack.apply(context,arguments)</span><br><span class="line">            &#125;,delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用</span><br><span class="line">window.onresize=thorttleFn(myFunc,50,300)</span><br></pre></td></tr></table></figure>
<h3 id="调用lodash"><a href="#调用lodash" class="headerlink" title="调用lodash"></a>调用lodash</h3><p><a href="http://www.css88.com/doc/lodash/#_debouncefunc-wait0-options" target="_blank" rel="noopener">debounce函数详解</a></p>
<p>vue项目中使用如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash --save // 安装 lodash</span><br><span class="line">import debounce  from&apos;lodash/debounce&apos;  // 引入debounce</span><br><span class="line"></span><br><span class="line">delayGetSpeed: debounce( // 节流 </span><br><span class="line">  function (val) &#123; // 回掉函数</span><br><span class="line">    console.log(&apos;Do somthing here&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, 1000),</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Eslint 校验规则及配置]]></title>
      <url>http://yoursite.com/2018/04/27/Eslint%E6%A0%A1%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>记录常用的Eslint检验配置<br><a id="more"></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line">    <span class="string">"规则名"</span>: [规则值, 规则配置]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>规则值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;off&quot;或者0    //关闭规则关闭  </span><br><span class="line">&quot;warn&quot;或者1      //在打开的规则作为警告（不影响退出代码）  </span><br><span class="line">&quot;error&quot;或者2    //把规则作为一个错误（退出代码触发时为1）</span><br></pre></td></tr></table></figure>
<p>校验规则 来自网络</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"><span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line"><span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line"><span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"><span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"><span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line"><span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"><span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line"><span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"><span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"><span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line"><span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"><span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line"><span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"><span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"><span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"><span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line"><span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"><span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"><span class="string">"no-empty"</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-label"</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line"><span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"><span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line"><span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"><span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line"><span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"><span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"><span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line"><span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line"><span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line"><span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"><span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line"><span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line"><span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line"><span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line"><span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"><span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"><span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"><span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line"><span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"><span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"><span class="string">"no-labels"</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line"><span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"><span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"><span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"><span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"><span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line"><span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></span><br><span class="line"><span class="string">"no-multi-spaces"</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line"><span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line"><span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line"><span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line"><span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"><span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"><span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"><span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line"><span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line"><span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line"><span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"><span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"><span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line"><span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"><span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"><span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"><span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line"><span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line"><span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line"><span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"><span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line"><span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"><span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"><span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"><span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"><span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line"><span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"><span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"><span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"><span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"><span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"><span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"><span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line"><span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"><span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"><span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></span><br><span class="line"><span class="string">"no-undef"</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line"><span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"><span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line"><span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line"><span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"><span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"><span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line"><span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line"><span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"><span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line"><span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"><span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line"><span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"><span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line"><span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line"><span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"><span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"><span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"><span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"><span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line"><span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></span><br><span class="line"><span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"><span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line"><span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"><span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line"><span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"><span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line"><span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"><span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line"><span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></span><br><span class="line"><span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"><span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"><span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line"><span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"><span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line"><span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"><span class="string">"eqeqeq"</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line"><span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line"><span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"><span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"><span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"><span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line"><span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line"><span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line"><span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line"><span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"><span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line"><span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line"><span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line"><span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"><span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line"><span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"><span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line"><span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"><span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"><span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"><span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line"><span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"><span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"><span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"><span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line"><span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line"><span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line"><span class="string">"quotes"</span>: [<span class="number">1</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></span><br><span class="line"><span class="string">"quote-props"</span>:[<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"><span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"><span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line"><span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line"><span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line"><span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line"><span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line"><span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"><span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"><span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"><span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"><span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"><span class="string">"space-return-throw-case"</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"><span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"><span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"><span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line"><span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"><span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line"><span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"><span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"><span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"><span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"><span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vuex理解]]></title>
      <url>http://yoursite.com/2018/04/27/Vuex%E5%AE%98%E6%96%B9%E7%90%86%E8%A7%A3%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>最好提前在你的store中初始化好所有所需属性。<br><a id="more"></a></p>
<p>在src同级目录下 新建一个store文件夹<br>在下面分别建立<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|--src</span><br><span class="line">    |-store</span><br><span class="line">    |    |--index.js</span><br><span class="line">    |    |--state.js</span><br><span class="line">    |    |--mutations.js</span><br><span class="line">    |    |--getters.js</span><br><span class="line">    |    |--actions.js</span><br></pre></td></tr></table></figure></p>
<p>index.js中，引入其他文件并导出</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex, &#123; Store &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mutations <span class="keyword">from</span><span class="string">'./mutations'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  strict: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept([</span><br><span class="line">    <span class="string">'./getters'</span>,</span><br><span class="line">    <span class="string">'./actions'</span>,</span><br><span class="line">    <span class="string">'./mutations'</span></span><br><span class="line">  ], <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    store.hotUpdate(&#123;</span><br><span class="line">      getters: <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'./getters'</span>),</span><br><span class="line">      actions: <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'./actions'</span>),</span><br><span class="line">      mutations: <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'./mutations'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<h3 id="mapState-辅助函数"><a href="#mapState-辅助函数" class="headerlink" title="mapState 辅助函数"></a>mapState 辅助函数</h3><p>这样 就可以在页面中直接使用 this.count获取state 中 count的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">computed:&#123;</span><br><span class="line">     mapState([</span><br><span class="line">      <span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">      <span class="string">'count'</span></span><br><span class="line">    ])   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="mapMutation的使用"><a href="#mapMutation的使用" class="headerlink" title="mapMutation的使用"></a>mapMutation的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">'incrementBy'</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: <span class="string">'increment'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mapGetter辅助函数"><a href="#mapGetter辅助函数" class="headerlink" title="mapGetter辅助函数"></a>mapGetter辅助函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">  <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'doneTodosCount'</span>,</span><br><span class="line">      <span class="string">'anotherGetter'</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用对象格式可以为getters中的方法起别名</span></span><br><span class="line">mapGetters(&#123;</span><br><span class="line">  <span class="comment">// 映射 `this.doneCount` 为 `store.getters.doneTodosCount`</span></span><br><span class="line">  doneCount: <span class="string">'doneTodosCount'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[收集常用工具函数，拿来即用]]></title>
      <url>http://yoursite.com/2018/03/24/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/%E6%94%B6%E9%9B%86%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0%EF%BC%8C%E6%8B%BF%E6%9D%A5%E5%8D%B3%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>一些常用的工具函数<br><a id="more"></a></p>
<p><a href="https://www.cnblogs.com/pdq-phper/p/5093486.html" target="_blank" rel="noopener">sublime配置</a></p>
<h4 id="url地址对象解析"><a href="#url地址对象解析" class="headerlink" title="url地址对象解析"></a>url地址对象解析</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseQueryString</span>(<span class="params">url</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> result=&#123;&#125;;  </span><br><span class="line">    <span class="keyword">var</span> params=url.split(<span class="string">"?"</span>)[<span class="number">1</span>].split(<span class="string">"&amp;"</span>);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,length=params.length;i&lt;length;i++)&#123;  </span><br><span class="line">        <span class="keyword">var</span> temp=params[i].split(<span class="string">"="</span>);  </span><br><span class="line">        result[temp[<span class="number">0</span>]]=temp[<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>
<h4 id="生成随机密码"><a href="#生成随机密码" class="headerlink" title="生成随机密码"></a>生成随机密码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomPassword</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> seed = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>, <span class="string">"I"</span>, <span class="string">"J"</span>, <span class="string">"K"</span>, <span class="string">"L"</span>, <span class="string">"M"</span>, <span class="string">"N"</span>, <span class="string">"P"</span>, <span class="string">"Q"</span>, <span class="string">"R"</span>, <span class="string">"S"</span>, <span class="string">"T"</span>, <span class="string">"U"</span>, <span class="string">"V"</span>, <span class="string">"W"</span>, <span class="string">"X"</span>, <span class="string">"Y"</span>, <span class="string">"Z"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"p"</span>, <span class="string">"Q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>];</span><br><span class="line">  <span class="keyword">const</span> seedlength = seed.length;</span><br><span class="line">  <span class="keyword">let</span> createPassword = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * seedlength);</span><br><span class="line">    createPassword += seed[j];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> createPassword;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">randomPassword(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 输出："a5Csy"</span></span><br></pre></td></tr></table></figure>
<h4 id="判断时间间隔（几天前）"><a href="#判断时间间隔（几天前）" class="headerlink" title="判断时间间隔（几天前）"></a>判断时间间隔（几天前）</h4><p>传入的参数为需要判断的时间戳（毫秒）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateStr</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取js 时间戳</span></span><br><span class="line">    <span class="keyword">var</span> time=<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    time=<span class="built_in">parseInt</span>((time-date*<span class="number">1000</span>)/<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储转换值</span></span><br><span class="line">    <span class="keyword">var</span> s;</span><br><span class="line">    <span class="keyword">if</span>(time&lt;<span class="number">60</span>*<span class="number">10</span>)&#123;<span class="comment">//十分钟内</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'刚刚'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((time&lt;<span class="number">60</span>*<span class="number">60</span>)&amp;&amp;(time&gt;=<span class="number">60</span>*<span class="number">10</span>))&#123;</span><br><span class="line">        <span class="comment">//超过十分钟少于1小时</span></span><br><span class="line">        s = <span class="built_in">Math</span>.floor(time/<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span>  s+<span class="string">"分钟前"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((time&lt;<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>)&amp;&amp;(time&gt;=<span class="number">60</span>*<span class="number">60</span>))&#123; </span><br><span class="line">        <span class="comment">//超过1小时少于24小时</span></span><br><span class="line">        s = <span class="built_in">Math</span>.floor(time/<span class="number">60</span>/<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span>  s+<span class="string">"小时前"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((time&lt;<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">3</span>)&amp;&amp;(time&gt;=<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>))&#123; </span><br><span class="line">        <span class="comment">//超过1天少于3天内</span></span><br><span class="line">        s = <span class="built_in">Math</span>.floor(time/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line">        <span class="keyword">return</span> s+<span class="string">"天前"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="comment">//超过3天</span></span><br><span class="line">        <span class="keyword">var</span> date= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(date) * <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> date.getFullYear()+<span class="string">"/"</span>+(date.getMonth()+<span class="number">1</span>)+<span class="string">"/"</span>+date.getDate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dateStr(<span class="number">1521697302999</span>)</span><br><span class="line"><span class="comment">// 输出 "刚刚"</span></span><br></pre></td></tr></table></figure></p>
<h4 id="时间日期格式化"><a href="#时间日期格式化" class="headerlink" title="时间日期格式化"></a>时间日期格式化</h4><p>date参数为待格式化的日期字符串<br>参数format为格式化格式 默认为yyyy-MM-dd hh:mm:ss  </p>
<p>return a.toString().replace(/^(\d)$/,”0$1”)</p>
<p>如果a是一位数，则在前面加0<br>1—-&gt;01<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFmt</span>(<span class="params">date, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!date) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  date = <span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">  <span class="keyword">const</span> paddNum = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">      num += <span class="string">''</span></span><br><span class="line">      <span class="keyword">return</span> num.replace(<span class="regexp">/^(\d)$/</span>, <span class="string">'0$1'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 指定格式字符</span></span><br><span class="line">  <span class="keyword">const</span> cfg = &#123;</span><br><span class="line">    yyyy: date.getFullYear(),</span><br><span class="line">    yy: date.getFullYear().toString().substring(<span class="number">2</span>),</span><br><span class="line">    M: date.getMonth() + <span class="number">1</span>,</span><br><span class="line">    MM: paddNum(date.getMonth() + <span class="number">1</span>),</span><br><span class="line">    d: date.getDate(),</span><br><span class="line">    dd: paddNum(date.getDate()),</span><br><span class="line">    hh: paddNum(date.getHours()),</span><br><span class="line">    mm: paddNum(date.getMinutes()),</span><br><span class="line">    ss: paddNum(date.getSeconds())</span><br><span class="line">  &#125;</span><br><span class="line">  format || (format = <span class="string">'yyyy-MM-dd hh:mm:ss'</span>)</span><br><span class="line">  <span class="keyword">return</span> format.replace(<span class="regexp">/([a-z])(\1)*/ig</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cfg[m]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dateFmt(<span class="number">1521697721522</span>,<span class="string">'yyyy-MM-dd'</span>)</span><br><span class="line"><span class="comment">// 输出： "2018-03-22"</span></span><br><span class="line">dateFmt(<span class="number">1521697721522</span>,<span class="string">'hh:mm:ss'</span>)</span><br><span class="line"><span class="comment">// 输出  "13:48:41"</span></span><br></pre></td></tr></table></figure></p>
<h4 id="判断日期是否为今天"><a href="#判断日期是否为今天" class="headerlink" title="判断日期是否为今天"></a>判断日期是否为今天</h4><p>基于上例的格式化函数dateFmt()</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isToday</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = str &amp;&amp; <span class="keyword">new</span> <span class="built_in">Date</span>(str);</span><br><span class="line">  date = dateFmt(date, <span class="string">'yyyy-MM-dd'</span>);</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> y = now.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> m = (now.getMonth() + <span class="number">1</span>) &lt; <span class="number">10</span> ? <span class="string">'0'</span> + (now.getMonth() + <span class="number">1</span>) : (now.getMonth() + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> d = now.getDate() &lt; <span class="number">10</span> ? <span class="string">'0'</span> + now.getDate() : now.getDate();</span><br><span class="line">  <span class="keyword">var</span> today = y + <span class="string">'-'</span> + m + <span class="string">'-'</span> + d;</span><br><span class="line">  <span class="keyword">return</span> today === date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数字转金额"><a href="#数字转金额" class="headerlink" title="数字转金额"></a>数字转金额</h4><p>参数s为待转换的金额  </p>
<p>n为需要保留的小数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function currencyFmt(s, n) &#123;</span><br><span class="line">  n = n &gt; 0 &amp;&amp; n &lt;= 20 ? n : 2;</span><br><span class="line">  if (!s &amp;&amp; s !== 0) &#123;</span><br><span class="line">    return &apos;&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">  s = parseFloat((s + &apos;&apos;).replace(/[^\d\.-]/g, &apos;&apos;)).toFixed(n) + &apos;&apos;;</span><br><span class="line">  var l = s.split(&apos;.&apos;)[0],</span><br><span class="line">    r = s.split(&apos;.&apos;)[1];</span><br><span class="line">  return &apos;\u00a5&apos; + &apos; &apos; + l + &apos;.&apos; + r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">currencyFmt(123.2568,3)</span><br><span class="line">// 输出 &quot;¥ 123.257&quot;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数字动态切换]]></title>
      <url>http://yoursite.com/2018/03/20/%E4%B8%80%E4%B8%AA%E5%89%8D%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>贴代码<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"number-slide"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> numRun2 = $(<span class="string">".number-slide"</span>).numberAnimate(&#123;</span></span><br><span class="line"><span class="javascript">    num: <span class="string">'212135'</span>, <span class="comment">// 初始值</span></span></span><br><span class="line"><span class="javascript">    speed: <span class="number">1000</span>, <span class="comment">//  切换速度</span></span></span><br><span class="line"><span class="javascript">    symbol: <span class="string">","</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> nums2 = <span class="number">212135</span>;</span></span><br><span class="line"><span class="javascript">  setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> n = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">7</span> + <span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">    nums2 += n;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(n, nums2)</span></span><br><span class="line"><span class="undefined">    numRun2.resetData(nums2);</span></span><br><span class="line"><span class="undefined">  &#125;, 5000);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.mt-number-animate</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Helvetica35-Thin"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-number-animate</span> <span class="selector-class">.mt-number-animate-dot</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">text-align</span>: center</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-number-animate</span> <span class="selector-class">.mt-number-animate-dom</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Helvetica35-Thin"</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-number-animate</span> <span class="selector-class">.mt-number-animate-dom</span> <span class="selector-class">.mt-number-animate-span</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $.fn.numberAnimate = <span class="function"><span class="keyword">function</span>(<span class="params">setting</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">        speed: <span class="number">1000</span>, <span class="comment">//动画速度</span></span><br><span class="line">        num: <span class="string">""</span>, <span class="comment">//初始化值</span></span><br><span class="line">        iniAnimate: <span class="literal">true</span>, <span class="comment">//是否要初始化动画效果</span></span><br><span class="line">        symbol: <span class="string">''</span>, <span class="comment">//默认的分割符号，千，万，千万</span></span><br><span class="line">        dot: <span class="number">0</span> <span class="comment">//保留几位小数点</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果setting为空，就取default的值</span></span><br><span class="line">    <span class="keyword">var</span> setting = $.extend(defaults, setting);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果对象有多个，提示出错</span></span><br><span class="line">    <span class="keyword">if</span> ($(<span class="keyword">this</span>).length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      alert(<span class="string">"just only one obj!"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果未设置初始化值。提示出错</span></span><br><span class="line">    <span class="keyword">if</span> (setting.num == <span class="string">""</span>) &#123;</span><br><span class="line">      alert(<span class="string">"must set a num!"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> nHtml = <span class="string">'&lt;div class="mt-number-animate-dom" data-num="&#123;&#123;num&#125;&#125;"&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;0&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;1&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;2&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;3&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;4&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;5&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;6&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;7&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;8&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;9&lt;/span&gt;\</span></span><br><span class="line"><span class="string">            &lt;span class="mt-number-animate-span"&gt;.&lt;/span&gt;\</span></span><br><span class="line"><span class="string">          &lt;/div&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数字处理</span></span><br><span class="line">    <span class="keyword">var</span> numToArr = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">      num = <span class="built_in">parseFloat</span>(num).toFixed(setting.dot);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span>(num) == <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> arrStr = num.toString().split(<span class="string">""</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> arrStr = num.split(<span class="string">""</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//console.log(arrStr);</span></span><br><span class="line">      <span class="keyword">return</span> arrStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置DOM symbol:分割符号</span></span><br><span class="line">    <span class="keyword">var</span> setNumDom = <span class="function"><span class="keyword">function</span>(<span class="params">arrStr</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> shtml = <span class="string">'&lt;div class="mt-number-animate"&gt;'</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arrStr.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; (len - i) % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; setting.symbol != <span class="string">""</span> &amp;&amp; arrStr[i] != <span class="string">"."</span>) &#123;</span><br><span class="line">          shtml += <span class="string">'&lt;div class="mt-number-animate-dot"&gt;'</span> + setting.symbol + <span class="string">'&lt;/div&gt;'</span> + nHtml.replace(<span class="string">"&#123;&#123;num&#125;&#125;"</span>, arrStr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          shtml += nHtml.replace(<span class="string">"&#123;&#123;num&#125;&#125;"</span>, arrStr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      shtml += <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">      <span class="keyword">return</span> shtml;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行动画</span></span><br><span class="line">    <span class="keyword">var</span> runAnimate = <span class="function"><span class="keyword">function</span>(<span class="params">$parent</span>) </span>&#123;</span><br><span class="line">      $parent.find(<span class="string">".mt-number-animate-dom"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = $(<span class="keyword">this</span>).attr(<span class="string">"data-num"</span>);</span><br><span class="line">        num = (num == <span class="string">"."</span> ? <span class="number">10</span> : num);</span><br><span class="line">        <span class="keyword">var</span> spanHei = $(<span class="keyword">this</span>).height() / <span class="number">11</span>; <span class="comment">//11为元素个数</span></span><br><span class="line">        <span class="keyword">var</span> thisTop = -num * spanHei + <span class="string">"px"</span>;</span><br><span class="line">        <span class="keyword">if</span> (thisTop != $(<span class="keyword">this</span>).css(<span class="string">"top"</span>)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (setting.iniAnimate) &#123;</span><br><span class="line">            <span class="comment">//HTML5不支持</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">window</span>.applicationCache) &#123;</span><br><span class="line">              $(<span class="keyword">this</span>).animate(&#123;</span><br><span class="line">                top: thisTop</span><br><span class="line">              &#125;, setting.speed);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              $(<span class="keyword">this</span>).css(&#123;</span><br><span class="line">                <span class="string">'transform'</span>: <span class="string">'translateY('</span> + thisTop + <span class="string">')'</span>,</span><br><span class="line">                <span class="string">'-ms-transform'</span>: <span class="string">'translateY('</span> + thisTop + <span class="string">')'</span>,</span><br><span class="line">                <span class="comment">/* IE 9 */</span></span><br><span class="line">                <span class="string">'-moz-transform'</span>: <span class="string">'translateY('</span> + thisTop + <span class="string">')'</span>,</span><br><span class="line">                <span class="comment">/* Firefox */</span></span><br><span class="line">                <span class="string">'-webkit-transform'</span>: <span class="string">'translateY('</span> + thisTop + <span class="string">')'</span>,</span><br><span class="line">                <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">                <span class="string">'-o-transform'</span>: <span class="string">'translateY('</span> + thisTop + <span class="string">')'</span>,</span><br><span class="line">                <span class="string">'-ms-transition'</span>: setting.speed / <span class="number">1000</span> + <span class="string">'s'</span>,</span><br><span class="line">                <span class="string">'-moz-transition'</span>: setting.speed / <span class="number">1000</span> + <span class="string">'s'</span>,</span><br><span class="line">                <span class="string">'-webkit-transition'</span>: setting.speed / <span class="number">1000</span> + <span class="string">'s'</span>,</span><br><span class="line">                <span class="string">'-o-transition'</span>: setting.speed / <span class="number">1000</span> + <span class="string">'s'</span>,</span><br><span class="line">                <span class="string">'transition'</span>: setting.speed / <span class="number">1000</span> + <span class="string">'s'</span></span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setting.iniAnimate = <span class="literal">true</span>;</span><br><span class="line">            $(<span class="keyword">this</span>).css(&#123;</span><br><span class="line">              top: thisTop</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">$parent</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//初始化</span></span><br><span class="line">      $parent.html(setNumDom(numToArr(setting.num)));</span><br><span class="line">      runAnimate($parent);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置参数</span></span><br><span class="line">    <span class="keyword">this</span>.resetData = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> newArr = numToArr(num);</span><br><span class="line">        <span class="keyword">var</span> $dom = $(<span class="keyword">this</span>).find(<span class="string">".mt-number-animate-dom"</span>);</span><br><span class="line">        <span class="keyword">if</span> ($dom.length &lt; newArr.length) &#123;</span><br><span class="line">          $(<span class="keyword">this</span>).html(setNumDom(numToArr(num)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $dom.each(<span class="function"><span class="keyword">function</span>(<span class="params">index, el</span>) </span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).attr(<span class="string">"data-num"</span>, newArr[index]);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        runAnimate($(<span class="keyword">this</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//init</span></span><br><span class="line">    init($(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp搭建项目流程]]></title>
      <url>http://yoursite.com/2018/03/20/gulp%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>关于gulp的一点介绍<br><a id="more"></a><br>所有的环境都是在 node 安装好的基础上执行的。 node -v 查看node的安装情况。npm -v查看npm 的安装情况.</p>
<p>gulp自动化构建常用参数</p>
<p>1、src 读取文件或者文件夹</p>
<p>2、dest 生成文件也就是写文件</p>
<p>3、watch 检测文件</p>
<p>4、tesk 指定任务</p>
<p>5、pipe 用流的方式处理 gulp.</p>
<p>在项目中创建以下文件夹<br>build<br>dist<br>src</p>
<blockquote>
<p>解释：</p>
<p>build  : 项目整合目录，一般在这里整合所有的代码，不压缩。</p>
<p>dist : 项目发布目录，也是压缩所有文件后的。</p>
<p>src :  项目源文件目录，这里放置的都是源文件。</p>
</blockquote>
<p>test : 这个是编写自动化测试的</p>
<p><strong>安装查看gulp，在项目根目录下。</strong>  </p>
<p>全局安装gulp </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp</span><br></pre></td></tr></table></figure>
<p>然后创建配置文件 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init    初始化并创建 package.json文件</span><br><span class="line">npm install --save-dev gulp  将Node的配置环境装进配置文件中</span><br></pre></td></tr></table></figure>
<p> 然后安装需要的插件</p>
<p><a href="https://www.cnblogs.com/Darren_code/p/gulp.html" target="_blank" rel="noopener">关于gulp插件的详细介绍请看这</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx —save-dev将文件自动写进配置文件中</span><br></pre></td></tr></table></figure></p>
<p>gulp-htmlmin 看到名字就能知道，这个插件是用来压缩HTML。PS：注释啥的都可以去掉哦，看文档get更多技能哈<br>gulp-imagemin 除了能压缩常见的图片格式，还能压缩 SVG，叼叼的~  </p>
<p>gulp-clean-css 压缩 CSS。我原本推荐的是  gulp-minify-css，结果其首页中已建议改用gulp-clean-css…   </p>
<p>gulp-uglify 专业压缩 Javascript<br>gulp-concat 上面几个都是压缩，这插件是管合并的…恭喜，“减少网络请求”的成就达成:)  </p>
<p>gulp-autoprefixer 给 CSS增加前缀。解决某些CSS属性不是标准属性，有各种浏览器前缀的情况，灰常有用  </p>
<p>gulp-rename 修改文件名称。比如有时我们需要把app.js改成app.min.js，瞬间高级了<br>gulp-util 最基础的工具，但俺只用来打日志…</p>
<p>一般常用的创建整站的有这些，多个的话可以将插件以空格的形式分开</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-clean gulp-concat gulp-connect gulp-cssmin gulp-imagemin gulp-less gulp-load-plugins gulp-uglify open  -—save-dev</span><br></pre></td></tr></table></figure>
<p>然后则是gulpfile.js配置文件的编写。具体为下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入gulp</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="comment">//这样的话 其他的模块可以直接使用 $ 符号来引入</span></span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)();</span><br><span class="line"><span class="keyword">var</span> open = <span class="built_in">require</span>(<span class="string">'open'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义目录路径</span></span><br><span class="line"><span class="keyword">var</span> app = &#123;</span><br><span class="line">    <span class="comment">//源代码，文件目录</span></span><br><span class="line">    srcPath: <span class="string">'src/'</span>,</span><br><span class="line">    <span class="comment">//文件整合之后的目录</span></span><br><span class="line">    devPath: <span class="string">'build/'</span>,</span><br><span class="line">    <span class="comment">//项目，发布目录上产部署</span></span><br><span class="line">    prdPath: <span class="string">'dist/'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过bower安装的插件，需要拷贝到 devPath prdPath中</span></span><br><span class="line">gulp.task(<span class="string">'lib'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//   /**/* 读取这个文件夹下边的所有的文件或者文件夹</span></span><br><span class="line">    gulp.src(<span class="string">'bower_components/**/*'</span>)</span><br><span class="line">    <span class="comment">//读取完整后进行操作  西安拷贝到整合目录 并重命名，在拷贝到生产目录并重命名</span></span><br><span class="line">    .pipe(gulp.dest(app.devPath + <span class="string">'vendor'</span>))</span><br><span class="line">    .pipe(gulp.dest(app.prdPath + <span class="string">'vendor'</span>))</span><br><span class="line">    .pipe($.connect.reload());  <span class="comment">//文件更改后自动变异 并执行启动服务重新打开浏览器</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//将 html 拷贝到 devPath prdPath中</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'**/*.html'</span>)</span><br><span class="line">    .pipe(gulp.dest(app.devPath))</span><br><span class="line">    .pipe(gulp.dest(app.prdPath))</span><br><span class="line">    .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//将 模拟的json 文件 拷贝到 devPath prdPath中</span></span><br><span class="line">gulp.task(<span class="string">'json'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'data/**/*.json'</span>)</span><br><span class="line">    .pipe(gulp.dest(app.devPath + <span class="string">'data'</span>))</span><br><span class="line">    .pipe(gulp.dest(app.prdPath + <span class="string">'data'</span>))</span><br><span class="line">    .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 index.less 文件 拷贝到 devPath prdPath中，index.less引入了所有的其他的less</span></span><br><span class="line">gulp.task(<span class="string">'less'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'style/index.less'</span>)</span><br><span class="line">    .pipe($.less())</span><br><span class="line">    .pipe(gulp.dest(app.devPath + <span class="string">'css'</span>))</span><br><span class="line">    .pipe($.cssmin())</span><br><span class="line">    .pipe(gulp.dest(app.prdPath + <span class="string">'css'</span>))</span><br><span class="line">    .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 拷贝 js 文件  将所有的源文件中的js 文件整合成index.js 然后拷贝过去</span></span><br><span class="line">gulp.task(<span class="string">'script'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'script/**/*.js'</span>)</span><br><span class="line">    .pipe($.concat(<span class="string">'index.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(app.devPath + <span class="string">'js'</span>))</span><br><span class="line">    .pipe($.uglify())</span><br><span class="line">    .pipe(gulp.dest(app.prdPath + <span class="string">'js'</span>))</span><br><span class="line">    .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝 压缩 图片 最后放到发布目录下</span></span><br><span class="line">gulp.task(<span class="string">'image'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'image/**/*'</span>)</span><br><span class="line">    <span class="comment">//江源图片放到整合目录下，在压缩放到生产目录下</span></span><br><span class="line">    .pipe(gulp.dest(app.devPath + <span class="string">'image'</span>))</span><br><span class="line">    .pipe($.imagemin())</span><br><span class="line">    .pipe(gulp.dest(app.prdPath + <span class="string">'image'</span>))</span><br><span class="line">    .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//总的方法</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>,[<span class="string">'image'</span>, <span class="string">'script'</span>, <span class="string">'less'</span>, <span class="string">'json'</span>, <span class="string">'html'</span>, <span class="string">'lib'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除旧文件，每次更新的时候</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.src([app.devPath,app.prdPath])</span><br><span class="line">    .pipe($.clean());</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写服务</span></span><br><span class="line">gulp.task(<span class="string">'serve'</span>,[<span class="string">'build'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.connect.server(&#123;</span><br><span class="line">        <span class="comment">//服务起来的入口</span></span><br><span class="line">        root: [app.devPath],</span><br><span class="line">        <span class="comment">//文件更改后自动刷新页面</span></span><br><span class="line">        livereload: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//端口号</span></span><br><span class="line">        port: <span class="number">1234</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 在 命令工具中执行 gulp serve  就相当于是启动了服务</span></span><br><span class="line">    <span class="comment">//自动打开浏览器</span></span><br><span class="line">    open(<span class="string">'http://localhost:1234'</span>);</span><br><span class="line">    <span class="comment">//我们希望更改了文件，就自动编译，并且打包等然后打开浏览器</span></span><br><span class="line">    gulp.watch(<span class="string">'bower_components/**/*'</span> , [<span class="string">'lib'</span>]);</span><br><span class="line">    <span class="comment">//监听 script 下边的 js 文件，并执行 script 方法</span></span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'script/**/*.js'</span>, [<span class="string">'script'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'**/*.html'</span>, [<span class="string">'html'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'data/**/*.json'</span>, [<span class="string">'json'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'style/**/*.less'</span>, [<span class="string">'less'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'image/**/*'</span>, [<span class="string">'image'</span>]);</span><br><span class="line">    <span class="comment">//这样文件变更了就会自动构建</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认执行的任务，直接 执行 gulp 变行了。都编写完成后再终端 执行 gulp 便可以了。</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'serve'</span>]);</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聊一聊package.json]]></title>
      <url>http://yoursite.com/2018/03/20/%E8%81%8A%E4%B8%80%E8%81%8Apackage.json/</url>
      <content type="html"><![CDATA[<p>每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块<br><a id="more"></a></p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境 </p>
<p>下面只介绍几个常见的字段，<a href="http://javascript.ruanyifeng.com/nodejs/packagejson.html" target="_blank" rel="noopener">更多字段请移步阮大神文章</a></p>
<h3 id="scripts字段"><a href="#scripts字段" class="headerlink" title="scripts字段"></a>scripts字段</h3><p>scripts指定了运行脚本命令的npm命令行缩写，比如start指定了运行npm run start时，所要执行的命令。</p>
<p>下面的设置指定了npm run preinstall、npm run postinstall、npm run start、npm run test时，所要执行的命令。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"preinstall"</span>: <span class="string">"echo here it comes!"</span>,</span><br><span class="line">    <span class="string">"postinstall"</span>: <span class="string">"echo there it goes!"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"node index.js"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"tap test/*.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="dependencies字段，devDependencies字段"><a href="#dependencies字段，devDependencies字段" class="headerlink" title="dependencies字段，devDependencies字段"></a>dependencies字段，devDependencies字段</h3><p>dependencies字段指定了项目运行所依赖的模块，devDependencies指定项目开发所需要的模块。</p>
<p>它们都指向一个对象。该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。  </p>
<p>对应的版本可以加上各种限定，主要有以下几种：  </p>
<blockquote>
<p>指定版本：比如1.2.2，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。<br>波浪号（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。<br>插入号（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。<br>latest：安装最新版本。 </p>
</blockquote>
<p>有了package.json文件，直接使用npm install命令，就会在当前目录中安装所需要的模块。</p>
<p>如果一个模块不在package.json文件之中，可以单独安装这个模块，并使用相应的参数，将其写入package.json文件之中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express --save-dev</span><br></pre></td></tr></table></figure>
<h3 id="config-字段"><a href="#config-字段" class="headerlink" title="config 字段"></a>config 字段</h3><p>config字段用于添加命令行的环境变量。</p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面经]]></title>
      <url>http://yoursite.com/2018/03/14/%E9%9D%A2%E7%BB%8F/</url>
      <content type="html"><![CDATA[<p>面试总结<br><a id="more"></a><br>先来看一篇文章吧  <a href="http://taobaofed.org/blog/2017/03/03/to-my-future-friend/" target="_blank" rel="noopener">致未来的实习生</a></p>
<h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>你好，我叫xxx，就读XX专业，很高兴能得到这次面试的机会。我非常喜欢前端的各种新技术，对前端的现状也有一个比较宏观的了解。目前，我比较擅长使用 XX、XXX。如果公司因业务需求，我愿意去学习相应的前端技术！</p>
<p>在生活上，我待人真诚</p>
<pre><code>* 有点难度的开发经历值得一说
* 面试：分析问题，再解决问题
* 把面试官往你熟悉的领域引导
</code></pre><h3 id="面试结束"><a href="#面试结束" class="headerlink" title="面试结束"></a>面试结束</h3><ul>
<li><p>问技术方面面试官的问题</p>
<ul>
<li>结合刚刚的面试，可以给我几点<strong>技术方面的建议</strong>吗</li>
<li>了解一下公司的前端大致在做<strong>哪些业务</strong></li>
<li>了解一下公司前端团队的<strong>技术栈</strong>有哪些</li>
<li><strong>后端</strong>主要用什么语言？</li>
<li>聊的不错的话，可以要一下联系方式</li>
</ul>
</li>
<li><p>问 HR 的问题</p>
<ul>
<li>薪水（税前税后月薪多少？一年十三薪？）</li>
<li>是否有补贴？（餐补？电脑补？）</li>
<li>上下班时间</li>
</ul>
</li>
</ul>
<blockquote>
<p>忌问面试结果</p>
</blockquote>
<h3 id="HR-面"><a href="#HR-面" class="headerlink" title="HR 面"></a>HR 面</h3><p>在公司选择上，我比较看重真正重视和尊重员工的公司。人性化</p>
<ul>
<li><p><strong>你有什么缺点？</strong></p>
<ul>
<li>大型项目经验不足</li>
</ul>
</li>
<li><p><strong>你有什么优点？</strong></p>
<ul>
<li>抗压能力强</li>
</ul>
</li>
<li><p><strong>你对薪水有什么要求？</strong></p>
<ul>
<li>我希望公司能结合我的专业能力和人才市场标准的水平，给我合理的薪水即可</li>
</ul>
</li>
<li><p><strong>你对加班有什么看法</strong></p>
<ul>
<li>如果工作需要，加班是没问题的，反正我现在单身，没啥家庭负担。但是我会在日常工作中尽量提高自己的工作效率，减少不必要的加班。</li>
</ul>
</li>
</ul>
<p><a href="https://www.zhihu.com/question/19603341" target="_blank" rel="noopener">面试的时候 -&gt;_-&gt;</a></p>
<h3 id="回答问题的方式"><a href="#回答问题的方式" class="headerlink" title="回答问题的方式"></a>回答问题的方式</h3><ul>
<li><p><strong>要是直接的问题答不出来的话，可以答一些相关的话题</strong></p>
<pre><code>问：你知道http的302是什么吗
答：不好意思，这个我忘记了，不过我知道 200 表示请求成功，
    404表示资源没有被找到，4xx代表客户端请求报文错误，5xx代表服务端错误
</code></pre></li>
</ul>
<ul>
<li><strong>分点回答</strong></li>
<li><strong>不要冷场，结果并不那么重要，思考过程最重要</strong></li>
</ul>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><pre><code>2xx：成功
3xx：重定向
4xx：客户端错误
5xx：服务端错误
</code></pre><p>200 OK：成功</p>
<p>301 Moved Permanently：永久性重定向（请求的资源被分配了新的URL）</p>
<p>302 Found：临时性重定向（请求的资源临时被分配了新的URL）</p>
<p>304 Not Modified：在这种情况下，由于客户端仍然具有以前下载的资源的副本，因此不需要重新传输资源。</p>
<p>400 Bad Request：请求报文中存在语法错误</p>
<p>403 Forbidden：请求被服务器拒绝</p>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul>
<li><p><strong>减少 HTTP 请求次数</strong>：浏览器进程一次发送请求的数目是有限的（4、6 不等），如果有很多 HTTP 请求，就会造成请求阻塞，影响体验。</p>
<ul>
<li>将小图片转 base64 字符串嵌在页面中</li>
<li>合并图片（css 精灵 == CSS Sprites）</li>
<li>合并 CSS 和 JS 文件</li>
<li>采用 lazyLoad（懒加载）</li>
</ul>
</li>
<li><p><strong>控制资源文件加载优先级</strong>（css 放头部、js 放尾部）</p>
</li>
<li><strong>使用浏览器缓存</strong></li>
<li><strong>使用 cdn</strong></li>
<li><strong>减少重排</strong></li>
<li><strong>压缩 js、css、图片</strong></li>
<li><strong>DNS优化（即域名收敛）</strong>：将静态资源放在一个域名下面，而不要分开放在多个域名下面</li>
<li><strong>资源预加载：</strong> 我们可以使用该技术来预先告知浏览器某些资源可能在将来会被使用到（DNS预解析、资源预获取、预连接、预渲染）</li>
</ul>
<ul>
<li><p>CSS 解析选择器是从右向左的，所以应该尽量避免多层嵌套的选择器</p>
</li>
<li><p>http2: 一个二进制协议，头部压缩、多路复用、服务器推送</p>
</li>
</ul>
<blockquote>
<p><a href="https://github.com/chokcoco/cnblogsArticle/issues/1" target="_blank" rel="noopener">【前端性能】浅谈域名发散与域名收敛</a></p>
<p><a href="https://segmentfault.com/a/1190000006922364" target="_blank" rel="noopener">浅谈网站性能之前端性能优化</a></p>
<p><a href="http://bubkoo.com/2015/11/19/prefetching-preloading-prebrowsing/" target="_blank" rel="noopener">前端性能优化 - 资源预加载</a></p>
</blockquote>
<h3 id="js-坑"><a href="#js-坑" class="headerlink" title="js 坑"></a>js 坑</h3><p><strong>利用循环一次注册多个 setTimeout(()=&gt;{},1000) 后，会在一秒后同时执行这几个计时器，不是一秒执行一个</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="从浏览器输入-URL-到页面渲染发生了什么事"><a href="#从浏览器输入-URL-到页面渲染发生了什么事" class="headerlink" title="从浏览器输入 URL 到页面渲染发生了什么事"></a>从浏览器输入 URL 到页面渲染发生了什么事</h3><pre><code>浏览器先检查请求的内容是否在浏览器缓存中，如果在，则直接解析内容
DNS 解析 URL
浏览器与服务器建立 TCP 连接
客户端发送 HTTP 请求
服务器处理请求，返回 HTTP 响应
关闭 TCP 连接
浏览器解析html生成 DOM tree，解析css生成 CSS Rule Tree
DOM 树和 CSS 规则树一起构造出 render 树
将 render 树显示在页面上
同时异步加载网页中 CSS、JavaScript 等外部资源
</code></pre><h3 id="浏览器的渲染过程"><a href="#浏览器的渲染过程" class="headerlink" title="浏览器的渲染过程"></a>浏览器的渲染过程</h3><ul>
<li>重绘</li>
<li>重排</li>
</ul>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><ul>
<li><strong>async 与 defer</strong></li>
</ul>
<p><a href="http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html" target="_blank" rel="noopener">http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html</a></p>
<p>一般情况：解析 html –&gt; 遇到js，暂停解析html –&gt; 下载js –&gt; 执行js –&gt; 继续解析html</p>
<p>async：解析html –&gt; 遇到js，异步下载js，但不会暂停解析html –&gt; js下载完毕后，暂停解析html，执行js –&gt; js执行完后，继续解析html</p>
<p>defer：解析html –&gt; 遇到js，异步下载js，但不会暂停解析html –&gt; html解析完毕后，开始执行js</p>
<ul>
<li><strong>this 就是你 call 一个函数时，传入的 context</strong></li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/23804247" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/23804247</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="number">12</span>)      <span class="comment">// =&gt; func.call(undefined, 12)</span></span><br><span class="line"></span><br><span class="line">obj.func(<span class="number">12</span>)  <span class="comment">// =&gt; func.call(obj, 12)</span></span><br><span class="line"></span><br><span class="line">func.call(context, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [fn, fn]</span><br><span class="line">arr[<span class="number">0</span>]()  <span class="comment">// this ==&gt; arr</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>什么是闭包： 函数 + 函数所在的环境</strong> </p>
<ul>
<li>封装私有变量和私有方法</li>
</ul>
</li>
<li><p><strong>手动实现 bind 函数</strong> 对于实现的过程有什么具体点的要求吗</p>
<ul>
<li><strong>直接调用 bind 函数并不会直接执行函数</strong></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myBind</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.apply(context, args)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>RESTFUL API</strong>：增查删改</p>
<pre><code>GET    用来获取资源
POST   用来新建资源（也可以用于更新资源）
PUT    用来更新资源
DELETE  用来删除资源
</code></pre></li>
<li><p><strong>事件模型：</strong> 事件捕获、事件冒泡、事件委托</p>
</li>
<li><p><strong>new 操作符</strong></p>
<pre><code>1. 创建一个新的空对象 obj
2. 将空对象 obj  的 __proto__ 属性设置为构造函数的 prototype 属性
3. 将构造函数内部的 this 设置为 obj
</code></pre></li>
<li><p><strong>创建自定义类型目前最好的方式</strong>：组合使用构造函数模式和原型模式</p>
<ul>
<li>属性定义在构造函数中，共享的属性和方法定义在原型上</li>
</ul>
</li>
<li><p><strong>继承的实现</strong></p>
<ul>
<li>组合继承</li>
<li>原型式继承</li>
<li>寄生式继承</li>
<li>寄生组合式继承（最棒）</li>
</ul>
</li>
</ul>
<h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><ul>
<li><p>sessionStorage：只存在于当前页面上</p>
</li>
<li><p><strong>跨域</strong></p>
<ul>
<li>postMessage()</li>
<li><strong>jsonp :</strong> 本质上是请求回一段js代码，然后在本地执行</li>
<li><strong>CORS</strong></li>
</ul>
</li>
<li><p>web worker</p>
</li>
<li>服务器发送事件（SSE)</li>
<li>File API</li>
<li>Drag and Drop</li>
<li>indexedDB</li>
</ul>
<h3 id="vue-相关"><a href="#vue-相关" class="headerlink" title="vue 相关"></a>vue 相关</h3><ul>
<li><p><strong>数据双向绑定</strong></p>
<ul>
<li>最核心的方法便是通过 <code>Object.defineProperty()</code> 来实现对属性的劫持，达到监听数据变动的目的（ES6 可以使用）</li>
</ul>
</li>
<li><p><strong>组件化开发</strong></p>
<ul>
<li>单文件组件</li>
</ul>
</li>
<li><strong>虚拟 DOM</strong><ul>
<li>如果用 js 直接操作 DOM，会造成页面的重排，性能很差</li>
<li>用 js 对象模拟 DOM 树创建出最初的虚拟 DOM，数据发生变化时，生成新的虚拟DOM，与原来的虚拟dom进行比较并将变化应用到最初的虚拟 DOM上，最后再应用到真正的 DOM 上</li>
</ul>
</li>
<li><strong>社区环境好，上手简单</strong></li>
<li><strong>数据驱动，能让你将关注度集中在数据上，而不是繁琐的 DOM 操作上</strong></li>
</ul>
<h3 id="web-安全相关"><a href="#web-安全相关" class="headerlink" title="web 安全相关"></a>web 安全相关</h3><ul>
<li><p><strong>SQL 注入</strong></p>
</li>
<li><p><strong>XSS：</strong> 跨站脚本（Cross-site scripting）</p>
<ul>
<li>利用网站开发时留下的漏洞，将恶意脚本注入，在用户访问该网页时执行恶意脚本，从而达到某种恶意的目的（比如向一个有漏洞的评论框里注入 js 代码）</li>
<li>获取用户敏感信息</li>
<li>过滤用户字符串，对敏感字符进行转义</li>
</ul>
</li>
<li><p><strong>CSRF（或 XSRF）：</strong> 跨站请求伪造（Cross-site request forgery）</p>
<ul>
<li>以用户的名义发起请求，从而达到某种恶意的目的（盗号、发消息、发邮件、转账）</li>
<li>跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</li>
<li>加验证码。</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/" target="_blank" rel="noopener">总结 XSS 与 CSRF 两种跨站攻击</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0" target="_blank" rel="noopener">跨站请求伪造</a></p>
</blockquote>
<p>永远不要信任从客户端发来的数据。</p>
<h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>vue-book 中正好把3月份找实习时候看的知识点都用上了，比如 cookie、localstorage、jsonp 等</p>
<h3 id="http的缓存机制"><a href="#http的缓存机制" class="headerlink" title="http的缓存机制"></a>http的缓存机制</h3><ul>
<li><p>Cache-Control（通过它提供的不同的值来定义缓存策略）</p>
</li>
<li><p>Etag（标识符，用作校验，资源发生变化时，他的值也会变化）</p>
</li>
</ul>
<blockquote>
<p><a href="http://www.cnblogs.com/vajoy/p/5341664.html" target="_blank" rel="noopener">浅谈浏览器http的缓存机制</a></p>
<p><a href="http://jixianqianduan.com/frontend-javascript/2015/12/28/nine-browser-cache-methods.html" target="_blank" rel="noopener">九种浏览器端缓存机制知多少</a></p>
</blockquote>
<h3 id="算法，数据结构"><a href="#算法，数据结构" class="headerlink" title="算法，数据结构"></a>算法，数据结构</h3><p>冒泡排序</p>
<p>快速排序</p>
<ul>
<li><strong>二叉树：</strong> 先序遍历、中序遍历、后序遍历</li>
</ul>
<h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><ul>
<li><strong>Buffer模块是干什么的：</strong> nodejs 用来处理二进制数据的模块，对比与 ES6 的 TypedArray</li>
<li><strong>Stream是什么，使用的两种模式：</strong> stream 是一种用来表示数据流的抽象概念（文件流、）</li>
</ul>
<blockquote>
<p><a href="http://zhenhua-lee.github.io/nodejs/stream.html" target="_blank" rel="noopener">nodejs stream</a></p>
</blockquote>
<h3 id="js-的薄弱点"><a href="#js-的薄弱点" class="headerlink" title="js 的薄弱点"></a>js 的薄弱点</h3><p>模拟事件</p>
<p>前端安全相关</p>
<h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><ul>
<li>给出一个实际的需求，看应聘者怎么解决</li>
<li>让应聘者画一个他所在领域的知识概括<ul>
<li>比如： CSS 有定位、BFC、文本格式等  </li>
</ul>
</li>
</ul>
<p>本文是好友<a href="http://blog.percymong.com" target="_blank" rel="noopener">percymong</a>提供的资源，非常感谢他的指导。</p>
]]></content>
      
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端事件介绍]]></title>
      <url>http://yoursite.com/2018/03/14/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BA%8B%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>移动端常用事件介绍<br><a id="more"></a></p>
<h4 id="1-手势事件"><a href="#1-手势事件" class="headerlink" title="1.手势事件"></a>1.手势事件</h4><pre><code>touchstart：当手指放在屏幕上触发;

touchmove：当手指在屏幕上滑动时，连续地触发;

touchend：当手指从屏幕上离开时触发;

touchcancel： 当系统停止跟踪时触发; 该事件暂时使用不到;
</code></pre><h4 id="2-tap类事件"><a href="#2-tap类事件" class="headerlink" title="2.tap类事件"></a>2.tap类事件</h4><pre><code>触碰事件，一般用于代替click事件，

tap: 手指碰一下屏幕会触发

longTap: 手指长按屏幕会触发

singleTap: 手指碰一下屏幕会触发

doubleTap: 手指双击屏幕会触发
</code></pre><h4 id="3-swipe类事件"><a href="#3-swipe类事件" class="headerlink" title="3.swipe类事件"></a>3.swipe类事件</h4><pre><code>swipe：手指在屏幕上滑动时会触发

swipeLeft：手指在屏幕上向左滑动时会触发

swipeRight：手指在屏幕上向右滑动时会触发

swipeUp：手指在屏幕上向上滑动时会触发

swipeDown：手指在屏幕上向下滑动时会触发
</code></pre><h4 id="事件处理程序的添加与删除"><a href="#事件处理程序的添加与删除" class="headerlink" title="事件处理程序的添加与删除"></a>事件处理程序的添加与删除</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">    addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(element.addEventListener) &#123;</span><br><span class="line">            element.addEventListener(type,handler,<span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent) &#123;</span><br><span class="line">            element.attachEvent(<span class="string">"on"</span>+type,handler);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">"on"</span> +type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element,type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(element.removeEventListener) &#123;</span><br><span class="line">            element.removeEventListener(type,handler,<span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent) &#123;</span><br><span class="line">            element.detachEvent(<span class="string">"on"</span>+type,handler);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">"on"</span> +type] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>该函数接受三个参数</p>
<ul>
<li>element 执行该函数的对象</li>
<li>type 触发事件对象</li>
<li>handler 执行事件  <h6 id="例-："><a href="#例-：" class="headerlink" title="例 ："></a>例 ：</h6>在window中触摸时触发 打印出事件对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> touch = <span class="built_in">document</span>.getElementById(<span class="string">"touch"</span>);</span><br><span class="line">EventUtil.addHandler(touch,<span class="string">"touchstart"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="touches"><a href="#touches" class="headerlink" title="touches:"></a>touches:</h4><p>表示当前跟踪的触摸操作的touch对象的数组。</p>
<p>当一个手指在触屏上时，event.touches.length = 1; 当二个手指在触屏上时，event.touches.length=2, 以此类推</p>
<h4 id="changedTouches"><a href="#changedTouches" class="headerlink" title="changedTouches:"></a>changedTouches:</h4><p>表示上次触摸以来发生了什么改变的touch对象的数组。</p>
<pre><code>每个touch对象都包含了以下几个属性：

clientX 触摸目标在视口中的X坐标。

clientY触摸目标在视口中的Y坐标。

Identifier: 标示触摸的唯一ID。

pageX 触摸目标在页面中的X坐标。

pageY 触摸目标在页面中的Y坐标。

screenX触摸目标在屏幕中的X坐标。

screenY 触摸目标在屏幕中的Y坐标。

target  触摸的DOM节点目标。
</code></pre><h3 id="几个基本知识点"><a href="#几个基本知识点" class="headerlink" title="几个基本知识点"></a>几个基本知识点</h3><p>1.判断是否为iPhone<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAppleMobile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (navigator.platform.indexOf(‘iPad‘) != <span class="number">-1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>2.自动大写与自动修正</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要关闭这两项功能，可以通过autocapitalize 与autocorrect 这两个选项</span></span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> autocapitalize=<span class="string">"off"</span> autocorrect=<span class="string">"off"</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>3.禁止 iOS 弹出各种操作窗口</p>
<p>-webkit-touch-callout:none</p>
<ol>
<li>禁止用户选中文字</li>
</ol>
<p>-webkit-user-select:none</p>
<ol>
<li>关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.value = <span class="keyword">this</span>.value.replace(<span class="regexp">/\u2006/g</span>, ‘‘);</span><br></pre></td></tr></table></figure>
<ol>
<li><p>Andriod 上去掉语音输入按钮</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input::-webkit-input-speech-button &#123;<span class="attr">display</span>: none&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断是否为微信浏览器；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_weixn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span>(ua.match(<span class="regexp">/MicroMessenger/i</span>)==<span class="string">"micromessenger"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端APP 自适应布局]]></title>
      <url>http://yoursite.com/2018/03/14/%E7%A7%BB%E5%8A%A8%E7%AB%AFAPP%20%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>初涉移动端 ，自适应布局的相关要点如下<br>本文摘自<br><a href="http://www.cocoachina.com/webapp/20151110/14148.html" target="_blank" rel="noopener">原文链接</a></p>
<h5 id="1-常规情况下js根据屏幕宽度动态计算"><a href="#1-常规情况下js根据屏幕宽度动态计算" class="headerlink" title="1.常规情况下js根据屏幕宽度动态计算"></a>1.常规情况下js根据屏幕宽度动态计算</h5><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0 ,user-scalable=no&quot;&gt;</span><br><span class="line">&lt;!--        视口                 宽度=设备的宽度       缩放比例为1           禁止用户缩放--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var deviceWidth = document.documentElement.clientWidth;</span><br><span class="line">document.documentElement.style.fontSize = deviceWidth / 7.5 + &apos;px&apos;;</span><br><span class="line">//设计稿基于iphone6，宽度为750px，body的width为750px / 100 = 7.5rem</span><br><span class="line">//http://520ued.com/tools/rem  PX转rem的网站</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure>
<p>width=device-width<br>这段代码是让布局视口的尺寸等于理想视口。<br>设备像素比（DPR） = 设备像素个数 / 理想视口像素个数（device-width）</p>
<h5 id="2-媒体查询较密集的断点"><a href="#2-媒体查询较密集的断点" class="headerlink" title="2.媒体查询较密集的断点"></a>2.媒体查询较密集的断点</h5><pre><code>@media screen and (min-width: 320px) {
    html {font-size: 14px;}
}

@media screen and (min-width: 360px) {
    html {font-size: 16px;}
}

@media screen and (min-width: 400px) {
    html {font-size: 18px;}
}

@media screen and (min-width: 440px) {
    html {font-size: 20px;}
}

@media screen and (min-width: 480px) {
    html {font-size: 22px;}
}

@media screen and (min-width: 640px) {
    html {font-size: 28px;}
}
</code></pre><p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局  </p>
<p><a href="http://www.cocoachina.com/webapp/20151110/14148.html" target="_blank" rel="noopener">flex布局教程</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 移动端App </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解移动端click的300ms的延迟响应]]></title>
      <url>http://yoursite.com/2018/03/14/%E7%90%86%E8%A7%A3%E7%A7%BB%E5%8A%A8%E7%AB%AFclick%E7%9A%84300ms%E7%9A%84%E5%BB%B6%E8%BF%9F%E5%93%8D%E5%BA%94/</url>
      <content type="html"><![CDATA[<p>本文介绍移动端点击事件的300ms延迟及其解决方法<br><a id="more"></a></p>
<h4 id="“Bug”的由来"><a href="#“Bug”的由来" class="headerlink" title="“Bug”的由来"></a>“Bug”的由来</h4><p>Click事件在移动手机开发中有300ms的延　<br>因为在手机早期，浏览器系统有放大和缩放功能，用户在屏幕上点击两次之后，系统会触发放大或者缩放功能，因此系统做了一个处理，当触摸一次后，在300ms这段时间内有没有触摸第二次，如果触摸了第二次的话，说明是触发放大或缩放功能，否则的话是click事件。因此当click时候，所有用户必须等待于300ms后才会触发click事件。所以当在移动端使用click事件的时候，会感觉到有300ms的迟钝</p>
<h4 id="以下情况不用考虑延迟"><a href="#以下情况不用考虑延迟" class="headerlink" title="以下情况不用考虑延迟"></a>以下情况不用考虑延迟</h4><ol>
<li>桌面浏览器；</li>
<li><p>如果 viewport meta 标签 中设置了<br>width=device-width，Android 上的 Chrome 32+ 会禁用 300ms 延时；  </p>
</li>
<li><p>viewport meta 标签如果设置了 user-scalable=no，Android 上的 Chrome（所有版本）都会禁用 300ms 延迟</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>IE10 中，可以使用 css 属性 -ms-touch-action: none 禁止元素双击缩放</p>
</li>
</ol>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h5 id="方案1：禁止用户缩放。"><a href="#方案1：禁止用户缩放。" class="headerlink" title="方案1：禁止用户缩放。"></a>方案1：禁止用户缩放。</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="方案2：使用zepto-js的tap事件。"><a href="#方案2：使用zepto-js的tap事件。" class="headerlink" title="方案2：使用zepto.js的tap事件。"></a>方案2：使用zepto.js的tap事件。</h5><p>tap事件可以理解为在移动端的click事件，而zepto.js因为几乎完全复制jQuery的api，因此常常被用在h5的开发上用来取代jquery</p>
<h5 id="缺陷："><a href="#缺陷：" class="headerlink" title="缺陷："></a>缺陷：</h5><p>tap事件解决了一个300ms延迟问题，却带来了一个新的重大bug，点击穿透</p>
<p>点击穿透的意思，就是如果一个绝对定位或者固定定位元素处于页面最顶层，对这个元素绑定一个点击事件，那么你点击这个点对应的下面凡是有点击事件或者a标签都会被触发执行.</p>
<h5 id="方案3：fastclick-js"><a href="#方案3：fastclick-js" class="headerlink" title="方案3：fastclick.js"></a>方案3：fastclick.js</h5><p>首先想办法引入fastclick.js<br>下载fastclick.js<br><a href="http://www.bootcdn.cn/fastclick/" target="_blank" rel="noopener">点击获取</a>插件源码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'application/javascript'</span> <span class="attr">src</span>=<span class="string">'/path/to/fastclick.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果你使用原生js开发则进行如下声明即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'addEventListener'</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果你想使用jquery<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>部门内容转自<a href="https://segmentfault.com/a/1190000005791890" target="_blank" rel="noopener">移动端点击事件全攻略，这里的坑你知多少？</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Js中的事件捕获与冒泡]]></title>
      <url>http://yoursite.com/2018/03/14/%E6%B5%85%E8%B0%88Js%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%86%92%E6%B3%A1/</url>
      <content type="html"><![CDATA[<p>事件捕获与冒泡以及其解决方法<br><a id="more"></a></p>
<h3 id="1-事件捕获"><a href="#1-事件捕获" class="headerlink" title="1.事件捕获"></a>1.事件捕获</h3><p>JS还设置了另外一种处理多（父子）元素多事件触发的方式，叫做事件捕获。事件捕获与事件冒泡完全相反，先触发祖先元素的事件，然后再逐级触发子元素的事件。默认情况下，绑定事件时，采用事件冒泡原则，如果想要进行事件捕获的话，需要设置一个参数</p>
<h3 id="2-事件冒泡"><a href="#2-事件冒泡" class="headerlink" title="2.事件冒泡"></a>2.事件冒泡</h3><p>事件先出发后代元素，然后逐级‘向上’传递</p>
<ul>
<li><p>[ ] 当你使用事件捕获时，父级元素先触发，子级元素后触发</p>
</li>
<li><p>[ ] 当你使用事件冒泡时，子级元素先触发，父级元素后触发  </p>
</li>
</ul>
<p>冒泡和捕获事件可以用下图表示（<a href="http://www.jb51.net/article/42492.htm" target="_blank" rel="noopener">图片来自脚本之家</a>）<br><img src="http://files.jb51.net/file_images/article/201310/20131028160201571.jpg" alt="image">。</p>
<h3 id="3-addEventListener的基本用法"><a href="#3-addEventListener的基本用法" class="headerlink" title="3.addEventListener的基本用法"></a>3.addEventListener的基本用法</h3><p>在复杂的项目开发中，javascript和html的解耦变得至关重要，我们被推荐使用事件动态绑定的方式来处理按钮的事件。W3C为我们提供了==addEventListener(==)函数用来为指定的dom元素动态绑定事件<br>这个函数有三个参数：</p>
<blockquote>
<ol>
<li>type: 用来设置事件类型，例如click</li>
<li>listener: 用来设置监听事件的函数，及type类型的事件发生后执行的函数</li>
<li>useCapture  可选。布尔值，指定事件是否在捕获或冒泡阶段执行<br>可能值:<br>true - 事件句柄在捕获阶段执行<br>false- false- 默认。事件句柄在冒泡阶段执行</li>
</ol>
</blockquote>
<h3 id="4-事件冒泡与事件捕获要是同时进行怎么办"><a href="#4-事件冒泡与事件捕获要是同时进行怎么办" class="headerlink" title="4.事件冒泡与事件捕获要是同时进行怎么办"></a>4.事件冒泡与事件捕获要是同时进行怎么办</h3><p>在上述绑定事件的代码中，第三个参数不是全部设置的true，就是全部设置成false,那如果既有true，又有false，有的元素设置成按事件冒泡处理，有的元素设置成按事件捕获处理，那怎么办呢？<br>答案是，我们的浏览器更“喜爱”事件捕获：它会先把useCapture为false的元素绑定事件放到一边，按照事件捕获正常的顺序执行useCapture为true的元素绑定事件，最后在按照事件冒泡顺序执行useCapture为false。</p>
<h3 id="5-阻止冒泡、捕获"><a href="#5-阻止冒泡、捕获" class="headerlink" title="5.阻止冒泡、捕获"></a>5.阻止冒泡、捕获</h3><p>事件的传播是可以阻止的：</p>
<ul>
<li>在W3c中，使用stopPropagation（）方法</li>
<li>在IE下设置cancelBubble = true；</li>
<li>在捕获的过程中stopPropagation（）；后，后面的冒泡过程也不会发生了~</li>
</ul>
<p>阻止事件的默认行为，<br>例如click <a>后的跳转~</a></p>
<ul>
<li>在W3c中，使用preventDefault（）方法；</li>
<li>在IE下设置window.event.returnValue = false;</li>
</ul>
<blockquote>
<p>==attachEvent==——兼容：IE7、IE8；不兼容firefox、chrome、IE9、IE10、IE11、safari、opera</p>
<p>==addEventListener==——兼容：firefox、chrome、IE、safari、opera；不兼容IE7、IE8</p>
</blockquote>
<h3 id="6-addEventListener的使用方式："><a href="#6-addEventListener的使用方式：" class="headerlink" title="6.addEventListener的使用方式："></a>6.addEventListener的使用方式：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.addEventListener(type, listener, useCapture);</span><br></pre></td></tr></table></figure>
<ul>
<li>target： 文档节点、document、window 或 XMLHttpRequest。 </li>
<li>type： 字符串，事件名称，不含“on”，比如“click”、“mouseover”、“keydown”等。 </li>
<li>listener ：实现了 EventListener 接口或者是 JavaScript 中的函数。 </li>
<li>useCapture ：是否使用捕捉，一般用 false 。例如：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"testText"</span>).addEventListener(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123; alert(event.keyCode); &#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>在IE 7、8中使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.attachEvent(type, listener);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>target： 文档节点、document、window 或 XMLHttpRequest。 </li>
<li>type： 字符串，事件名称，含“on”，比如“onclick”、“onmouseover”、“onkeydown”等。 </li>
<li>listener ：实现了 EventListener 接口或者是 JavaScript 中的函数。 例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"txt"</span>).attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;alert(event.keyCode);&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>W3C 及 IE 同时支持移除指定的事件, 用途是移除设定的事件, 格式分别如下: </p>
<p>W3C格式: </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">removeEventListener(event,<span class="function"><span class="keyword">function</span>,<span class="title">capture</span>/<span class="title">bubble</span>);</span></span><br></pre></td></tr></table></figure>
<p>Windows IE的格式如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">detachEvent(event,<span class="function"><span class="keyword">function</span>);</span></span><br></pre></td></tr></table></figure></p>
<h3 id="阻止冒泡的兼容性写法"><a href="#阻止冒泡的兼容性写法" class="headerlink" title="阻止冒泡的兼容性写法"></a>阻止冒泡的兼容性写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e=<span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>]||event;</span><br><span class="line">    <span class="keyword">if</span>(e&amp;&amp;e.stopPropagation)&#123;</span><br><span class="line">        e.stopPropagation()</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.event)&#123;</span><br><span class="line">        <span class="built_in">window</span>.event.cancelBubble=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="阻止浏览器默认行为的兼容性写法"><a href="#阻止浏览器默认行为的兼容性写法" class="headerlink" title="阻止浏览器默认行为的兼容性写法"></a>阻止浏览器默认行为的兼容性写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopDefault</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e=<span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>]||event;</span><br><span class="line">    <span class="comment">//阻止默认浏览器动作(W3C)</span></span><br><span class="line">    <span class="keyword">if</span>(e&amp;&amp;e.preventDefault)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//IE中阻止函数默认动作的方式</span></span><br><span class="line">        <span class="built_in">window</span>.event.returnValue=<span class="literal">false</span>;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈CSS布局]]></title>
      <url>http://yoursite.com/2018/03/14/%E6%B5%85%E8%B0%88CSS%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h2 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1.水平居中"></a><strong>1.水平居中</strong></h2><p>水平居中的页面布局中最为常见的一种布局形式，多出现于标题，以及内容区域的组织形式，下面介绍三种实现水平居中的方法:</p>
<a id="more"></a>
<p>注：下面各个实例中实现的是child元素的对齐操作，child元素的父容器是parent元素</p>
<blockquote>
<p><strong>a.使用inline-block 和 text-align实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">text-align</span>: center;&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">display</span>: inline-block;&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>优点：兼容性好；<br>不足：需要同时设置子元素和父元素</p>
<blockquote>
<p><strong>b.使用margin:0 auto来实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>缺点: 需要指定宽度</p>
<blockquote>
<p><strong>c.使用绝对定位实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">position</span>:relative;&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">left</span>:<span class="number">50%</span>;<span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%);&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>/<em>或者实用margin-left的负值为盒子宽度的一半也可以实现，不过这样就必须知道盒子的宽度，但兼容性好</em>/</p>
<h2 id="2-两列定宽，一列自适应"><a href="#2-两列定宽，一列自适应" class="headerlink" title="2.两列定宽，一列自适应"></a><strong>2.两列定宽，一列自适应</strong></h2><p><img src="2.jpg" alt="asddsa"></p>
<p>基本html结构为父容器为parent,自容器为left,center,right.其中，left,center定宽，right自适应</p>
<blockquote>
<p><strong>a.利用float+margin实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;<span class="attribute">float</span>:left:width:<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">margin-left</span>:<span class="number">400px</span>;&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p><strong>b.利用float+overflow实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;<span class="attribute">float</span>:left:width:<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">overflow</span>:hidden;&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="3-两侧定宽，中栏自适应"><a href="#3-两侧定宽，中栏自适应" class="headerlink" title="3.两侧定宽，中栏自适应"></a><strong>3.两侧定宽，中栏自适应</strong></h2><p><img src="3.jpg" alt="asddsa"></p>
<blockquote>
<p><strong>a.利用float+margin实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.left&#123;width：100px;float:left;&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">margin-right</span>:-<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">float</span>:right;&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p><strong>b.利用table实现</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">display</span>:table;<span class="attribute">table-layout</span>:fixed&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>,<span class="selector-class">.right</span>&#123;<span class="attribute">display</span>:table-cell;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p> <a href="http://www.imooc.com/article/2235" target="_blank" rel="noopener">链接</a><br>来源：慕课网</p>
<hr>
<h2 id="4-inline和block-的区别"><a href="#4-inline和block-的区别" class="headerlink" title="4.inline和block 的区别"></a><strong>4.inline和block 的区别</strong></h2><ul>
<li>常见的<em>块级元</em>素 有 div, form, table, p, h1-h6, dl, ol, ul 等。</li>
<li>常见的<em>内联元素</em> 有 span, a, strong, em, lable, input, select, textarea, img, br 等。</li>
</ul>
<blockquote>
<ul>
<li><strong>display:block</strong><br>1.block元素会独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度自动填满其父元素宽度。<br>2.block元素可以设置width,height属性。块级元素即使设置了宽度,仍然是独占一行。<br>3.block元素可以设置margin和padding属性。</li>
</ul>
</blockquote>
<hr>
<blockquote>
<ul>
<li><strong>display:inline</strong><br>1.inline元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随元素的内容而变化。<br>2.inline元素设置width,height属性无效。<br>3.inline元素的margin和padding属性，水平方向的会产生边距效果；但竖直方向无效果</li>
</ul>
</blockquote>
<hr>
<blockquote>
<ul>
<li><strong>display:inline-block</strong><br>将对象呈现为inline对象的内容作为block对象呈现。</li>
</ul>
</blockquote>
<hr>
<h2 id="5-postion"><a href="#5-postion" class="headerlink" title="5.postion"></a><strong>5.postion</strong></h2><table>
<thead>
<tr>
<th>值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>absolute</td>
<td style="text-align:left">生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位 <strong>脱离文档流</strong></td>
</tr>
<tr>
<td>fixed</td>
<td style="text-align:left">生成绝对定位的元素，相对于浏览器窗口进行定位  <strong>脱离文档流</strong></td>
</tr>
<tr>
<td>relative</td>
<td style="text-align:left">生成相对定位的元素，相对于其正常位置进行定位。</td>
</tr>
<tr>
<td>static</td>
<td style="text-align:left">默认值。没有定位，元素出现在正常的流中</td>
</tr>
<tr>
<td>inherit</td>
<td style="text-align:left">规定应该从父元素继承 position 属性的值。</td>
</tr>
</tbody>
</table>
<h2 id="6-float"><a href="#6-float" class="headerlink" title="6.float"></a><strong>6.float</strong></h2><blockquote>
<p>1.元素浮动后脱离了文档流，所以父元素是无法根据元素来自适应的。<br>关于float产生的影响以及解决方法，请<a href="http://www.divcss5.com/jiqiao/j406.shtml" target="_blank" rel="noopener">查看此文档</a></p>
</blockquote>
<blockquote>
<p>2.浮动元素会被自动设置成块级元素，相当于给元素设置了display:block</p>
</blockquote>
<blockquote>
<p>3.多个浮动方向一致的元素使用流式排列</p>
</blockquote>
<hr>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文本框输入效果总结]]></title>
      <url>http://yoursite.com/2018/03/14/%E6%96%87%E6%9C%AC%E6%A1%86%E8%BE%93%E5%85%A5%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h1 id="文本框输入效果"><a href="#文本框输入效果" class="headerlink" title="文本框输入效果"></a>文本框输入效果</h1><hr>
<p>简单的罗列了几个文本框输入后的效果;话不多说，直接上代码：</p>
<p>1、选中去除文本框文字，离开后显示原有文字：</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">"关键词"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">onmouseover</span>=<span class="string">this.focus();this.select();</span> <span class="attr">onclick</span>=<span class="string">"if(value==defaultValue)&#123;value='';this.style.color='#000'&#125;"</span> <span class="attr">onBlur</span>=<span class="string">"if(!value)&#123;value=defaultValue;this.style.color='#999'&#125;"</span> <span class="attr">style</span>=<span class="string">"color:#999"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p> 2、选中后方可编辑：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"tpbox"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">id</span>=<span class="string">"hydb1"</span>&gt;</span>选中这边编辑</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtNo"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">value</span>=<span class="string">"选中前面的选项方可编辑"</span> <span class="attr">edit</span>()&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function edit(val) &#123;</span><br><span class="line">    if (val) &#123;</span><br><span class="line">        C.disabled = false;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        document.getElementById(&quot;hydb1&quot;).disabled = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>3、点击链接后方可编辑：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"username.readOnly=false;alert('你好，欢迎使用！')"</span>&gt;</span>先点击我哦！<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 你的姓名：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"--请输入--"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">readOnly</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、输入框从中间输入：从中间输入：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text "</span> <span class="attr">name</span>=<span class="string">"mid "</span> <span class="attr">style</span>=<span class="string">"text-align:center; "</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>6、输入框只能输入数字（用的是正则表达式）：你 的年龄： </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[^\d]/g, '') "</span> <span class="attr">onbeforepaste</span>=<span class="string">"clipboardData.setData( 'text',clipboardData.getData( 'text').replace(/[^\d]/g, '')) "</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>7、输入框只能输入中文（用的是正则表达式）：你的中文名： <br></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[ -~]/g, '') "</span> <span class="attr">onkeydown</span>=<span class="string">"if(event.keyCode==13)event.keyCode=9 "</span>&gt;</span> <span class="tag">&lt;</span></span><br></pre></td></tr></table></figure>
<p>8、只能输入英文和数字（用的是正则表达式）： 你 的昵称： </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[\W]/g, '') "</span> <span class="attr">onbeforepaste</span>=<span class="string">"clipboardData.setData( 'text',clipboardData.getData( 'text').replace(/[^\d]/g, '')) "</span> <span class="attr">onkeydown</span>=<span class="string">"if(event.keyCode==13)event.keyCode=9 "</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>9、输入框不能编辑，但表单可以获得输入框内的值：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text "</span> <span class="attr">value</span>=<span class="string">"afreon "</span> <span class="attr">onclick</span>=<span class="string">"alert( '总和不能编辑！'); "</span> <span class="attr">onfocus</span>=<span class="string">"this.blur() "</span> /&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text "</span> <span class="attr">value</span>=<span class="string">"afreon "</span> <span class="attr">onclick</span>=<span class="string">"alert(this.value); "</span> <span class="attr">readonly</span> /&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"不可修改 "</span> <span class="attr">readonly</span>=<span class="string">"true "</span> <span class="attr">type</span>=<span class="string">"text "</span></span></span><br><span class="line"><span class="tag">/&gt;</span>//:字体颜色为黑体</span><br></pre></td></tr></table></figure>
<p> 10、输入框不能编辑，并且表单不能获得输入框内的值<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"不可修改 "</span> <span class="attr">disabled</span>=<span class="string">"disabled "</span> <span class="attr">type</span>=<span class="string">"text "</span> /&gt;</span>//:字体颜色为灰体 <span class="tag">&lt;/<span class="name">br</span>&gt;</span>11、输入框禁止输入法： <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onpaste</span>=<span class="string">"return false "</span> <span class="attr">style</span>=<span class="string">"ime-mode:disabled "</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>以上代码部门引用<a href="http://www.cnblogs.com/apache-x/p/5368469.html" target="_blank" rel="noopener">这位大哥的博客</a></p>
<h3 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新….."></a>持续更新…..</h3>]]></content>
      
        
        <tags>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[visual studio code 编辑器]]></title>
      <url>http://yoursite.com/2018/03/14/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="工欲善其事，必先利其器"><a href="#工欲善其事，必先利其器" class="headerlink" title="工欲善其事，必先利其器"></a>工欲善其事，必先利其器</h1><h3 id="安装visual-studio-code"><a href="#安装visual-studio-code" class="headerlink" title="安装visual studio code"></a>安装visual studio code</h3><p> 选择一款合适自己的编辑器尤为重要，目前比较主流的编辑器 有sublime-text<br>atom 等，本文简单介绍VSC的安装及使用！<br> 在visual studio code<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">官网</a>中点击下载合适自己电脑的版本！然后一路next安装！</p>
<a id="more"></a>
<p>安装完成后点击打开窗口，安装新的插件。按照<a href="http://jingyan.baidu.com/article/4853e1e56628791909f72623.html" target="_blank" rel="noopener">插件安装经验</a>打开新的扩展窗口，选择自己需要的插件安装</p>
<p><img src="4.jpg" alt="asddsa"></p>
<h3 id="介绍几个比较实用的插件"><a href="#介绍几个比较实用的插件" class="headerlink" title="介绍几个比较实用的插件"></a>介绍几个比较实用的插件</h3><p><strong>1.HTML Snippets</strong><br>超级实用且初级的 H5代码片段以及提示</p>
<p><img src="3.jpg" alt="asd"></p>
<p><strong>2.HTML CSS Support</strong><br>让 html 标签上写class 智能提示当前项目所支持的样式</p>
<p><img src="1.jpg" alt="图片"></p>
<p><strong>3.Path Intellisense</strong><br>自动路劲补全，个人认为这个非常有用</p>
<p><img src="5.gif" alt="图片"></p>
<p><strong>4.Atuo Rename Tag</strong></p>
<p>修改 html 标签，自动帮你完成尾部闭合标签的同步修改，和 webstorm 一样</p>
<p><img src="6.gif" alt="图片"></p>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p><strong>1.格式调整</strong></p>
<ul>
<li>代码行缩进 Ctrl+[ 、 Ctrl+]</li>
<li>Ctrl+C 、 Ctrl+V 复制或剪切当前行/当前选中内容</li>
<li>代码格式化： Shift+Alt+F，或 Ctrl+Shift+P 后输入 format code</li>
<li>上下移动一行： Alt+Up 或 Alt+Down</li>
<li>向上向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down</li>
<li>在当前行下边插入一行 Ctrl+Enter</li>
<li>在当前行上方插入一行 Ctrl+Shift+Enter</li>
</ul>
<p><strong>2.光标相关</strong></p>
<ul>
<li>移动到行首： Home</li>
<li>移动到行尾： End</li>
<li>移动到文件结尾： Ctrl+End</li>
<li>移动到文件开头： Ctrl+Home 移动到后半个括号： Ctrl+Shift+]</li>
<li>选择从光标到行尾： Shift+End</li>
<li>选择从行首到光标处： Shift+Home</li>
<li>删除光标右侧的所有字： Ctrl+Delete</li>
<li>扩展/缩小选取范围： Shift+Alt+Left 和 Shift+Alt+Right</li>
<li>多行编辑(列编辑)：Alt+Shift+鼠标左键，Ctrl+Alt+Down/Up</li>
<li>同时选中所有匹配： Ctrl+Shift+L</li>
<li>Ctrl+D 下一个匹配的也被选中 (在 sublime * 中是删除当前行，后面自定义快键键中，设置与 Ctrl+Shift+K 互换了)</li>
</ul>
<p><strong>3.查找替换</strong></p>
<ul>
<li>查找 Ctrl+F</li>
<li>查找替换 Ctrl+H</li>
<li>整个文件夹中查找 Ctrl+Shift+F</li>
</ul>
<p>好的，今天就写这么多，祝愿世界和平！</p>
]]></content>
      
        
        <tags>
            
            <tag> vsc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工作杂记]]></title>
      <url>http://yoursite.com/2018/03/14/%E5%B7%A5%E4%BD%9C%E6%9D%82%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>记录工作中的一些小知识点之类的杂谈<br><a id="more"></a></p>
<h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><p>先安装好node 然后命令行执行 node -v<br>如下，表示安装成功<br><img src="http://img.blog.csdn.net/20160822125319646" alt="image"><br>然后安装cnpm  </p>
<p>需要详细了解cnpm的朋友请前往官网<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a> 查看<br>在cmd中输入  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p> 即可将npm指向国内镜像源，之后输入cnpm -v   </p>
<h3 id="直接将npm的仓库修改为淘宝镜像"><a href="#直接将npm的仓库修改为淘宝镜像" class="headerlink" title="直接将npm的仓库修改为淘宝镜像"></a>直接将npm的仓库修改为淘宝镜像</h3><p> 方法如下<br> npm是一个很好用的工具，全场是Node Packet Manager，是一个nodejs的包管理工具，但是美中不足的是当我们去安转包的时候却发现下载的速度太慢，但是没关系，还是有方法的就是利用淘宝的国内镜像，一下是3个设置的方法：<br>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p>
<p>1.通过config命令</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>npm info underscore （如果上面配置正确这个命令会有字符串response）<br>2.命令行指定</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org info underscore</span><br></pre></td></tr></table></figure>
<p>3.编辑 ~/.npmrc 加入下面内容</p>
<p>registry = <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p>
<h3 id="网页中咨询客服随机跳转"><a href="#网页中咨询客服随机跳转" class="headerlink" title="网页中咨询客服随机跳转"></a>网页中咨询客服随机跳转</h3><p>代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Btn.onclick = getServiceQQ(); <span class="comment">// 调用</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">rd</span>(<span class="params">n, m</span>) </span>&#123; <span class="comment">// 生成随机数</span></span><br><span class="line">    <span class="keyword">var</span> c = m - n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * c + n);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getServiceQQ</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 随机跳转到qq</span></span><br><span class="line">    <span class="keyword">var</span> qqary = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"2851282570"</span>, <span class="string">"2851282668"</span>, <span class="string">"2851282678"</span>, <span class="string">"2851282590"</span>, <span class="string">"2851282686"</span>, <span class="string">"2851282632"</span>, <span class="string">"2851282683"</span>, <span class="string">"2851282657"</span>);</span><br><span class="line">    <span class="built_in">window</span>.open(<span class="string">"http://wpa.qq.com/msgrd?v=3&amp;uin="</span> + qqary[rd(<span class="number">0</span>, <span class="number">7</span>)] + <span class="string">"&amp;site=qq&amp;menu=yes"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="less编译工具-考拉"><a href="#less编译工具-考拉" class="headerlink" title="less编译工具 考拉"></a>less编译工具 考拉</h3><p>十分强大的编译工具 <a href="http://ouz1r1b1f.bkt.clouddn.com/Koala.rar" target="_blank" rel="noopener">下载链接</a><br><a href="https://www.cnblogs.com/mrhgw/p/4535429.html" target="_blank" rel="noopener">博客园-Less/Sass编译工具，koala使用指南</a></p>
<h3 id="验证输入值不能包含特殊字符"><a href="#验证输入值不能包含特殊字符" class="headerlink" title="验证输入值不能包含特殊字符"></a>验证输入值不能包含特殊字符</h3><p>代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[.0-9a-zA-Z\u4e00-\u9fa5]+$|^[0-9a-zA-Z][0-9a-zA-Z ]+[0-9a-zA-Z]$/i</span>;</span><br><span class="line">    <span class="keyword">if</span> (!reg.test(value)) &#123;</span><br><span class="line">      alert(<span class="string">"关键词不可包含特殊字符和空格！"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 小知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文字超出显示]]></title>
      <url>http://yoursite.com/2018/03/14/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA.../</url>
      <content type="html"><![CDATA[<p>适用于移动端的文字超出布局<br><a id="more"></a></p>
<h4 id="单行文字超出："><a href="#单行文字超出：" class="headerlink" title="单行文字超出："></a>单行文字超出：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.txt</span>&#123;</span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span></span><br><span class="line"><span class="undefined">    white-space: nowrap;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="多行文字超出显示："><a href="#多行文字超出显示：" class="headerlink" title="多行文字超出显示："></a>多行文字超出显示：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.txt</span>&#123;</span></span><br><span class="line"><span class="undefined">    display: -webkit-box;</span></span><br><span class="line"><span class="undefined">    -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="undefined">    -webkit-line-clamp: 3;</span></span><br><span class="line"><span class="undefined">overflow: hidden;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击查看<br><a href="http://www.css88.com/webkit/-webkit-line-clamp/" target="_blank" rel="noopener">相关链接</a></p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[同源策略和JSONP]]></title>
      <url>http://yoursite.com/2018/03/14/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%92%8CJSONP/</url>
      <content type="html"><![CDATA[<p>解决Ajax无法跨域请求的问题<br><a id="more"></a><br>先补充两个概念：</p>
<h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><p>处于安全考虑，浏览器约定俗成执行这一规定：</p>
<ol>
<li>协议相同</li>
<li>端口相同</li>
<li>域名相同  </li>
</ol>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">阮一峰-浏览器同源政策及其规避方法</a></p>
<h4 id="跨域请求的概念"><a href="#跨域请求的概念" class="headerlink" title="跨域请求的概念"></a>跨域请求的概念</h4><p><img src="http://images2015.cnblogs.com/blog/1036514/201610/1036514-20161003230515692-763999447.png" alt="image"></p>
<h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><blockquote>
<p>JSON的优点：</p>
<p>1、基于纯文本，跨平台传递极其简单；</p>
<p>2、Javascript原生支持，后台语言几乎全部支持；</p>
<p>3、轻量级数据格式，占用字符数量极少，特别适合互联网传递；</p>
<p>4、可读性较强，虽然比不上XML那么一目了然，但在合理的依次缩进之后还是很容易识别的；</p>
<p>5、容易编写和解析，当然前提是你要知道数据结构；</p>
</blockquote>
<h4 id="JSONP的诞生"><a href="#JSONP的诞生" class="headerlink" title="JSONP的诞生"></a>JSONP的诞生</h4><ol>
<li>首先，因为ajax无法跨域，然后开发者就有所思考</li>
<li>其次，开发者发现，script标签的src属性是可以跨域的把跨域服务器写成 调用本地的函数 ，回调数据回来不就好了？</li>
<li>json刚好被js支持（object）调用跨域服务器上动态生成的js格式文件（不管是什么类型的地址，最终生成的返回值都是一段js代码）</li>
<li>这种获取远程数据的方式看起来非常像ajax，但其实并不一样</li>
<li>便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP。</li>
<li>传递一个callback参数给跨域服务端，然后跨域服务端返回数据时会将这个callback参数作为函数名来包裹住json数据即可。</li>
</ol>
<p>简言之：</p>
<blockquote>
<p>json不支持跨域，而js可以跨域，因此在服务器端用客户端提供的js函数名将json数据封装起来，再将函数提供给客户端调用，从而获得json数据。</p>
</blockquote>
<p><a href="http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html" target="_blank" rel="noopener">参考资料</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端性能优化]]></title>
      <url>http://yoursite.com/2018/03/14/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>记录前端性能优化的相关知识<br><a id="more"></a><br><img src="http://ouz1r1b1f.bkt.clouddn.com/WebAPP%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%A7%84%E8%8C%83.png" alt="image">  </p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端开发的几款插件]]></title>
      <url>http://yoursite.com/2018/03/14/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9A%84%E5%87%A0%E6%AC%BE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>介绍一些开发常用的利器”插件” 持续更新中<br><a id="more"></a></p>
<h3 id="json-viewer"><a href="#json-viewer" class="headerlink" title="json-viewer"></a>json-viewer</h3><p>最近在请求json 数据的时候，返回的一大堆数据，没有任何排版，看起来很不爽，网上找了个格式化的插件，json-viewer看起来爽多了。  </p>
<p>如下图：<img src="http://ouz1r1b1f.bkt.clouddn.com/blog/img/sa.png" alt="image"></p>
<h3 id="网址二维码："><a href="#网址二维码：" class="headerlink" title="网址二维码："></a>网址二维码：</h3><p> 有时候需要在移动端查看一些网址手动输入网址巨慢，这时候，就需要一个快捷方式啦，扫面二维码啊，下载插件<a href="https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg" target="_blank" rel="noopener">二维码(QR码)生成器(QR Code Generator)</a>就可以轻松搞定了。</p>
<h3 id="翻墙-Proxy-SwitchyOmega"><a href="#翻墙-Proxy-SwitchyOmega" class="headerlink" title="翻墙 Proxy SwitchyOmega"></a>翻墙 Proxy SwitchyOmega</h3><p>经常需要翻墙的我们，一直渴望一款持久好用的翻墙软件，现在就介绍一款自己用的 firefly.<a href="https://github.com/yinghuocho/firefly-proxy" target="_blank" rel="noopener">点击进入github下载</a>如下图，点击下载对应的版本安装即可<br><img src="http://ouz1r1b1f.bkt.clouddn.com/ss.png" alt="image">  </p>
<h3 id="代理管理插件-Proxy-SwitchyOmega"><a href="#代理管理插件-Proxy-SwitchyOmega" class="headerlink" title="代理管理插件 Proxy SwitchyOmega"></a>代理管理插件 Proxy SwitchyOmega</h3><p>顺便介绍介绍一款方便快捷的代理管理插件<br><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">Proxy SwitchyOmega</a>在安装好刚刚的firefly之后 点击运行可以看到他的端口号为  </p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/ddd.png" alt="image"><br>在Proxy SwitchyOmega中添加对应的情景模式，就可以使用了<br>如图<img src="http://ouz1r1b1f.bkt.clouddn.com/aa.png" alt="image">  </p>
<p>持续更新中….</p>
]]></content>
      
        
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器兼容性总结]]></title>
      <url>http://yoursite.com/2018/03/14/%E5%85%BC%E5%AE%B9%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>介绍前端常见的几个兼容性问题<br><a id="more"></a><br>1.input<br>input 设置左右padding之后，ie中输入过多内容后，padding消失。<br>解决方法：在外面套一层div设置宽高，padding然后设置input的宽高为100%  </p>
<p>2.在设置float的div在IE下设置margin时会产生双边距，这是IE6的一个典型bug，<br>解决方法是加上display:inline;  </p>
<p>3.Ie6下定义1px高的div<br>ie6默认div高度为一个字体显示的高度，所在ie6下div的高度大于等于一个字的高度，因此在ie6下定义高度为1px的容器，显示的是一个字体的高度  </p>
<p>overflow:hidden; || zoom:0.08;  ||  line-height:1px;  </p>
<p>4.chrome浏览器  中文界面下默认会将小于12px 的文本强制按照12px 显示,可通过加入 CSS 属性-webkit-text-size-adjust: none;解决.  </p>
<p>5.各个浏览器默认的内外边距不同<br>解决 ：<br>*{margin:0;padding:0;}  </p>
<ol>
<li>IE6 width为奇数，右边多出1px的问题<br>问题：<br>父级元素采用相对定位，且宽度设置为奇数时，子元素采用绝对定位，在ie6中会出现右侧多出1像素<br>解决：<br>将宽度的奇数值改成偶数  </li>
</ol>
<p>7.IE6两个层之间3px的问题<br>问题：<br>左边层采用浮动，右边没有采用浮动时在ie6中两层之间就会产生3像素的间距<br>解决：<br>A、右边层也采用浮动  float<br>B、左边层添加属性 margin-right:-3px;  </p>
<ol>
<li>除去滚动条的问题<br>问题：<br>隐藏滚动条<br>解决：<br>1、只有ie6-7支持<body scroll="no"><br>2、除ie6-7不支持 body{overflow:hidden}<br>3、所有浏览器 html{overflow:hidden}</body></li>
</ol>
<p>9、标准的事件绑定方法函数为addEventListener，但IE下是attachEvent；  </p>
<p>10.封装一个获取行外样式的函数:(兼容所有浏览器,包括低版本IE6,7)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">funtion getStyle(obj,name)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.currentStyle)&#123;</span><br><span class="line">        <span class="comment">//IE</span></span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[name];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//Chrom,FF</span></span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj,<span class="literal">false</span>)[name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    调用：getStyle(oDiv,<span class="string">'width'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为啥行内元素还能设置宽高呢？]]></title>
      <url>http://yoursite.com/2018/03/14/%E4%B8%BA%E5%95%A5%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E8%BF%98%E8%83%BD%E8%AE%BE%E7%BD%AE%E5%AE%BD%E9%AB%98%E5%91%A2%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>HTML中的行内元素 ，块状元素以及置换元素<br><a id="more"></a><br>最近碰到一个很神奇的问题：<br>1.img标签是块状元素吗？<br>当然不是，他不会单独占据一行<br>那为何能够设置宽高呢？<br>这就把我难住了，后来插了一下资料<br>发现了个‘大秘密’<br>先来说说HTMl标签的极大特性</p>
<h3 id="块状元素"><a href="#块状元素" class="headerlink" title="块状元素"></a>块状元素</h3><p>最明显的特征就是独自占领一行，自动充满父级元素的内容区域，绝不会让别人“侵略”（当然可以通过其他方式去改变他）。<br>常见的有：div，p..等等。<br>通过CSS设定了浮动（float属性，可向左浮动或向右浮动）以及设定显示（display）属性为“block”或“list-item”的元素都是块级元素。</p>
<h3 id="行内元素："><a href="#行内元素：" class="headerlink" title="行内元素："></a>行内元素：</h3><p>上面说块及元素独自占领一行，行内元素就没这么霸道了，他可以左右都允许有元素，最常见的就是<a></a><br>通过display:’inline’设置以后都会变成行内元素。</p>
<h3 id="行内非替换元素："><a href="#行内非替换元素：" class="headerlink" title="行内非替换元素："></a>行内非替换元素：</h3><p>对行内非替换元素如a元素、span元素等，<br>设置宽度width 无效。<br>设置高度height无效，可以通过line-height来设置。<br>设置margin只有左右margin有效，上下无效。（这就是span的margin-top无效的原因）<br>设置padding只有左右padding有效，上下则无效。块级元素的width/height/margin/padding都是有效的</p>
<h3 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h3><p>浏览器根据其标签的元素与属性来判断显示具体的内容。<br>比如：<input> type=”text” 的是，这是一个文本输入框，换一个其他的时候，浏览器显示就不一样  </p>
<p>(X)HTML中的<img>、<input>、<textarea>、</textarea><select>、<object>都是替换元素，这些元素都没有实际的内容。</object></select></p>
]]></content>
      
        
        <tags>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一种书写很简单的javascipt继承方式]]></title>
      <url>http://yoursite.com/2018/03/14/%E4%B8%80%E7%A7%8D%E4%B9%A6%E5%86%99%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84javascipt%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>一、一种书写起来很简单的继承方式<br><a id="more"></a><br>js的继承一直是一个很烦人的概念，之前整理过一次 但是还是没有弄清楚。最近发现一种比较简单的书写方式，拿出来分享一下。</p>
<p>简单的理解为：<br>什么是继承：</p>
<blockquote>
<p>在原有对象上稍加修改，得到另一个新对象，原有对象不会受到影响  </p>
</blockquote>
<blockquote>
<p> 复用代码的一种形式；子类不影响父类 继承一些父类的功能</p>
</blockquote>
<p>二、下面这个实例演示继承的一种方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">id, name, age</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    person.prototype.sayhello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你好，我是"</span> + <span class="keyword">this</span>.name + <span class="string">"  我今年"</span> + <span class="keyword">this</span>.age + <span class="string">"岁了"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> student1 = <span class="keyword">new</span> person(<span class="string">"box"</span>, <span class="string">"gcf"</span>, <span class="number">22</span>)</span><br><span class="line">    student1.sayhello(); <span class="comment">//输出 你好 我是郭春福 今年22了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 继承核心</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">son, parent</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (arr <span class="keyword">in</span> parent) &#123;</span><br><span class="line">            son[arr] = parent[arr]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">man</span>(<span class="params">id, name, age</span>) </span>&#123;</span><br><span class="line">        person.call(<span class="keyword">this</span>, id, name, age)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    extend(man.prototype, person.prototype);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> student2 = <span class="keyword">new</span> man(<span class="string">"box2"</span>, <span class="string">"zjn"</span>, <span class="number">23</span>)</span><br><span class="line">    student2.sayhello() <span class="comment">//输出 你好我是zjn 今年23岁了 继承了父类person 的属性和方法</span></span><br><span class="line"></span><br><span class="line">    man.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"大家好，我是"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    student2.show() <span class="comment">//弹出 大家好 我是zjn </span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>就是这样，希望对大家有所帮助</p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue项目中的跨域请求，axios&jsonp]]></title>
      <url>http://yoursite.com/2018/03/14/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%EF%BC%8Caxios&amp;jsonp/</url>
      <content type="html"><![CDATA[<p>记录vue项目中的跨域请求方法<br><a id="more"></a></p>
<p>天天画页面，写一些html css感觉自己就是一个无脑机器人，文章记录一下vue 中跨域请求</p>
<p>我们都知道由于同源策略，ajax无法进行跨域请求，在vue项目中，使用axios进行ajax请求。</p>
<h3 id="使用axios"><a href="#使用axios" class="headerlink" title="使用axios"></a>使用axios</h3><p>先奉上<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">axios中文文档</a>；具体操作按照教程来  </p>
<ul>
<li>1.构建项目，安装axios</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure>
<ul>
<li>新建一个ajax.js文件，用来对ajax作一定的封装<br><a href="http://note.youdao.com/" target="_blank" rel="noopener">点击下载  ajax.js</a> </li>
</ul>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/axios/img/%E5%BC%95%E5%85%A5axios.png" alt="image"></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> querystring <span class="keyword">from</span> <span class="string">'querystring'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> base = <span class="string">''</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span></span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">axios.defaults.headers.referer = <span class="string">'https://cnodejs.org/'</span></span><br><span class="line">axios.defaults.headers.host = <span class="string">'cnodejs.org'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的方法就能发送请求</span></span><br><span class="line"><span class="comment">// var ajax = &#123;</span></span><br><span class="line"><span class="comment">//   get: function(path, params)&#123;</span></span><br><span class="line"><span class="comment">//     var config = `$&#123;base&#125;` + path + '?' + querystring.stringify(params)</span></span><br><span class="line"><span class="comment">//      return axios.get(config).then(res =&gt; res.data)</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   post: function(path, params)&#123;</span></span><br><span class="line"><span class="comment">//     return axios.post(`$&#123;base&#125;` + path, params).then(res =&gt; res.data)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是对发送的参数作了过滤空字符串的操作</span></span><br><span class="line"><span class="keyword">var</span> ajax = &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params">path, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> config</span><br><span class="line">    <span class="keyword">if</span> (params === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">      config = <span class="string">`<span class="subst">$&#123;base&#125;</span>`</span> + path</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      params = trimObject(params)</span><br><span class="line">      config = <span class="string">`<span class="subst">$&#123;base&#125;</span>`</span> + path + <span class="string">'?'</span> + querystring.stringify(params)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> axios.get(config).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</span><br><span class="line">  &#125;,</span><br><span class="line">  post: <span class="function"><span class="keyword">function</span>(<span class="params">path, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (params === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">      params = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    params = trimObject(params)</span><br><span class="line">    axios.post(<span class="string">`<span class="subst">$&#123;base&#125;</span>`</span> + path, params).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  <span class="keyword">return</span> response</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trimObject</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = data</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(obj[k]).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'String'</span>) &#123;</span><br><span class="line">      obj[k] = obj[k].trim()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(obj[k]).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Object'</span>) &#123;</span><br><span class="line">      trimObject(obj[k])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ajax</span><br></pre></td></tr></table></figure>
<ul>
<li>配置config中的index.js如下图：</li>
</ul>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/axios/img/%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86.png" alt="image"></p>
<ul>
<li>执行git请求时候，最终路径为</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`$&#123;base&#125;` + path + &apos;?&apos; + querystring.stringify(params)</span><br></pre></td></tr></table></figure>
<p>其中base是api中的基础链接 ，比如所有用户相关的api，中间可能会出现 /user/login…<br>/user/info…等等，这个user就是其中的base，当然，具体还是要视情况而定。</p>
<ul>
<li>在页面中发送请求如下图</li>
</ul>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/axios/img/%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82.png" alt="image"></p>
<p>请求成功<br><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/axios/img/%E8%AF%B7%E6%B1%82%E6%88%90%E5%8A%9F.png" alt="image"></p>
<h3 id="使用jsonp"><a href="#使用jsonp" class="headerlink" title="使用jsonp"></a>使用jsonp</h3><ul>
<li>安装jsonp</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install jsonp --save</span><br></pre></td></tr></table></figure>
<ul>
<li>新建一个jsonp.js文件，封装一个jsonp</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> originJsonp <span class="keyword">from</span> <span class="string">'jsonp'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, data, option</span>) </span>&#123;</span><br><span class="line">  url += (url.indexOf(<span class="string">'?'</span>) &lt; <span class="number">0</span> ? <span class="string">'?'</span> : <span class="string">'&amp;'</span>) + param(data)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    originJsonp(url, option, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = data[k] !== <span class="literal">undefined</span> ? data[k] : <span class="string">''</span></span><br><span class="line">    url += <span class="string">'&amp;'</span> + k + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> url ? url.substring(<span class="number">1</span>) : <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在页面中调用： </li>
</ul>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/asios/img/jsonp%E8%B0%83%E7%94%A8.png" alt="image"></p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue学习（二）-----vue-router]]></title>
      <url>http://yoursite.com/2018/03/14/vue%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89-----vue-router2.0%EF%BC%88%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>使用vue-router构建SPA<br><a id="more"></a><br>小插曲<br>在使用路由时发现，默认的链接中会出现/#/看起来很不舒服，后来查了一下发现，只需要将router换个模式就行了<br>如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>官网如是说：<br>vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p>
<p>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。</p>
<h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><p>给每一个路由”起一个名字”</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/user/:userId'</span>,</span><br><span class="line">      name: <span class="string">'user'</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在渲染时 </span></span><br><span class="line">&lt;router-link :to=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;User&lt;<span class="regexp">/router-link&gt;  </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 或者</span></span><br><span class="line"><span class="regexp">router.push(&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;)</span></span><br></pre></td></tr></table></figure>
<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><ul>
<li><p>在VueRouter 的参数中使用 children 配置：父组件的 <router-view> 是最顶层的出口，渲染最高级路由匹配到的组件。同样地，一个被渲染组件同样可以包含自己的嵌套 <router-view>。  </router-view></router-view></p>
</li>
<li><p>要注意，以 / 开头的嵌套路径会被当作根路径。这让你充分的使用嵌套组件而无须设置嵌套的路径。在使用器那套路由时候。子组件路由前面不要加 ‘/‘</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="user"&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><h4 id="router-push"><a href="#router-push" class="headerlink" title="router.push()"></a>router.push()</h4><p>router.push(location, onComplete?, onAbort?)<br>在vue实例中，可以采用router.push()访问路由实例  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">'home'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'home'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">'private'</span> &#125;&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/vue-router/img/%E7%BC%96%E7%A8%8B%E5%BC%8F%E5%AF%BC%E8%88%AA.png" alt="image"></p>
<h4 id="router-go-n"><a href="#router-go-n" class="headerlink" title="router.go(n)"></a>router.go(n)</h4><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在浏览器记录中前进一步，等同于 history.forward()</span></span><br><span class="line">router.go(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后退一步记录，等同于 history.back()</span></span><br><span class="line">router.go(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前进 3 步记录</span></span><br><span class="line">router.go(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 history 记录不够用，那就默默地失败呗</span></span><br><span class="line">router.go(<span class="number">-100</span>)</span><br><span class="line">router.go(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<h3 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h3><p>有时候想同时（同级）展示多个视图，而不是嵌套展示，例如创建一个布局，有 sidebar（侧导航） 和 main（主内容） 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default<br><strong>注意：</strong><br>在使用命名视图的时候，注routes中的component要换成==components==<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view &gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;router-view  name="router1"&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;router-view  name="router2"&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: '/',</span><br><span class="line">      components: &#123;</span><br><span class="line">        default: 默认的组件名称,</span><br><span class="line">        router1: 路由1的组件名称,</span><br><span class="line">        router2: 路由2的组件名称</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="重定向和别名"><a href="#重定向和别名" class="headerlink" title="重定向和别名"></a>重定向和别名</h3><ul>
<li><p>重定向』的意思是，当用户访问 /a时，URL 将会被替换成 /b，然后匹配路由为 /b，那么『别名』又是什么呢？</p>
</li>
<li><p>/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。  </p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/vue-router/img/%E8%B7%AF%E7%94%B1%E7%9A%84%E5%86%99%E6%B3%952.png" alt="image">  </p>
</li>
</ul>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/vue-router/img/www.gif" alt="image"></p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">vue-router2官方文档</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue学习（一）-----组件]]></title>
      <url>http://yoursite.com/2018/03/14/vue%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%20%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>组件的注册以及父子组件之间传递参数<br><a id="more"></a><br>接触vue实践不短了，却总是磕磕碰碰，没有一个系统的概念，现在写几篇文章，记录一下学习的心得。</p>
<h3 id="组件的注册："><a href="#组件的注册：" class="headerlink" title="组件的注册："></a>组件的注册：</h3><p>下面是vue 官网提供的注册案例 ：  </p>
<h5 id="全局注册："><a href="#全局注册：" class="headerlink" title="全局注册："></a>全局注册：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"example"</span>&gt;</span><br><span class="line">  &lt;my-component&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="局部注册："><a href="#局部注册：" class="headerlink" title="局部注册："></a>局部注册：</h5><pre><code class="js"><span class="keyword">var</span> Child = {
  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span>
}
<span class="keyword">new</span> Vue({
  <span class="comment">// ...</span>
  components: {
    <span class="comment">// &lt;my-component&gt; 将只在父组件模板中可用</span>
    <span class="string">'my-component'</span>: Child
  }
})
</code></pre>
<h5 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h5><p>在实际开发的过程中，使用vue-cli脚手架搭建项目之后,可以按照下面的方式注册： 全局通用的组件，可以在components文件夹下面建立一个public文件夹，专门放置通用的组件。  </p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/vue/img/%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6.png" alt="image">  </p>
<p>在public文件夹下的index.js 注册组件如下图所示，这样做的目的是方便维护，当然也可以直接在main.js中将组件一个一个 import进去，然后在再用。  </p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/vue/img/%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B62.png" alt="image"></p>
<h5 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h5><p>直接在需要的页面中把组件import进来，然后注册，即可使用  </p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/vue/img/%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C.png" alt="image">  </p>
<h3 id="组件之间传递参数"><a href="#组件之间传递参数" class="headerlink" title="组件之间传递参数"></a>组件之间传递参数</h3><h5 id="父对子传递"><a href="#父对子传递" class="headerlink" title="父对子传递"></a>父对子传递</h5><p>子组件通过props”告诉”父组件自己需要什么参数，父组件便给他传递什么参数  </p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/vue/img/%E7%88%B6%E5%AF%B9%E5%AD%90%20props1.png" alt="image"></p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/vue/img/%E7%88%B6%E5%AF%B9%E5%AD%902.png" alt="image"></p>
<h5 id="子对父传递"><a href="#子对父传递" class="headerlink" title="子对父传递"></a>子对父传递</h5><p>子对父传递需要利用事件传递参数，下图是自己YY出来的逻辑  </p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/vue/img/%E5%AD%90%E5%AF%B9%E7%88%B6%E5%95%8A%E5%95%8A%E5%95%8A.png" alt="image"><br>dome如下：<br>子组件执行某方法，将参数通过自定义事件传递给父组件  </p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/vue/img/%E5%AD%90%E5%AF%B9%E7%88%B61.png" alt="image"><br>父组件执行该自定义事件时调用某方法将子组件传递的参数获取到  </p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/vue/img/%E5%AD%90%E5%AF%B9%E7%88%B62.png" alt="image">  </p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="http://www.cnblogs.com/wisewrong/p/6266038.html" target="_blank" rel="noopener">Vue 爬坑之路（二）—— 组件之间的数据传递</a><br><a href="http://www.jb51.net/article/119682.htm" target="_blank" rel="noopener">vue中各组件之间传递数据的方法示例</a><br> 关于子对子组件之间的传参，以及slot内容分发，之后的博文中再做讲解。</p>
]]></content>
      
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue学习（前置）------代码规范]]></title>
      <url>http://yoursite.com/2018/03/14/vue%E5%AD%A6%E4%B9%A0(%E5%89%8D%E7%BD%AE)%20----------%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<p>写不了一手漂亮的代码的程序猿不是好画家、<br><a id="more"></a><br>其实这是在接触Vue时候就开始看的了，不过现在发现也不晚，遵守一定约定俗成的规范，让自己的代码更通俗易懂。<br>传送门：<br><a href="https://cn.vuejs.org/v2/style-guide/" target="_blank" rel="noopener">vue官方代码风格</a><br><a href="https://www.cnblogs.com/wangking/p/6542352.html" target="_blank" rel="noopener">Vue.js 组件编码规范-小丸子的博客</a>  </p>
<h3 id="个人遵守的规范："><a href="#个人遵守的规范：" class="headerlink" title="个人遵守的规范："></a>个人遵守的规范：</h3><ul>
<li>组件文件名称(kebab-case) my-component.vue</li>
<li>注册组件时组件名称（PascalCase） myComponent</li>
<li>html文件中使用组件 (kebab-case) <my-component></my-component></li>
<li>props 值加类型验证 props:{‘msg’:String}</li>
<li>组件命名为多个单词</li>
<li>指令缩写</li>
<li>模板中使用简单表达式，使用计算属性</li>
<li>v-for设置键值</li>
</ul>
<h3 id="组件命名为多个单词"><a href="#组件命名为多个单词" class="headerlink" title="组件命名为多个单词"></a>组件命名为多个单词</h3><p>这样的目的是可以防止未来跟HTML元素冲突<br>Bad<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo'</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'Todo'</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Good<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'TodoItem'</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">### data必须是函数</span></span><br><span class="line"><span class="string">当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="comment">// In a .vue file</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      foo: <span class="string">'bar'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Prop验证类型"><a href="#Prop验证类型" class="headerlink" title="Prop验证类型"></a>Prop验证类型</h3><ol>
<li>它们写明了组件的 API，所以很容易看懂组件的用法；</li>
<li>在开发环境下，如果向一个组件提供格式不正确的 prop，Vue 将会告警，以帮助你捕获潜在的错误来源。  </li>
</ol>
<p>Bad<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'status'</span>]</span><br></pre></td></tr></table></figure></p>
<p>Good<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  status: <span class="built_in">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="v-for-设置键值"><a href="#v-for-设置键值" class="headerlink" title="v-for 设置键值"></a>v-for 设置键值</h3><p>Bad<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-<span class="keyword">for</span>=<span class="string">"todo in todos"</span>&gt;</span><br><span class="line">    &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure></p>
<p>Good<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  &lt;ul&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-<span class="keyword">for</span>=<span class="string">"todo in todos"</span></span><br><span class="line">    :key=<span class="string">"todo.id"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="组件名称大小写"><a href="#组件名称大小写" class="headerlink" title="组件名称大小写"></a>组件名称大小写</h3><h4 id="单文件组件名称大小写"><a href="#单文件组件名称大小写" class="headerlink" title="单文件组件名称大小写"></a>单文件组件名称大小写</h4><p>个人默认使用，组件名使用(kebab-case)规则<br>Bad<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- mycomponent.vue</span><br></pre></td></tr></table></figure></p>
<p>Good<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> components/</span><br><span class="line">|- my-component.vue</span><br></pre></td></tr></table></figure></p>
<h4 id="模板中组件名大小写"><a href="#模板中组件名大小写" class="headerlink" title="模板中组件名大小写"></a>模板中组件名大小写</h4><p>个人默认使用，组件名使用(kebab-case)规则 </p>
<h4 id="js中组件名称"><a href="#js中组件名称" class="headerlink" title="js中组件名称"></a>js中组件名称</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'MyComponent'</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'./my-component.vue'</span></span><br></pre></td></tr></table></figure>
<h3 id="不在模板中使用复杂的表达式"><a href="#不在模板中使用复杂的表达式" class="headerlink" title="不在模板中使用复杂的表达式"></a>不在模板中使用复杂的表达式</h3><p>在需要复杂的表达式时候，使用计算属性<br>Bad</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;</span><br><span class="line">  fullName.split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> word[<span class="number">0</span>].toUpperCase() + word.slice(<span class="number">1</span>)</span><br><span class="line">  &#125;).join(<span class="string">' '</span>)</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>Good</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在模板中 --&gt;</span><br><span class="line">&#123;&#123; normalizedFullName &#125;&#125;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedFullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fullName.split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> word[<span class="number">0</span>].toUpperCase() + word.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;).join(<span class="string">' '</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue中引入资源]]></title>
      <url>http://yoursite.com/2018/03/14/vue%E4%B8%AD%E5%BC%95%E5%85%A5%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>写是为了不写<br><a id="more"></a></p>
<h3 id="引入jQuery"><a href="#引入jQuery" class="headerlink" title="引入jQuery"></a>引入jQuery</h3><ul>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install jquery --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>在webpack.base.conf.js里加入</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>)</span><br><span class="line"></span><br><span class="line">&lt;!--在<span class="built_in">module</span>.exports的最后加入--&gt;</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>),</span><br><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">$: <span class="string">"jquery"</span></span><br><span class="line">&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ul>
<li>在main.js 引入就ok了</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br></pre></td></tr></table></figure>
<h3 id="将npm的仓库改为淘宝镜像"><a href="#将npm的仓库改为淘宝镜像" class="headerlink" title="将npm的仓库改为淘宝镜像"></a>将npm的仓库改为淘宝镜像</h3><p>这样就可以直接使用npm install安装 速度跟cnpm install一样了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h3 id="引用less"><a href="#引用less" class="headerlink" title="引用less"></a>引用less</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less-loader --save-de</span><br></pre></td></tr></table></figure>
<p>在单文件中使用内联样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"sass"</span> <span class="attr">scoped</span>&gt;</span><span class="undefined">  </span></span><br><span class="line"><span class="undefined">  //sass样式  </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue中事件处理器]]></title>
      <url>http://yoursite.com/2018/03/14/Vue%E4%B8%AD%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8/</url>
      <content type="html"><![CDATA[<h4 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h4><p>vue 使用 v-on监听DOM事件来触发js代码<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count+1"</span>&gt;</span>增加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="方法事件处理器"><a href="#方法事件处理器" class="headerlink" title="方法事件处理器"></a>方法事件处理器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayhello"</span>&gt;</span>调用函数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//vue</span><br><span class="line">methods:&#123;</span><br><span class="line">    sayhello:function()&#123;</span><br><span class="line">        alert("hello world!")</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里调用的函数也可以传参数</p>
<h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（比如不是子元素）触发时触发回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Vue 允许为 v-on 在监听键盘事件时添加关键修饰符：<br>全部的按键别名：</p>
<ul>
<li>.enter</li>
<li>.tab</li>
<li>.delete (捕获 “删除” 和 “退格” 键)</li>
<li>.esc</li>
<li>.space</li>
<li>.up</li>
<li>.down</li>
<li>.left</li>
<li>.right  </li>
</ul>
<p>可以通过全局 config.keyCodes 对象自定义键值修饰符别名</p>
<p>点击enter的时候提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @keyup.enter=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure></p>
<p>点击和键盘事件实例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div class="box" :class="&#123;active:isactive&#125;"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;button @click="changecolor"&gt;点击变色&lt;/button&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输入完成后点击enter 键提交 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入点击添加 或者键盘点击enter 事件确定<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"show"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in showmessage"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"deleate(index)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// isactive: false,</span></span></span><br><span class="line"><span class="undefined">                showmessage: [</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                ],</span></span><br><span class="line"><span class="javascript">                message: <span class="string">''</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// changecolor: function () &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     this.isactive = true</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">                show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.showmessage.push(<span class="keyword">this</span>.message)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.showmessage.reverse()</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                deleate: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.showmessage.splice(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue中class与style的绑定]]></title>
      <url>http://yoursite.com/2018/03/14/Vue%E4%B8%ADclass%E4%B8%8Estyle%E7%9A%84%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<p>为了减少书写量 以下实例代码中直接书写vue中的data 对象<br><a id="more"></a></p>
<h2 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h2><h4 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active:isactive,box:isbox&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//vue</span><br><span class="line">data&#123;</span><br><span class="line">    isactive:true,</span><br><span class="line">    isbox:false,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>当isactive 为true 时候 会为该div添加一个名为 active 的类</li>
<li>也可以直接绑定数据里的一个对象<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//vue的data 对象内容为</span><br><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: true,</span><br><span class="line">    'text-danger': false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass,errorClass]"</span></span></span><br><span class="line"><span class="tag">//<span class="attr">vue</span></span></span><br><span class="line"><span class="tag"><span class="attr">data</span>&#123;</span></span><br><span class="line"><span class="tag">    <span class="attr">activeClass:</span> '<span class="attr">active</span>',</span></span><br><span class="line"><span class="tag">    <span class="attr">errorClass:</span> '<span class="attr">error</span>',</span></span><br><span class="line"><span class="tag">&#125;</span></span><br></pre></td></tr></table></figure>
<p>以上div的class会渲染为 box active error三个</p>
<p> 当有多个条件 class 时这样写有些繁琐。可以在数组语法中使用对象语法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Box"</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass,&#123;box:isbox&#125;]"</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>当你在一个定制的组件上用到 class 属性的时候，这些类将被添加到根元素上面，这个元素上==已经存在的类不会被覆盖==</p>
<h2 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h2><h4 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h4><ul>
<li><p>直接将属性写在行内</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>绑定到一个样式对象上</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span></span><br><span class="line">//vue</span><br><span class="line">data&#123;</span><br><span class="line">    styleObject:&#123;</span><br><span class="line">        background:'red',</span><br><span class="line">        width:'100px'</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h4><p>v-bind:style 的数组语法可以将多个样式对象应用到一个元素上<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="自动添加前缀"><a href="#自动添加前缀" class="headerlink" title="自动添加前缀"></a>自动添加前缀</h4><p>当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform，Vue.js 会自动侦测并添加相应的前缀。</p>
]]></content>
      
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP协议与UDP协议的区别]]></title>
      <url>http://yoursite.com/2018/03/14/TCP%20%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>文章转自<a href="http://www.cnblogs.com/bizhu/archive/2012/05/12/2497493.html" target="_blank" rel="noopener">博客园-TCP协议与UDP协议的区别</a><br><a id="more"></a></p>
<h3 id="TCP协议与UDP协议的区别"><a href="#TCP协议与UDP协议的区别" class="headerlink" title="TCP协议与UDP协议的区别"></a>TCP协议与UDP协议的区别</h3><blockquote>
<p>TCP/IP协议是一个协议簇。里面包括很多协议的。UDP只是其中的一个。之所以命名为TCP/IP协议，因为TCP,IP协议是两个很重要的协议，就用他两命名了。<br>TCP/IP协议集包括应用层,传输层，网络层，网络访问层  </p>
</blockquote>
<h5 id="其中应用层包括"><a href="#其中应用层包括" class="headerlink" title="其中应用层包括:"></a>其中应用层包括:</h5><ul>
<li>超文本传输协议(HTTP):万维网的基本协议.   </li>
<li>文件传输(TFTP简单文件传输协议):   </li>
<li>远程登录(Telnet),提供远程访问其它主机功能,它允许用户登录     </li>
<li>internet主机,并在这台主机上执行命令.    </li>
<li>网络管理(SNMP简单网络管理协议),该协议提供了监控网络设备的方法,以及配置管理,统计信息收集,性能管理及安全管理等.   </li>
<li>域名系统(DNS),该系统用于在internet中将域名及其公共广播的网络节点转换成IP地址. <h5 id="其次网络层包括"><a href="#其次网络层包括" class="headerlink" title="其次网络层包括:"></a>其次网络层包括:</h5></li>
<li>Internet协议(IP)     </li>
<li>Internet控制信息协议(ICMP)    </li>
<li>地址解析协议(ARP)    </li>
<li>反向地址解析协议(RARP)<br>-<h5 id="网络访问层"><a href="#网络访问层" class="headerlink" title="网络访问层:"></a>网络访问层:</h5>网络访问层又称作主机到网络层(host-to-network).网络访问层的功能包括IP地址与物理地址硬件的映射,以及将IP封装成帧.基于不同硬件类型的网络接口,网络访问层定义了和物理介质的连接.  </li>
</ul>
<p>当然我这里说得不够完善，TCP/IP协议本来就是一门学问，每一个分支都是一个很复杂的流程，但我相信每位学习软件开发的同学都有必要去仔细了解一番  </p>
<h3 id="TCP协议和UDP协议的区别。"><a href="#TCP协议和UDP协议的区别。" class="headerlink" title="TCP协议和UDP协议的区别。"></a>TCP协议和UDP协议的区别。</h3><p>TCP （==Transmission   Control Protocol==）<br>传输控制协议是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来，其中的过程非常复杂，只简单的描述下这三次对话的简单过程  </p>
<blockquote>
<p>主机A向主机B发出连接请求数据包：“我想给你发数据，可以吗？”，这是第一次对话；主机B向主机A发送同意连接和要求同步（同步就是两台主机一个在发送，一个在接收，协调工作）的数据包：“可以，你什么时候发？”，这是第二次对话；主机A再发出一个数据包确认主机B的要求同步：“我现在就发，你接着吧！”，这是第三次对话。三次“对话”的目的是使数据包的发送和接收同步，经过三次“对话”之后，主机A才向主机B正式发送数据。</p>
</blockquote>
<h3 id="TCP三次握手过程"><a href="#TCP三次握手过程" class="headerlink" title="TCP三次握手过程"></a>TCP三次握手过程</h3><ul>
<li><p>1 主机A通过向主机B 发送一个含有同步序列号的标志位的数据段给主机B ,向主机B 请求建立连接,通过这个数据段,<br>主机A告诉主机B 两件事:我想要和你通信;你可以用哪个序列号作为起始数据段来回应我.  </p>
</li>
<li><p>2 主机B 收到主机A的请求后,用一个带有确认应答(ACK)和同步序列号(SYN)标志位的数据段响应主机A,也告诉主机A两件事:<br>我已经收到你的请求了,你可以传输数据了;你要用哪佧序列号作为起始数据段来回应我  </p>
</li>
<li><p>3 主机A收到这个数据段后,再发送一个确认应答,确认已收到主机B 的数据段:”我已收到回复,我现在要开始传输实际数据了<br>这样3次握手就完成了,主机A和主机B 就可以传输数据了.<br>3次握手的特点<br>没有应用层的数据<br>SYN这个标志位只有在TCP建产连接时才会被置1<br>握手完成后SYN标志位被置0</p>
</li>
</ul>
<h3 id="TCP建立连接要进行3次握手-而断开连接要进行4次"><a href="#TCP建立连接要进行3次握手-而断开连接要进行4次" class="headerlink" title="TCP建立连接要进行3次握手,而断开连接要进行4次"></a>TCP建立连接要进行3次握手,而断开连接要进行4次</h3><ul>
<li><p>1 当主机A完成数据传输后,将控制位FIN置1,提出停止TCP连接的请求  </p>
</li>
<li><p>2  主机B收到FIN后对其作出响应,确认这一方向上的TCP连接将关闭,将ACK置1  </p>
</li>
<li><p>3 由B 端再提出反方向的关闭请求,将FIN置1  </p>
</li>
<li><p>4 主机A对主机B的请求进行确认,将ACK置1,双方向的关闭结束.  </p>
</li>
</ul>
<p>由TCP的三次握手和四次断开可以看出,TCP使用面向连接的通信方式,大大提高了数据通信的可靠性,使发送数据端<br>和接收端在数据正式传输前就有了交互,为数据正式传输打下了可靠的基础  </p>
<p>UDP（==User Data Protocol，用户数据报协议==）</p>
<ul>
<li><p>（1） UDP是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、计算机的能力和传输带宽的限制；在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。</p>
</li>
<li><p>（2） 由于传输数据不建立连接，因此也就不需要维护连接状态，包括收发状态等，因此一台服务机可同时向多个客户机传输相同的消息。</p>
</li>
<li><p>（3） UDP信息包的标题很短，只有8个字节，相对于TCP的20个字节信息包的额外开销很小。</p>
</li>
<li><p>（4） 吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽、源端和终端主机性能的限制</p>
</li>
<li><p>（5）UDP使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态表（这里面有许多参数）。  </p>
</li>
<li><p>（6）UDP是面向报文的。发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界，因此，应用程序需要选择合适的报文大小。<br>我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。<br>UDP的包头结构：<br>源端口 16位<br>目的端口 16位<br>长度 16位<br>校验和 16位</p>
</li>
</ul>
<h3 id="小结TCP与UDP的区别："><a href="#小结TCP与UDP的区别：" class="headerlink" title="小结TCP与UDP的区别："></a>小结TCP与UDP的区别：</h3><blockquote>
<p>1.基于连接与无连接  </p>
</blockquote>
<blockquote>
<p>2.对系统资源的要求（TCP较多，UDP少）；  </p>
</blockquote>
<blockquote>
<p>3.UDP程序结构较简单；  </p>
</blockquote>
<blockquote>
<p>4.流模式与数据报模式 ；  </p>
</blockquote>
<blockquote>
<p>5.TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[querystring模块介绍]]></title>
      <url>http://yoursite.com/2018/03/14/querystring%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>介绍node.js 中的querystring<br><a id="more"></a><br><a href="https://nodejs.org/api/querystring.html" target="_blank" rel="noopener">Node.js v9.2.0 Documentation—Query String</a>  </p>
<p>此类一共包括4个方法:</p>
<p>querystring这个模块相对的还是比较简单，仅有4个方法。</p>
<pre><code>querystring.stringify   序列化;

querystring.parse   反序列化;

querystring.escape  编码;

querystring.unescape    解码;
</code></pre><p>[内参数]表示可选参数, [sep]指分隔符 默认&amp; , [eq]指分配符 默认=</p>
<p>下面一个一个来介绍:</p>
<h3 id="querystring-stringify-obj-sep-eq"><a href="#querystring-stringify-obj-sep-eq" class="headerlink" title="querystring.stringify(obj,[sep],[eq])"></a>querystring.stringify(obj,[sep],[eq])</h3><p>对象格式化成参数字符串 ,obj就是要格式化的对象,必选参数.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">name:<span class="string">"虾莫"</span>,</span><br><span class="line">url:<span class="string">"http://yijiebuyi.com"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> param= querystring.stringify(obj);</span><br><span class="line"><span class="comment">// 没有指定分隔符和分配符,并且自动编码汉字</span></span><br><span class="line"><span class="built_in">console</span>.log(param);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：  </span></span><br><span class="line">name=%E8%<span class="number">99</span>%BE%E8%<span class="number">8</span>E%AB&amp;url=http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fpinkboy.top</span><br></pre></td></tr></table></figure>
<h3 id="querystring-parse-str-sep-eq-options"><a href="#querystring-parse-str-sep-eq-options" class="headerlink" title="querystring.parse(str, [sep], [eq], [options])"></a>querystring.parse(str, [sep], [eq], [options])</h3><p>参数字符串格式化成对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"虾莫"</span>,</span><br><span class="line">  url: <span class="string">"http://pinkboy.top"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> param = querystring.stringify(obj)</span><br><span class="line"><span class="built_in">console</span>.log(param)</span><br><span class="line"><span class="keyword">var</span> newobj = querystring.parse(param)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (newobj), newobj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">name=%E8%<span class="number">99</span>%BE%E8%<span class="number">8</span>E%AB&amp;url=http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fpinkboy.top</span><br><span class="line"></span><br><span class="line">object </span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">"虾莫"</span>, <span class="attr">url</span>: <span class="string">"http://pinkboy.top"</span>&#125;</span><br><span class="line">name: <span class="string">"虾莫"</span></span><br><span class="line">url: <span class="string">"http://pinkboy.top"</span></span><br><span class="line">__proto__: <span class="built_in">Object</span></span><br></pre></td></tr></table></figure>
<h3 id="querystring-escape"><a href="#querystring-escape" class="headerlink" title="querystring.escape"></a>querystring.escape</h3><p>参数编码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">querystring.escape(<span class="string">"name=慕白"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">return:</span></span><br><span class="line"><span class="comment">'name%3D%E6%85%95%E7%99%BD'</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="querystring-unescape-str"><a href="#querystring-unescape-str" class="headerlink" title="querystring.unescape(str)"></a>querystring.unescape(str)</h3><p>unescape方法可将含有%的字符串进行解码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">querystring.unescape(<span class="string">'name%3D%E6%85%95%E7%99%BD'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">return:</span></span><br><span class="line"><span class="comment">'name=慕白'</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS面向对象之创建对象方式与原型链]]></title>
      <url>http://yoursite.com/2018/03/14/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E5%BC%8F%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      <content type="html"><![CDATA[<p>本文描述对象的几种常用创建方式以及什么是原型。<br><a id="more"></a></p>
<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatStudent</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name=name;</span><br><span class="line">    o.age=age;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stu1=creatStudent(<span class="string">'zjn'</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<p>工厂模式虽然或以创建多个类似的对象，但是却无法识别对象，不知道一个对象是什么类型的。</p>
<h4 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">stu1=<span class="keyword">new</span> Student(<span class="string">'zjn'</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<p>这个写法改写了工厂模式的那个例子，Person()就是一个构造函数，构造函数应该以大写字母开头。</p>
<p>new一个对象出来经历4个步骤：</p>
<ol>
<li>创建一个新的对象</li>
<li>将构造函数作用域给新对象(那样this就指向了新对象)</li>
<li>执行构造函数中的代码(给新对象添加属性和方法)</li>
<li>返回新对象<br>上面例子中的stu1对象有一个constructor属性，指向Student.</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(stu1.constructor==Student) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>所以constructor&gt;能够识别对象类型，但用instanceof来检测对象类型更好，上面创造的stu1对象既是Student的实例，也是Object的实例，因为所有的对象都继承自Object对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(stu1 instanceof Student) //true</span><br><span class="line">alert(stu1 instanceof Object) //true</span><br></pre></td></tr></table></figure>
<h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>像上面的Student这样的构造函数会有一个prototype属性，这个属性指向prototype对象(原型对象)。这个对象包含共享的属性和方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype.area=<span class="string">'China'</span></span><br><span class="line">stu1=<span class="keyword">new</span> Student(<span class="string">'zjn'</span>,<span class="number">20</span>);</span><br><span class="line">stu1.sayName();<span class="comment">//'zjn'</span></span><br><span class="line">alert(stu1.area);<span class="comment">//'China'</span></span><br></pre></td></tr></table></figure>
<p>在默认情况下，原型对象(prototype对象)会自动获得一个constructor属性，这个属性又指向prototype属性所在的函数，如Student.prototype.constructor就指向Student这个函数本身。</p>
<p>除此之外，原型对象还会有一个<strong>proto</strong>属性，这个属性指向Object原型对象。</p>
<p>实例化一个对象后，这个实例会有一个<strong>proto</strong>属性，这个属性指向构造函数的原型对象。比如stu1的<strong>proto</strong>属性指向Student的原型对象。  </p>
<p>按照下图理解<br><img src="http://on5j1yi8j.bkt.clouddn.com/proto.jpg" alt="image"></p>
<p>在实例中添加一个原型中已经有的属性，会屏蔽原型中的同名属性。可以用hasOwnProperty()来检测对象上是否有这个属性。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(stu1.hasOwnProperty(<span class="string">'name'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(stu1.hasOwnProperty(<span class="string">'area'</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h4 id="关于原型重写的问题"><a href="#关于原型重写的问题" class="headerlink" title="关于原型重写的问题"></a>关于原型重写的问题</h4><p>同样是之前使用的那个例子，如果我们要加原型方法或属性需要不断的写Student.prototype.xxx=xxx,我们可以重写原型来减少体力劳动。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype=&#123;</span><br><span class="line">    sayname:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="keyword">this</span>.name);&#125;,</span><br><span class="line">    area:<span class="string">'China'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样做有什么问题呢？ 因为我们写了一个prototype的对象，所以它会创建自己的prototype对象，里面的constructor属性将指向Object。也就是本该指向Student的prototype对象中的constructor不再指向Student。</p>
<h4 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h4><p>所以要引出这个模式，将有引用类型的属性放到构造函数中，使每个实例都有一个副本，不会相互影响。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    teacher=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype=&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:Student,</span><br><span class="line">    sayName:function()&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">stu1=<span class="keyword">new</span> Student(<span class="string">'zjn'</span>,<span class="number">20</span>);</span><br><span class="line">stu2=<span class="keyword">new</span> Student(<span class="string">'gcf'</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<p>本文转自<a href="http://182.254.154.28:4000/view?contentid=598ea18ac5153d41778aced5" target="_blank" rel="noopener">GaNan’s Blog</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS实现简单的别踩白块游戏]]></title>
      <url>http://yoursite.com/2018/03/14/JS%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<p>界面未作优化 只实现了基本功能 随机生成黑快  点击分数加成 错点以及触底死亡 难度选择等<br><a id="more"></a> </p>
<p>点击—-<a href="http://ouz1r1b1f.bkt.clouddn.com/%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97.html" target="_blank" rel="noopener">查看演示</a> </p>
<h4 id="玩家信息"><a href="#玩家信息" class="headerlink" title="玩家信息"></a>玩家信息</h4><p>设置开始/暂停 等级选择以及分数统计  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playerInformation"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>玩家信息 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"Btn1"</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"Btn2"</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"selectBtn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"5"</span>  <span class="attr">class</span>=<span class="string">"rank"</span>&gt;</span>简单<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"10"</span> <span class="attr">class</span>=<span class="string">"rank"</span>&gt;</span>一般<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"20"</span> <span class="attr">class</span>=<span class="string">"rank"</span>&gt;</span>困难<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>用户操作</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">startBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            move(speed);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">stopBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">// 暂停</span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line"> &#125;</span><br><span class="line">       </span><br><span class="line">Select.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 选择等级</span></span><br><span class="line">            h = <span class="number">-100</span>; <span class="comment">//初始化</span></span><br><span class="line">            speed = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.value); <span class="comment">//改变速度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="移动函数"><a href="#移动函数" class="headerlink" title="移动函数"></a>移动函数</h4><p>总共五列，初始位置offsetTop=-100px,然后按照设置的速度向下移动。<strong>移动的时候 h=0时瞬间把它变成-100  然后慢慢+speed 直到h=0 如此循环</strong>  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">speed</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 下移动一格 offsetTop变成0之后，将原本的最后一个节点插到第一个节点处</span></span><br><span class="line">    playerClick();</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span>) &#123;</span><br><span class="line"> Content.insertBefore(Content.children[<span class="number">5</span>], Content.children[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        Content.children[<span class="number">0</span>].children[i].style.background = <span class="string">""</span>;</span><br><span class="line">        Content.children[<span class="number">0</span>].children[i].isBlack = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    h == <span class="number">0</span> ? h = <span class="number">-100</span> : h += speed; <span class="comment">//这句是关键。移动的时候 h=0时瞬间把它变成-100  然后慢慢+speed 直到h=0 如此循环</span></span><br><span class="line">    Content.style.top = h + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">-100</span>) &#123;</span><br><span class="line">        <span class="comment">// 黑块触底死亡</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Content.children[<span class="number">5</span>].children[i].isBlack) &#123;</span><br><span class="line">                clearInterval(timer);</span><br><span class="line">                alert(<span class="string">'死了'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        creatBlack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="生成黑块函数"><a href="#生成黑块函数" class="headerlink" title="生成黑块函数"></a>生成黑块函数</h4><p>在第一行的四个格子中随机生成一个黑块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatBlack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> blackOne = Content.children[<span class="number">0</span>].children[<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">4</span>)]; <span class="comment">//随机生成黑块</span></span><br><span class="line">    blackOne.style.background = <span class="string">"black"</span>;</span><br><span class="line">    blackOne.isBlack = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h4><pre><code class="js"><span class="function"><span class="keyword">function</span> <span class="title">playerClick</span>(<span class="params"></span>) </span>{
     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; adot.length; i++) {
         adot[i].index = i;
         adot[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
          <span class="keyword">if</span> (<span class="keyword">this</span>.isBlack == <span class="number">1</span>) {
              <span class="keyword">this</span>.style.background = <span class="string">"#B0E0E6"</span>;
               scoreNum += <span class="number">10</span>;
            Score.innerHTML = <span class="string">"你的得分为："</span> + scoreNum + <span class="string">"分"</span>;
              <span class="keyword">this</span>.isBlack = <span class="number">0</span>;} 
              <span class="keyword">else</span> {
                    <span class="keyword">this</span>.isBlack = <span class="number">0</span>;
                    scoreNum = <span class="number">0</span>;
                    alert(<span class="string">"死了"</span>)
                    }
            }
        }
}
</code></pre>
<h4 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h4><p> <img src="http://ouz1r1b1f.bkt.clouddn.com/bai.png" alt="image">  </p>
<p><strong>在这个小案例中。要选择contentde 下第一列元素时，忽略了DOM 中的文本节点，使用obj.fistChild()选择 ，结果错误，因为html中的转行符号占了一个空的文本节点。后来改用obj.children[0]解决了</strong>。  </p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中的继承]]></title>
      <url>http://yoursite.com/2018/03/14/JS%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<p>本文介绍javascript中常用的几种继承方式<br><a id="more"></a></p>
<h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h3><p>核心：拿父类实例来充当子类原型对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'gcf'</span>;</span><br><span class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super();    <span class="comment">// 核心</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> Sub();         <span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">var</span> sub2 = <span class="keyword">new</span> Sub();</span><br><span class="line"></span><br><span class="line">sub1.name = <span class="string">'zjn'</span></span><br><span class="line">sub1.arr.push(<span class="number">2</span>);</span><br><span class="line">alert(sub1.name);    <span class="comment">// zjn</span></span><br><span class="line">alert(sub2.name);    <span class="comment">// gcf</span></span><br><span class="line"> </span><br><span class="line">alert(sub1.arr);    <span class="comment">// 1, 2</span></span><br><span class="line">alert(sub2.arr);    <span class="comment">// 1, 2 //因为是引用类型，在改变sub1的值时候，sub2也改变了</span></span><br></pre></td></tr></table></figure>
<ul>
<li>优点：简单容易实现</li>
<li>缺点：<br>1.创建子类实例时，无法向父类构造函数传参<br>2.修改sub1.arr后sub2.arr也变了，因为来自==原型对象的引用属性是所有实例共享的==</li>
</ul>
<h3 id="2-构造函数实现继承"><a href="#2-构造函数实现继承" class="headerlink" title="2.构造函数实现继承"></a>2.构造函数实现继承</h3><p>核心：借父类的构造函数来增强子类实例，等于是把父类的==实例属性复制==了一份给子类实例装上了（完全没有用到原型）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>)</span>&#123; <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">this</span>.val = val;   <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//方法</span></span><br><span class="line">       alert(<span class="string">"hello"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    Super.call(<span class="keyword">this</span>, val);   <span class="comment">// 核心</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> Sub(<span class="number">1</span>);<span class="comment">//实现了传递参数</span></span><br><span class="line"><span class="keyword">var</span> sub2 = <span class="keyword">new</span> Sub(<span class="number">2</span>);</span><br><span class="line">sub1.arr.push(<span class="number">2</span>);</span><br><span class="line">alert(sub1.val);    <span class="comment">// 1</span></span><br><span class="line">alert(sub2.val);    <span class="comment">// 2 </span></span><br><span class="line"> </span><br><span class="line">alert(sub1.arr);    <span class="comment">// 1, 2  //可以继承引用属性</span></span><br><span class="line">alert(sub2.arr);    <span class="comment">// 1</span></span><br><span class="line"> </span><br><span class="line">alert(sub1.fun === sub2.fun);   <span class="comment">// false 无法复用函数 每个实例拥有一个新的fun 函数</span></span><br></pre></td></tr></table></figure>
<ul>
<li>优点<br>1.解决了子类实例共享父类引用属性的问题<br>2.创建子类实例时，可以向父类构造函数传参</li>
<li>缺点<br>1.只能继承父类的实例属性和方法，不能继承原型属性/方法<br>2.==无法实现函数复用==，每个子类实例都持有一个新的fun函数，太多了就会影响性能(跟上一点一个意思)</li>
</ul>
<h3 id="3-组合继承-最常用"><a href="#3-组合继承-最常用" class="headerlink" title="3.组合继承(最常用)"></a>3.组合继承(最常用)</h3><p>核心：把实例函数都放在原型对象上，以实现函数复用。同时还要保留借用构造函数方式的优点</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 只在此处声明基本属性和引用属性</span></span><br><span class="line">    <span class="keyword">this</span>.val = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  在此处声明函数 保证函数可以复用</span></span><br><span class="line">Super.prototype.fun1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Super.prototype.fun2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//Super.prototype.fun3...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    Super.call(<span class="keyword">this</span>,val);   <span class="comment">// 核心</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super();    <span class="comment">// 核心</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> Sub(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> sub2 = <span class="keyword">new</span> Sub(<span class="number">2</span>);</span><br><span class="line">alert(sub1.val)   <span class="comment">//1</span></span><br><span class="line">alert(sub1.fun === sub2.fun);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>优点：<br>1.可以继承引用属性<br>2.可以传参<br>3.函数可以复用  </li>
<li>缺点：<br>原型上new一个Super后,原型上多了一份Super的实例属性。而Sub实例上的属性屏蔽了原型的上的属性，又是一种内存浪费。不过问题不大，这也是最常用的一种继承方式。</li>
</ul>
<h3 id="4-寄生组合继承"><a href="#4-寄生组合继承" class="headerlink" title="4.寄生组合继承"></a>4.寄生组合继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    F.prototype=obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.b=[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Super.prototype.c=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proto=creatObj(Super.prototype);</span><br><span class="line">proto.constructor=Sub;</span><br><span class="line">Sub.prototype=proto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub=<span class="keyword">new</span> Sub();</span><br></pre></td></tr></table></figure>
<ul>
<li><p>优点：完美  </p>
</li>
<li><p>缺点：麻烦</p>
</li>
</ul>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ol>
<li><a href="http://www.cnblogs.com/ayqy/p/4471638.html" target="_blank" rel="noopener">重新理解JS的6种继承方式</a>  </li>
<li><a href="http://www.cnblogs.com/humin/p/4556820.html/" target="_blank" rel="noopener">博客园-JS实现继承的几种方式</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中的正则表达式]]></title>
      <url>http://yoursite.com/2018/03/14/JS%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式<br><a id="more"></a></p>
<h3 id="定义正则表达式"><a href="#定义正则表达式" class="headerlink" title="定义正则表达式"></a>定义正则表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt=<span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern,modifiers);</span><br></pre></td></tr></table></figure>
<p>或者更简单的方式:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt=<span class="regexp">/pattern/m</span>odifiers;</span><br></pre></td></tr></table></figure>
<ul>
<li>pattern（模式） 描述了表达式的模式</li>
<li>modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配</li>
</ul>
<p>1.使用构造函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[1-9]\d*$"</span>)</span><br></pre></td></tr></table></figure></p>
<p>2.使用 //<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/[1-9]\d*$/</span></span><br></pre></td></tr></table></figure></p>
<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><ul>
<li>i 忽略大小写</li>
<li>g  全局匹配</li>
<li>m  执行对行匹配  </li>
</ul>
<h4 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h4><p>方括号用于查找某个范围内的字符：</p>
<ul>
<li>[abc]  查找方括号间的任何字符  </li>
<li>[^abc]  查找任何不在方括号中的字符</li>
</ul>
<h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><ul>
<li>\d 匹配数字</li>
<li>\w 查找单词 (包括字符和数字)</li>
<li>\s 查找空白字符</li>
<li>\S查找非空白字符</li>
</ul>
<h4 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h4><ul>
<li>==^== 匹配一个输入或一行的开头，/^a/匹配”an A”，而不匹配”An a” </li>
<li>==$== 匹配一个输入或一行的结尾，/a$/匹配”An a”，而不匹配”an A” </li>
<li>==*== 匹配前面元字符0次或多次，/ba*/将匹配b,ba,baa,baaa </li>
<li>+匹配前面元字符1次或多次，/ba*/将匹配ba,baa,baaa </li>
<li>==?== 匹配前面元字符0次或1次，/ba*/将匹配b,ba </li>
<li>==(x)== 匹配x保存x在名为$1…$9的变量中 </li>
<li>==x|y== 匹配x或y </li>
<li>=={n}== 精确匹配n次 </li>
<li>=={n,}== 匹配n次以上 </li>
<li>=={n,m}== 匹配n-m次 </li>
<li>==[xyz]== 字符集(character set)，匹配这个集合中的任一一个字符(或元字符) </li>
<li>==[^xyz]== 不匹配这个集合中的任何一个字符 </li>
<li>==[\b]== 匹配一个退格符 </li>
<li>==\d== 匹配一个字数字符，/\d/ = /[0-9]/ </li>
<li>==\D== 匹配一个非字数字符，/\D/ = /[^0-9]/ </li>
<li>==\n== 匹配一个换行符 </li>
<li>==\r== 匹配一个回车符 </li>
<li>==\s== 匹配一个空白字符，包括\n,\r,\f,\t,\v等 </li>
<li>==\S== 匹配一个非空白字符，等于/[^\n\f\r\t\v]/ </li>
<li>==\w== 匹配一个可以组成单词的字符(alphanumeric，这是我的意译，含数字)，包括下划线，如[\w]匹配”$5.98”中的5，等于[a-zA-Z0-9] </li>
<li>==\W== 匹配一个不可以组成单词的字符，如[\W]匹配”$5.98”中的$，等于[^a-zA-Z0-9]。</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>1校验登录名：++只能输入5-20个以字母开头、可带数字、“_”、“.”的字串 ++<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRegisterUserName</span>(<span class="params">s</span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">var</span> patrn=<span class="regexp">/^[a-zA-Z]&#123;1&#125;([a-zA-Z0-9]|[._])&#123;4,19&#125;$/</span>; </span><br><span class="line"><span class="keyword">if</span> (!patrn.exec(s)) <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.校验密码：只能输入6-20个字母、数字、下划线<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPasswd</span>(<span class="params">s</span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">var</span> patrn=<span class="regexp">/^(\w)&#123;6,20&#125;$/</span>; </span><br><span class="line"><span class="keyword">if</span> (!patrn.exec(s)) <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3.Email地址的正则表达式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</span><br></pre></td></tr></table></figure></p>
<p>4.配网址URL的正则表达式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//([\w-]+\.)+[\w-]+(/[\w- ./?%&amp;=]*)?</span></span><br></pre></td></tr></table></figure></p>
<p>5.过滤指定的字符</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">re=<span class="regexp">/笨蛋|脑残|找家男|/g</span></span><br><span class="line">str=<span class="string">"我是笨蛋 你是脑残找家男"</span></span><br><span class="line">str.replace(re,<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=;i&lt;str.length;++)&#123;</span><br><span class="line">        result+=<span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/img%E6%AD%A3%E5%88%991.png" alt="image"></p>
<p>6.去除两端的空格<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">""</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>未完待续</p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js中7777的同步和异步概念]]></title>
      <url>http://yoursite.com/2018/03/14/js%E4%B8%AD%E7%9A%84%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>同步和异步的概念小结<br><a id="more"></a></p>
<h3 id="js是单线程的"><a href="#js是单线程的" class="headerlink" title="js是单线程的"></a>js是单线程的</h3><p>js是一门单线程的语言，这就意味着同一时间中只能做同一件事情，你也许会问，为什么不设置成多线程呢，这样效率不是会更高吗，看一下下面这段话就知道了</p>
<blockquote>
<p>作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？  </p>
</blockquote>
<h3 id="最基础的异步是setTimeout和setInterval函数"><a href="#最基础的异步是setTimeout和setInterval函数" class="headerlink" title="最基础的异步是setTimeout和setInterval函数"></a>最基础的异步是setTimeout和setInterval函数</h3><pre><code class="js"><span class="built_in">console</span>.log(<span class="number">1</span>);
setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
    <span class="built_in">console</span>.log(<span class="number">3</span>)
}, <span class="number">0</span> );
setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
    <span class="built_in">console</span>.log(<span class="number">4</span>)
}, <span class="number">500</span> );
setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
    <span class="built_in">console</span>.log(<span class="number">5</span>)
}, <span class="number">500</span> );
<span class="built_in">console</span>.log(<span class="number">2</span>);
</code></pre>
<p>执行上面的代码：<br>控制台将会一次输出1 2 3 4 5<br>输出3 的代码段被延时0ms但还是在2输出之后才输出，这是因为在js中：</p>
<blockquote>
<p>在同一程序段中所有其余的代码执行结束后，超时才会发生。所以如果设置了超时，同时执行了需长时间运行的函数，那么在该函数执行完成之前，超时甚至都不会启动。</p>
</blockquote>
<h3 id="js中所有任务可以分成两种"><a href="#js中所有任务可以分成两种" class="headerlink" title="js中所有任务可以分成两种"></a>js中所有任务可以分成两种</h3><p>一种是同步任务（synchronous），另一种是异步任务（asynchronous）  </p>
<p>同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；  </p>
<p>异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p>
<p>具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行</p>
<blockquote>
<p>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack<br>（2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。<br>（3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br>（4）主线程不断重复上面的第三步。  </p>
</blockquote>
<p>图片转自<a href="https://www.cnblogs.com/c3gen/p/6170504.html" target="_blank" rel="noopener"> c3gen_小胖–js中的同步和异步</a>  </p>
<p><img src="http://image.beekka.com/blog/2014/bg2014100801.jpg" alt="image"></p>
<p>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于存在后文提到的”定时器”功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery 学习心得]]></title>
      <url>http://yoursite.com/2018/03/14/jQuery%20%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<h3 id="jQuery-语法实例"><a href="#jQuery-语法实例" class="headerlink" title="jQuery 语法实例"></a>jQuery 语法实例</h3><ul>
<li>$(this).hide()<br>演示 jQuery hide() 函数，隐藏当前的 HTML 元素。</li>
<li><p>$(“#test”).hide()  </p>
<a id="more"></a>
<p>演示 jQuery hide() 函数，隐藏 id=”test” 的元素</p>
</li>
<li><p>$(“p”).hide()<br>演示 jQuery hide() 函数，隐藏所有 </p><p> 元素。</p>
</li>
<li>$(“.test”).hide()<br>演示 jQuery hide() 函数，隐藏所有 class=”test” 的元素<h3 id="jQuery-元素选择器"><a href="#jQuery-元素选择器" class="headerlink" title="jQuery 元素选择器"></a>jQuery 元素选择器</h3>jQuery 使用 CSS 选择器来选取 HTML 元素。</li>
<li>$(“p”) 选取 <p> 元素。</p></li>
<li>$(“p.intro”) 选取所有 class=”intro” 的 <p> 元素。</p></li>
<li>$(“p#demo”) 选取所有 id=”demo” 的 <p> 元素</p></li>
<li></li>
</ul>
<table>
<thead>
<tr>
<th>header 1</th>
<th>header 2</th>
</tr>
</thead>
<tbody>
<tr>
<td>语法</td>
<td>描述   </td>
</tr>
<tr>
<td>$(“p”)</td>
<td>所有 <p> 元素</p></td>
</tr>
<tr>
<td>$(“p.intro”)</td>
<td>所有 class=”intro” 的 <p> 元素</p></td>
</tr>
<tr>
<td>$(“.intro”)</td>
<td>所有 class=”intro” 的元素</td>
</tr>
<tr>
<td>$(“#intro”)</td>
<td>id=”intro” 的元素</td>
</tr>
<tr>
<td>$(“ul li:first”)</td>
<td>每个 <ul> 的第一个 <li> 元素</li></ul></td>
</tr>
<tr>
<td>$(“[href$=’.jpg’]”)</td>
<td>所有带有以 “.jpg” 结尾的属性值的 href 属性</td>
</tr>
<tr>
<td>$(“div#intro .head”</td>
<td>id=”intro” 的 <div> 元素中的所有 class=”head” 的元素</div></td>
</tr>
</tbody>
</table>
<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).animate(&#123;params&#125;,speed,callback);</span><br></pre></td></tr></table></figure>
<p>必需的 params 参数定义形成动画的 CSS 属性。<br>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。<br>可选的 callback 参数是动画完成后所执行的函数名称<br>开始滑动  停止滑动</p>
<pre><code class="js">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
  $(<span class="string">"#flip"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">"#panel"</span>).slideDown(<span class="number">5000</span>);
  });
  $(<span class="string">"#stop"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">"#panel"</span>).stop();
  });
});
</code></pre>
<p>Chaining 允许我们在一条语句中允许多个 jQuery 方法（在相同的元素上） </p>
<pre><code class="js">$(<span class="string">"#p1"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>)
.slideUp(<span class="number">2000</span>).slideDown(<span class="number">2000</span>);
</code></pre>
<p>获得内容 - text()、html() 以及 val()<br>三个简单实用的用于 DOM 操作的 jQuery 方法：</p>
<ul>
<li>text() - 设置或返回所选元素的文本内容</li>
<li>html() - 设置或返回所选元素的内容（包括 HTML 标记）</li>
<li>val() - 设置或返回表单字段的值</li>
</ul>
<h4 id="删除元素-内容"><a href="#删除元素-内容" class="headerlink" title="删除元素/内容"></a>删除元素/内容</h4><p>如需删除元素和内容，一般可使用以下两个 jQuery 方法：</p>
<ul>
<li>remove() - 删除被选元素（及其子元素）</li>
<li>empty() - 从被选元素中删除子元素<br>接受一个参数 可以过滤被删除的元素<br>删除类名为==italic==的p元素</li>
</ul>
<pre><code class="js">$(<span class="string">"p"</span>).remove(<span class="string">".italic"</span>);
</code></pre>
<h4 id="jQuery-操作-CSS"><a href="#jQuery-操作-CSS" class="headerlink" title="jQuery 操作 CSS"></a>jQuery 操作 CSS</h4><p>jQuery 拥有若干进行 CSS 操作的方法。我们将学习下面这些：</p>
<ul>
<li>addClass() - 向被选元素添加一个或多个类</li>
<li>removeClass() - 从被选元素删除一个或多个类</li>
<li>toggleClass() - 对被选元素进行添加/删除类的切换操作<br>css() - 设置或返回样式属性   <h4 id="6-jQuery-尺寸"><a href="#6-jQuery-尺寸" class="headerlink" title="6.jQuery - 尺寸"></a>6.jQuery - 尺寸</h4></li>
<li>width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。</li>
<li>height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）。  </li>
<li>innerWidth() 方法返回元素的宽度（包括内边距）。</li>
<li>innerHeight() 方法返回元素的高度（包括内边距）。</li>
<li>outerWidth() 方法返回元素的宽度（包括内边距和边框）。</li>
<li>outerHeight() 方法返回元素的高度（包括内边距和边框）。  </li>
<li></li>
</ul>
<p><em>2017/7/25更新</em></p>
]]></content>
      
        
        <tags>
            
            <tag> jq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript中的call()和apply()方法]]></title>
      <url>http://yoursite.com/2018/03/14/javascript%E4%B8%AD%E7%9A%84call()%E5%92%8Capply()%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>详细介绍js中的call和apply()方法<br><a id="more"></a></p>
<blockquote>
<p>call, apply都属于Function.prototype的一个方法,它是JavaScript引擎内在实现的,因为属于Function.prototype,所以每个Function对象实例,也就是每个方法都有call, apply属性.既然作为方法的属性,那它们的使用就当然是针对方法的了.这两个方法是容易混淆的,因为它们的作用一样,只是使用方式不同  </p>
</blockquote>
<p><strong>相同点:两个方法产生的作用是完全一样的</strong>  </p>
<p><strong>不同点:方法传递的参数不同</strong></p>
<h3 id="call方法"><a href="#call方法" class="headerlink" title="call方法:"></a>call方法:</h3><ul>
<li>语法：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call([thisObj[,arg1[, arg2[,   [,.argN]]]]])</span><br></pre></td></tr></table></figure>
<p>定义：调用一个对象的一个方法，以另一个对象替换当前对象。 </p>
<ul>
<li>说明：<br>call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 </li>
</ul>
<h3 id="apply方法："><a href="#apply方法：" class="headerlink" title="apply方法："></a>apply方法：</h3><ul>
<li>语法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply([thisObj[,argArray]])</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>定义：应用某一对象的一个方法，用另一个对象替换当前对象。 </p>
<ul>
<li>说明： 如果argArray不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。 如果没有提供 argArray 和thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>1.用call实现继承</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;      </span><br><span class="line">    <span class="keyword">this</span>.name = name;      </span><br><span class="line">    <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;      </span><br><span class="line">        alert(<span class="keyword">this</span>.name);      </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;      </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;    </span><br><span class="line">    Person.call(<span class="keyword">this</span>, name);    </span><br><span class="line">&#125;      </span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">"Black Cat"</span>);     </span><br><span class="line">cat.showName(); <span class="comment">//弹出Black Cat</span></span><br></pre></td></tr></table></figure>
<p>cat并没有Showname()的方法 ，用call方法实现了继承  </p>
<p>2.改变this的指向</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line"> name = <span class="string">'zjn'</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line"> name = <span class="string">'gcf'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'chrome'</span>;</span><br><span class="line">getName();<span class="comment">//弹出"chrome"</span></span><br><span class="line">getName.call(obj1);<span class="comment">//弹出"zjn"</span></span><br><span class="line">getName.call(obj2);<span class="comment">//弹出"gcf"</span></span><br></pre></td></tr></table></figure>
<p>call, apply方法区别是,从第二个参数起, call方法参数将依次传递给借用的方法作参数, 而apply直接将这些参数放到一个数组中再传递, 最后借用方法的参数列表是一样的.<br><strong>当参数明确时可用call, 当参数不明确时可用apply给合arguments</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript中的 export和export default的区别]]></title>
      <url>http://yoursite.com/2018/03/14/javascript%E4%B8%AD%E7%9A%84%20export%E5%92%8Cexport%20default%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>答疑解惑，export和export default的区别<br><a id="more"></a><br>本文原创地址链接：<a href="http://blog.csdn.net/zhou_xiao_cheng/article/details/52759632，未经博主允许不得转载。" target="_blank" rel="noopener">http://blog.csdn.net/zhou_xiao_cheng/article/details/52759632，未经博主允许不得转载。</a><br> 相信很多人都使用过export、export default、import，然而它们到底有什么区别呢？<br>在JavaScript ES6中，export与export default均可用于导出常量、函数、文件、模块等，你可以在其它文件或模块中通过import+(常量 | 函数 | 文件 | 模块)名的方式，将其导入，以便能够对其进行使用，但在一个文件或模块中，export、import可以有多个，export default仅有一个。<br>具体使用：<br>1、</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> str = <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的导入方式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; str, f &#125; <span class="keyword">from</span> <span class="string">'demo1'</span> <span class="comment">//也可以分开写两次，导入的时候带花括号</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">const</span> str = <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 对应的导入方式： --&gt;</span><br><span class="line"><span class="comment">//demo2.js</span></span><br><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'demo1'</span> <span class="comment">//导入的时候没有花括号</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ie7兼容性小计]]></title>
      <url>http://yoursite.com/2018/03/14/Ie7%E5%85%BC%E5%AE%B9%E6%80%A7%E5%B0%8F%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>介绍ie中的几个常用兼容操作<br><a id="more"></a></p>
<p>1.图片在IE7下出现一个框，去掉是加一个img{ border: 0px}<br>2.div 宽度默认是自由扩展的，只有加了float和position：a<strong>bsolute ，它的自由扩展才会失效</strong>，可以加个固定宽度width，或者设置position：absolute ;  left：0px ;  right :  0px;   强行拉宽width:100%不要随便使用，以免和padding  border叠加</p>
<ol>
<li>input里面文字前面需要空出位置，不要用text-indent，IE7会解析错误，用padding-left可保万无一失<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=&quot;&quot; type=&quot;text&quot;style=&quot;text-indent:30px&quot; /&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>4.Input表单元素 使用时先清除其固有样式属性<br>比如margin：0px   padding：0px，如果有表单元素IE7下默认大小不一样，比如复选框，你可以强行加一个宽高写死14px  </p>
<p>5.IE7关于input的父级div加margin-left 和float后，margin-left的距离会赋予到input的前面，问题解决是给该input加个div套住<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>　<span class="attr">style</span>=<span class="string">"margin-left:100px;</span></span></span><br><span class="line"><span class="tag"><span class="string">float:left;background:#0066FF;  "</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>6.用float的时候，有多2个以上元素并排，不许这个加了float，那个不加。<br>要全加上</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”float:left”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>7.注意UL li 和span的灵活使用，简单的文字编排，用span和<a>结合使用，导航栏和较复杂的栏目才用ul li  </a></p>
<p>8.如果有部分同学写页面无感或者兼容性很难把控，可以先用色块把大局做出来，再慢慢细化  </p>
<p>9.宽高不要设置的太随意，尽量以内部元素自动撑开，如果已经写死，要注意内部元素会不会宽高太多撑爆这个外包的div</p>
<p>10.可以把页面大众字体，行距，字体大小，颜色全局控制，以防止页面小部分忘记设字体行距  </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123; <span class="attribute">padding</span>:<span class="number">0px</span>; <span class="attribute">margin</span>:<span class="number">0px</span>;  </span><br><span class="line"><span class="attribute">font-family</span>:微软雅黑; <span class="attribute">font-size</span>:<span class="number">12px</span>;  </span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">18px</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>*{} 对页面里每个标签都会影响到和body{}有本质区别</p>
<p>11.用了float后一定要无条件清除浮动 clear：both</p>
<p>12.中文字体起步价是<strong>12px</strong>,不要写成10，</p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Html 5知识点小计]]></title>
      <url>http://yoursite.com/2018/03/14/Html%205%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>html5中的一些常用知识点<br><a id="more"></a></p>
<h3 id="一、主要常用的布局标签："><a href="#一、主要常用的布局标签：" class="headerlink" title="一、主要常用的布局标签："></a>一、主要常用的布局标签：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>：页面的头部区域</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>：页面的脚部区域</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>：页面导航元素</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>：页面主体区域的一块主体内容</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>：article里面的一段区域内容</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>：页面主体区域中附属内容</span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span> 标签规定文档的主要内容。为规范，不要在页面里出现2个 <span class="tag">&lt;<span class="name">main</span>&gt;</span> ，</span><br><span class="line">不能是以下元素的后代  </span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>、<span class="tag">&lt;<span class="name">header</span>&gt;</span> <span class="tag">&lt;<span class="name">article</span>&gt;</span>、<span class="tag">&lt;<span class="name">aside</span>&gt;</span> <span class="tag">&lt;<span class="name">nav</span>&gt;</span>。</span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span>&gt;</span>页面菜单元素</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>home<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>home<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>home<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>  <span class="tag">&lt;<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="二、其他常见备用的H5布局标签和点缀标签"><a href="#二、其他常见备用的H5布局标签和点缀标签" class="headerlink" title="二、其他常见备用的H5布局标签和点缀标签"></a>二、其他常见备用的H5布局标签和点缀标签</h3><p>1.hgroup 标题标签  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>HTML5简单吗<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>很简单啊<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.address地址标签，一般在footer里包含地址的标签  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>住址:杭州西湖区<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.mark高亮显示</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>H5<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4.time标签定义日期和时间–可以单独给时间单独设个强调的样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>9:00<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>好处：将原来div标签换成新的容易识别的名称标签，叫做标签的语义化，标签语义化的目的就是对搜索引擎友好，结合简洁清晰的布局结构，能更容易被搜索引擎抓取，这种符合搜索引擎收索规则的做法，网站的推广便可以省下不少钱，而且可维护性更高，因为结构清晰,十分易于阅读  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;我很有钱&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>对于搜索引擎来说，你只是很普通的div屌丝，尽管你真的很有钱。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我很有钱<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>搜索引擎知道这个标签里文字重要性，会重点关注你很有钱<br>标签语义化其实就是把你想要表达的东西更容易被搜索引擎理解和重视</p>
<h3 id="三．H5多媒体标签：video、audio、"><a href="#三．H5多媒体标签：video、audio、" class="headerlink" title="三．H5多媒体标签：video、audio、"></a>三．H5多媒体标签：video、audio、</h3><p>1.Video 视频标签</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"400"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">height</span>=<span class="string">”200”</span> <span class="attr">src</span>=<span class="string">"1.mp4 "</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">controls</span>=<span class="string">"controls"</span>   <span class="attr">loop</span>=<span class="string">"loop"</span> <span class="attr">hidden</span>=<span class="string">"hidden"</span>/&gt;</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">您的浏览器版本过低，请升级浏览器！ <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">简写：<span class="tag">&lt;<span class="name">video</span>  <span class="attr">src</span>=<span class="string">"1.swf "</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">”400”</span> <span class="attr">controls</span>  <span class="attr">autoplay</span> <span class="attr">loop</span> /&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>autoplay:音频在就绪后自动播放。autoplay=”autoplay” </li>
<li>controls: 如果出现该属性，则向用户显示控件，比如播放按钮。</li>
<li>loop: 如果出现该属性，会循环播放</li>
<li>hidden: 隐藏播放界面</li>
<li>支持3种视频格式Ogg MP4 WebM</li>
</ul>
<p>2.Audio 音频标签 和视频标签一样写法（现在高版本的谷歌或者火狐其实支持性都很好，万一版本低不支持，就用MP4和ogg）<br>下图是低版本的谷歌和火狐可能不支持，其实高版本的支持性都很好；<br>使用2种格式，能几乎兼容所有浏览器，浏览器会自动根据版本播放</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span>  <span class="attr">controls</span>  <span class="attr">autoplay</span>  <span class="attr">loop</span>  <span class="attr">hidden</span> /&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"1.mp4"</span>  <span class="attr">type</span>=<span class="string">"video/mp4"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"1.ogg"</span>  <span class="attr">type</span>=<span class="string">"video/ogg"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">如果你觉得他默认的插件太丑，想做个自定义的播放器，需要JS的支持  </span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">var audio = document.getElementById('music1');</span><br><span class="line">audio.play();//播放   audio.pause();//暂停   audio.currentTime=0;//停止</span><br><span class="line">```  </span><br><span class="line">### 四.HTML5表单</span><br><span class="line">   新增默认内容</span><br><span class="line">```js</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>新增不能为空属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input type=<span class="string">"text"</span> required=<span class="string">"required"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>Datalist元素有助于提供文本框自动完成特性（自动检索输入）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; list=&quot;aa&quot; placeholder=&quot;明星排行榜&quot;  /&gt;</span><br><span class="line">&lt;datalist id=&quot;aa&quot;&gt;（id名称要与list定义的名称一样）</span><br><span class="line">    &lt;option label=&quot;Top1&quot; value=&quot;范冰冰&quot;&gt;</span><br><span class="line">    &lt;option label=&quot;Top2&quot; value=&quot;刘涛&quot;&gt;</span><br><span class="line">    &lt;option label=&quot;Top3&quot; value=&quot;刘亦菲&quot;&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br></pre></td></tr></table></figure>
<p><option>标签的label属性用于定义一个选项的简短描述</option></p>
<h4 id="五-新增的表单元素"><a href="#五-新增的表单元素" class="headerlink" title="五.新增的表单元素"></a>五.新增的表单元素</h4><p>统一写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"color（元素名称）"</span> name=<span class="string">""</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>以下针对移动端的时候，会自动跳出相对应的键盘</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">颜色选择文本框&lt;input type=<span class="string">"Color"</span> name=<span class="string">""</span>&gt;</span><br><span class="line">日历选择文本框&lt;input type=<span class="string">"Date"</span> name=<span class="string">""</span>  required=<span class="string">"required"</span>&gt;</span><br><span class="line">带时间的日历框&lt;input type=<span class="string">"Datetime-local"</span> name=<span class="string">""</span>&gt;</span><br><span class="line">输入时间文本框&lt;input type=<span class="string">"Time"</span> name=<span class="string">""</span>&gt;</span><br><span class="line">输入月份文本框&lt;input type=<span class="string">"month"</span> /&gt;</span><br><span class="line">输入几周文本框&lt;input type=<span class="string">"week"</span> /&gt;</span><br><span class="line">邮箱地址文本框&lt;input type=<span class="string">"Email"</span> name=<span class="string">""</span>&gt;</span><br><span class="line">输入网址文本框&lt;input type=<span class="string">"Url"</span> name=<span class="string">""</span>&gt;</span><br><span class="line">拖动范围文本框&lt;input type=<span class="string">"Range"</span> name=<span class="string">""</span> step=<span class="string">"1"</span> value=<span class="string">"60"</span>  min=<span class="string">"1"</span> max=<span class="string">"100"</span>&gt;（step代表每次拖动区域，value是默认位置，min和max为可拖动的大区间）</span><br><span class="line">数字范围文本框&lt;input type=<span class="string">"Number"</span> name=<span class="string">""</span>  step=<span class="string">"2"</span> value=<span class="string">"2"</span>  min=<span class="string">"1"</span> max=<span class="string">"5"</span>&gt;</span><br><span class="line">电话号码文本框&lt;input type=<span class="string">"Tel"</span> name=<span class="string">""</span>&gt;(移动端会直接跳出号码数字框)&lt;br&gt;</span><br><span class="line">搜索栏目文本框&lt;input type=<span class="string">"Search"</span> name=<span class="string">""</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">上传文件文本框&lt;input type="file" name=""&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
<h3 id="六．HTML5图形绘制"><a href="#六．HTML5图形绘制" class="headerlink" title="六．HTML5图形绘制"></a>六．HTML5图形绘制</h3><ul>
<li>SVG 指可伸缩矢量图形 (图像在放大或改变尺寸的情况下其图形质量不会有损失）</li>
<li>SVG 使用HTML元素绘制的2D图形</li>
<li>SVG 图像可通过样式或JS来控制和修改，</li>
<li>SVG 图像可被搜索、索引、脚本化或压缩（比普通图像占空间更小）<br>简单来说，是用HTML创建的矢量图形，类似文字一样可以随意更改其大小和颜色，和PS里做的JPG有本质区别,常用于移动端中</li>
</ul>
<h6 id="1-针对svg画线—标签"><a href="#1-针对svg画线—标签" class="headerlink" title="1.针对svg画线—标签"></a>1.针对svg画线—<line></line>标签</h6><ul>
<li>边框色 stroke属性    </li>
<li>线的宽度stroke-width    线的端点stroke-linecap</li>
<li>线的两端点方形stroke-linecap=”square”</li>
<li>线的两端点圆形stroke-linecap=”round”</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;line id=&quot;&quot; x1=&quot;30%&quot; y1=&quot;20&quot; x2=&quot;100&quot; y2=&quot;200&quot;  stroke=&quot;#F00&quot; stroke-width=&quot;5&quot;/&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>
<p> X1 和Y1来确定第一个端点 X2和Y2确定第2个端点</p>
<h6 id="2-针对svg画圆——标签"><a href="#2-针对svg画圆——标签" class="headerlink" title="2.针对svg画圆——标签"></a>2.针对svg画圆——<circle></circle>标签</h6><ul>
<li>使用cx=”” cy=”” 定义圆心  r=”50” - - 定义半径，fill=”red”为圆填充颜色。stroke=”blue” stroke-width=”2”定义圆周线条颜色和宽度</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;circle id=&quot;&quot; cx=&quot;100&quot; cy=&quot;100&quot; r=&quot;50&quot; fill=&quot;red&quot; stroke=&quot;blue&quot; stroke-width=&quot;2&quot; /&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>
<h6 id="3-针对svg画椭圆——标签"><a href="#3-针对svg画椭圆——标签" class="headerlink" title="3.针对svg画椭圆——标签"></a>3.针对svg画椭圆——<ellipse></ellipse>标签</h6><p>椭圆中心 cx=”120”cy=”60”，X轴半径 rx=”100”  Y轴半径 ry=”50”,填充颜色fill，<br>边框宽度stroke-width，边框颜色stroke</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ellipse cx=&quot;100&quot; cy=&quot;60&quot; rx=&quot;100&quot; ry=&quot;50&quot; fill=&quot;red&quot; stroke=&quot;blue&quot; stroke-width=&quot;2&quot; /&gt;</span><br></pre></td></tr></table></figure>
<h6 id="4-针对svg画矩形—–标签"><a href="#4-针对svg画矩形—–标签" class="headerlink" title="4.针对svg画矩形—–标签"></a>4.针对svg画矩形—–<rect></rect>标签</h6><ul>
<li>用 width=”300” height=”100” 定义高宽，填充颜色fill，边框宽度stroke-width，</li>
<li>边框颜色stroke  </li>
<li>设置填充色透明度fill-opacity=”0.5” stroke-opacity=”0.5”  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;rect width=&quot;300&quot; height=&quot;100&quot; stroke=&quot;#17301D&quot; stroke-width=&quot;2&quot; fill=&quot;#0E4E75&quot; fill-opacity=&quot;0.5&quot; stroke-opacity=&quot;0.5&quot;/&gt; &lt;/svg&gt;</span><br></pre></td></tr></table></figure>
<h6 id="5-针对SVG画多边形—标签"><a href="#5-针对SVG画多边形—标签" class="headerlink" title="5.针对SVG画多边形—标签"></a>5.针对SVG画多边形—<polygon></polygon>标签</h6><p>用point定义几个多边形顶点，方向为顺时针<br>定义了四个顶点(10,10),(20,50),(30,60)，(40,70)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt; &lt;polygon points=&quot;10,10 20,50 30,60 40,70&quot;  stroke=&quot;#17301D&quot; stroke-width=&quot;2&quot; fill=&quot;#0E4E75&quot; fill-opacity=&quot;0.5&quot; stroke-opacity=&quot;0.5&quot;/&gt; &lt;/svg&gt;</span><br></pre></td></tr></table></figure>
<p>复杂SVG图形直接在AI里绘制好后另存为SVG, 能生成path(路径)标签，要记得另存SVG的时候，要将图形里的所有路径复合（合并一起），免得生成的path太多，控制起来麻烦，框选所有路径，对象→复合选项→建立，</p>
<p>控制svg颜色宽高边框都可以通过css来控制，但是控制其大小有窍门，必须先设置好视区范围—–viewBox=”x, y, width, height”  定位起始位置x:左上角X坐标，y:左上角Y坐标，width:宽度，height:高度,一般来说XY都设为0 里面的宽高要跟AI里那图标的宽高一模一样，然后在控制swg标签里的宽高即可实现<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>  <span class="attr">width</span>=<span class="string">”100px”</span>  <span class="attr">height</span>=<span class="string">”100px”</span>  <span class="attr">viewBox</span>=<span class="string">"0 0 200 200"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>AI里面图标实际宽高是200px<em>200px，用viewbox获取<br> 实际图标显示在html5里面的宽高是100px</em>100px<br>字体图标<a href="http://www.iconfont.cn/的制作" target="_blank" rel="noopener">http://www.iconfont.cn/的制作</a><br>iconfont常用于移动端，一个正规的移动端的图标往往都是iconfont或SVG图片</p>
<p>Canvas 绘图(实际中工作中用的很少)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas  id=<span class="string">"aa"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><span class="xml"><span class="comment">&lt;!--创建画布绘制区域--&gt;</span></span></span><br><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">var canvas=document.getElementById('aa');//声明个变量获取到canvas对象</span><br><span class="line">var ctx=canvas.getContext('2d');//获取该canvas的2D绘图环境</span><br><span class="line">ctx.fillStyle='#FF0000';//绘制代码：填充红色的背景色</span><br><span class="line">ctx.fillRect(0,0,80,100);//绘制代码：绘制一个矩形，起始点坐标为 X=0,Y=0,width=80,height=100</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>Canvas————–用JS来编写<br>固定的分辨率（和PS里一样的位图图形）<br>根据JS的判断和运算进行动态绘制，绘制可以来回重复，适合于做游戏（游戏中会应用JS对事件的判断确定如何绘制图形）  </p>
<p>SVG——————-用html编写<br>没有固定的分辨率（和AI里面一样的矢量图形）<br>纯粹的整片图形绘制，最适合带有大型渲染区域的应用程序（比如百度地图）</p>
]]></content>
      
        
        <tags>
            
            <tag> h5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git爬坑记（二）-----使用TortoiseGit]]></title>
      <url>http://yoursite.com/2018/03/14/Git%E7%88%AC%E5%9D%91%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89-----%E4%BD%BF%E7%94%A8TortoiseGit/</url>
      <content type="html"><![CDATA[<p>记录git使用过程中碰到的一些问题<br><a id="more"></a></p>
<p>哎呀，贼气，昨天下午写好这篇文章了，结果公司给配置了台新电脑，然后就开始迁移东西。没想到就在这时候云笔记崩溃了，我写好的文章尽然没有同步过来。只能再来一遍了，正好昨天新电脑又装了一遍git,全程零报错，哈哈。。下面见教程。<br>后来发现这个问题好像是有道云笔记的一个bug，出现未知错误时候必须确保ie浏览器能上网，解决了这个问题之后再重新登陆，就OK了。</p>
<h3 id="git生成公私钥"><a href="#git生成公私钥" class="headerlink" title="git生成公私钥"></a>git生成公私钥</h3><p>这是一篇写的超级详细的教程 <a href="https://www.cnblogs.com/achengmu/p/6095046.html" target="_blank" rel="noopener">点击查看–git: windows git ssh keys生成</a>  </p>
<p>第1步：创建SSH Key。在windows下查看[c盘-&gt;用户-&gt;自己的用户名-&gt;.ssh]下是否有id_rsa、id_rsa.pub文件，如果没有需要手动生成。<br>打开git bash，在控制台中输入以下命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>
<p>如果本地存在.ssh 执行上述命令之后会提示是否覆盖，输入yes即可  </p>
<blockquote>
<p> 一般来说，输入以上命令行之后，我们连续按三下空格，因为后续操作是<br>密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。</p>
<p>同时在密钥中有一个注释字段，用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入自己的邮箱或者其他都行。</p>
<p>输入完毕后程序同时要求输入一个密语字符串(passphrase)，空表示没有密语。接着会让输入2次口令(password)，空表示没有口令。3次回车即可完成当前步骤，此时[c盘&gt;用户&gt;自己的用户名&gt;.ssh]目录下已经生成好了。</p>
</blockquote>
<p>第2步：登录github。打开setting-&gt;SSH keys，点击右上角 New SSH key，把生成好的公钥id_rsa.pub放进key输入框中，再为当前的key起一个title来区分每个key。  </p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/img/%E5%85%AC%E7%A7%81%E9%92%A5.png" alt="image">  </p>
<h3 id="TortoiseGit使用"><a href="#TortoiseGit使用" class="headerlink" title="TortoiseGit使用"></a>TortoiseGit使用</h3><p>下载使用 <a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">官网下载链接</a><br>如果嫌弃下载慢的话，也可以点击个人珍藏   <a href="http://ouz1r1b1f.bkt.clouddn.com/TortoiseGit.zip" target="_blank" rel="noopener">汉化版TortoiseGit</a><br>确保安装好Git之后，先安装tortoisegit，然后安装汉化包。就OK啦。<br>踩坑时间到：<br>弄好之后clone项目 发现报错如下 ：<br>“git did not exit cleanly (exit code 1)”<br>这时候应该右键—&gt;tortoisegit setting—&gt;然后找到network选项，更改配置如下图：<br><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/img/git%E9%85%8D%E7%BD%AE.png" alt="image"></p>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git使用爬坑记(一)-----命令行]]></title>
      <url>http://yoursite.com/2018/03/14/Git%E7%88%AC%E5%9D%91%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89------%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>使用命令行操作<br><a id="more"></a></p>
<h3 id="常见的命令行操作"><a href="#常见的命令行操作" class="headerlink" title="常见的命令行操作"></a>常见的命令行操作</h3><p>本文参考<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰官方网站Git教程</a></p>
<h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><ul>
<li><p>初始化一个Git仓库，使用git init命令。</p>
</li>
<li><p>添加文件到Git仓库，分两步：</p>
<ul>
<li><p>第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；</file></p>
</li>
<li><p>第二步，使用命令git commit，完成。<br>-m添加的是描述信息  </p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br><span class="line">[master (root-commit) cb926e7] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/learngit/img/learngit1.png" alt="image"></p>
<h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure>
<ul>
<li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令==git reset –hard commit_id==。</p>
</li>
<li><p>穿梭前，用==git log==可以查看提交历史，以便确定要回退到哪个版本。</p>
</li>
<li>要重返未来，用==git reflog==查看命令历史，以便确定要回到未来的哪个版本。  </li>
</ul>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/learngit/img/learngit2.png" alt="image">  </p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/learngit/img/learnGit3%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80.png" alt=""></p>
<h4 id="暂存在区"><a href="#暂存在区" class="headerlink" title="暂存在区"></a>暂存在区</h4><blockquote>
<p>我们把文件往Git版本库里添加的时候，是分两步执行的：<br>第一步是用==git  add==把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用==git commit==提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一==个master==分支，所以，现在，git commit就是往master分支上提交更改。</p>
<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改  </p>
</blockquote>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/learngit/img/learngit%E6%9A%82%E5%AD%98%E5%8C%BA.png" alt=""></p>
<h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --readme.txt</span><br></pre></td></tr></table></figure>
<blockquote>
<p>命令==git checkout –readme.txt==意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：</p>
<p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<p>总之，就是让这个文件回到最近一次git commit或git add时的状态   </p>
</blockquote>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>删除也是修改，删错的时候可以使用撤销修改来还原<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm +filrname</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>有些废弃文件要删除，一般可以直接在文件资源管理器中删除，当然也可以使用git命令删除<br>执行   == git rm test.txt==<br>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：   </p>
<p>或者 删错了，可以使用上面的撤销修改还原</p>
</blockquote>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/learngit/img/learngit%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6.png" alt="image">  </p>
<h4 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h4><p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/learngit/img/learngit%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt=""><br>在github 上面新建一个仓库后按照提示，输入  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:XXM-cf/learnGit.git</span><br></pre></td></tr></table></figure>
<p>这个时候可能会跳出提示下main的信息：输入yes即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (xx.xx.xx.xx)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is xx.xx.xx.xx.xx.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>
<blockquote>
<p>把本地库的内容推送到远程，用==git push==命令，实际上是把当前分支master推送到远程。</p>
<p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</p>
</blockquote>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/learngit/img/learngit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%91%BD%E4%BB%A4%E8%A1%8C.png" alt="">  </p>
<p>这时候可能会报错，没有公钥，将本地的公钥添加到github 中即可  </p>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/learngit/img/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%97%B6%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5.png" alt="添加公钥"></p>
<h4 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h4><p>实际开发的过程中，更多的应该是先创建远程仓库，然后克隆到本地，在github上创建好仓库后在你的项目目录下执行 ==git clone+地址== 就可以克隆下来啦。</p>
<h4 id="创建新的分支"><a href="#创建新的分支" class="headerlink" title="创建新的分支"></a>创建新的分支</h4><p>Git鼓励大量使用分支：</p>
<ul>
<li><p>查看分支：git branch</p>
</li>
<li><p>创建分支：git branch <name></name></p>
</li>
<li><p>切换分支：git checkout <name></name></p>
</li>
<li><p>创建+切换分支：git checkout -b <name></name></p>
</li>
<li><p>合并某分支到当前分支：git merge <name></name></p>
</li>
<li><p>删除分支：git branch -d <name></name></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch &apos;dev&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>git checkout命令加上-b参数表示创建并切换<br><img src="http://ouz1r1b1f.bkt.clouddn.com/blog/learngit/img/%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF.png" alt="image">  </p>
<p>切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：  </p>
<p> <img src="http://ouz1r1b1f.bkt.clouddn.com/blog/learngit/img/%E5%90%88%E5%B9%B6%20%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF.png" alt="image"><br> git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。  </p>
<h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p> 当多人协作改变同一个分支的时候，文件内容 就会冲突，此时，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突<br> Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，…冲突的内容…，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存<br> 我们将冲突的地方修改后，重新提交就可以了；</p>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git将本地项目与远程仓库连接]]></title>
      <url>http://yoursite.com/2018/03/14/Git%E5%AE%9E%E7%8E%B0%E4%BB%8E%E6%9C%AC%E5%9C%B0%E6%B7%BB%E5%8A%A0%E9%A1%B9%E7%9B%AE%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>连接远程仓库，使用版本管理。<br><a id="more"></a></p>
<p>1.先在github上建立远程仓库，  </p>
<p>2.在本地文件夹中 使用git bash进入，新建文件夹， git init 初始化一个仓库，  </p>
<p>3.将项目文件拷贝到改目录下，  </p>
<p>4.跟远程仓库作连接，复制刚刚创建好仓库时github自动生成的代码就可以  </p>
<p>5.git add +文件名  添加项目到文件暂存区</p>
<p>6.git commit -m ‘描述信息’ 提交到分支</p>
<p>7.git push -u origin master 推送代码到远程仓库  </p>
<blockquote>
<p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。   </p>
</blockquote>
<p><img src="http://ouz1r1b1f.bkt.clouddn.com/git%20%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E8%BF%9E%E6%8E%A5.png" alt="image"></p>
<p>如果输入$ git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:djqiang（github帐号名）/gitdemo（项目名）.git  </p>
<p>提示出错信息：fatal: remote origin already exists.<br>解决办法如下：</p>
<ul>
<li>1、先输入$ git remote rm origin</li>
<li>2、再输入$ git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:djqiang/gitdemo.git 就不会报错了！</li>
<li>3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容</li>
<li>4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc</li>
<li>5、找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6几个常用的特性]]></title>
      <url>http://yoursite.com/2018/03/14/ES6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>介绍ES6中比较常用的几个特性<br><a id="more"></a></p>
<h3 id="箭头操作符"><a href="#箭头操作符" class="headerlink" title="箭头操作符"></a>箭头操作符</h3><blockquote>
<p>它简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值Inputs=&gt;outputs。</p>
</blockquote>
<blockquote>
<p>我们知道在JS中回调是经常的事，而一般回调又以匿名函数的形式出现，每次都需要写一个function，甚是繁琐。当引入箭头操作符后可以方便地写回调了。请看下面的例子  </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//传统写法</span></span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i, a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">array.forEach(v = &gt; <span class="built_in">console</span>.log(v));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ES6中添加了对类的支持，引入了class关键字（其实class在JavaScript中一直是保留字，目的就是考虑到可能在以后的新版本中会用到，现在终于派上用场了）。JS本身就是面向对象的，ES6中提供的类实际上只是JS原型模式的包装。现在提供原生的class支持后，对象的创建，继承更加直观了，并且父类方法的调用，实例化，静态方法和构造函数等概念都更加形象化  </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	<span class="comment">//ES6中新型构造器</span></span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例方法</span></span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'My name is '</span>+<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类的继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    	<span class="comment">//直接调用父类构造器进行初始化</span></span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    program() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I'm coding..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试我们的类</span></span><br><span class="line"><span class="keyword">var</span> animal=<span class="keyword">new</span> Animal(<span class="string">'dummy'</span>),</span><br><span class="line">wayou=<span class="keyword">new</span> Programmer(<span class="string">'wayou'</span>);</span><br><span class="line">animal.sayName();<span class="comment">//输出 ‘My name is dummy’</span></span><br><span class="line">wayou.sayName();<span class="comment">//输出 ‘My name is wayou’</span></span><br><span class="line">wayou.program();<span class="comment">//输出 ‘I'm coding...’</span></span><br></pre></td></tr></table></figure>
<h3 id="增强的对象字面量"><a href="#增强的对象字面量" class="headerlink" title="增强的对象字面量"></a>增强的对象字面量</h3><blockquote>
<p>对象字面量被增强了，写法更加简洁与灵活，同时在定义对象的时候能够做的事情更多了。具体表现在：</p>
<ul>
<li>可以在对象字面量里面定义原型</li>
<li>定义方法可以不用function关键字</li>
<li>直接调用父类方法  </li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过对象字面量创建对象</span></span><br><span class="line"><span class="keyword">var</span> human = &#123;</span><br><span class="line">    breathe() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'breathing...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> worker = &#123;</span><br><span class="line">    __proto__: human, <span class="comment">//设置此对象的原型为human,相当于继承human</span></span><br><span class="line">    company: <span class="string">'freelancer'</span>,</span><br><span class="line">    work() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'working...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">human.breathe();<span class="comment">//输出 ‘breathing...’</span></span><br><span class="line"><span class="comment">//调用继承来的breathe方法</span></span><br><span class="line">worker.breathe();<span class="comment">//输出 ‘breathing...’</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><blockquote>
<p>字符串模板相对简单易懂些。ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。  </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//产生一个随机数</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="built_in">Math</span>.random();</span><br><span class="line"><span class="comment">//将这个数字输出到console</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`your num is <span class="subst">$&#123;num&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<h3 id="let与const-关键字"><a href="#let与const-关键字" class="headerlink" title="let与const 关键字"></a>let与const 关键字</h3><blockquote>
<ul>
<li>可以把let看成var，只是它定义的变量被限定在了特定范围内才能使用，而离开这个范围则无效。  </li>
<li>const则很直观，用来定义常量，即无法被更改值的变量。</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)<span class="built_in">console</span>.log(i);<span class="comment">//输出: 0,1</span></span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//输出：undefined,严格模式下会报错</span></span><br></pre></td></tr></table></figure>
<h3 id="for-of-值遍历"><a href="#for-of-值遍历" class="headerlink" title="for of 值遍历"></a>for of 值遍历</h3><blockquote>
<p>for in 循环用于遍历数组，类数组或对象，ES6中新引入的for of循环功能相似，不同的是每次循环它提供的不是序号而是值。  </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someArray = [ <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span> ];</span><br><span class="line"><span class="keyword">for</span> (v <span class="keyword">of</span> someArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);<span class="comment">//输出 a,b,c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> someArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(someArray[i]);<span class="comment">//输出 a,b,c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 模块</span></span><br><span class="line"><span class="string">&gt; 在ES6标准中，JavaScript原生支持module了。这种将JS代码分割成不同功能的小块进行模块化的概念是在一些三方规范中流行起来的，比如CommonJS和AMD模式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; 将不同功能的代码分别写在不同文件中，各模块只需导出公共接口部分，然后通过模块的导入的方式可以在其他地方使用  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="comment">// point.js</span></span><br><span class="line"><span class="built_in">module</span> <span class="string">"point"</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span> (x, y) &#123;</span><br><span class="line">            public x = x;</span><br><span class="line">            public y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// myapp.js</span></span><br><span class="line"><span class="comment">//声明引用的模块</span></span><br><span class="line"><span class="built_in">module</span> point <span class="keyword">from</span> <span class="string">"/point.js"</span>;</span><br><span class="line"><span class="comment">//这里可以看出，尽管声明了引用的模块，还是可以通过指定需要的部分进行导入</span></span><br><span class="line"><span class="keyword">import</span> Point <span class="keyword">from</span> <span class="string">"point"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> origin = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(origin);</span><br></pre></td></tr></table></figure>
<h3 id="promises"><a href="#promises" class="headerlink" title="promises"></a>promises</h3><blockquote>
<p>Promises是处理异步操作的一种模式，之前在很多三方库中有实现，比如jQuery的deferred 对象。当你发起一个异步请求，并绑定了.when(), .done()等事件处理程序时，其实就是在应用promise模式;</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建promise</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 进行一些异步或耗时操作</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="comment">/*如果成功 */</span> ) &#123;</span><br><span class="line">        resolve(<span class="string">"Stuff worked!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="built_in">Error</span>(<span class="string">"It broke"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//绑定处理程序</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//promise成功的话会执行这里</span></span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// "Stuff worked!"</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//promise失败会执行这里</span></span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// Error: "It broke"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>本文转自—<a href="http://www.cnblogs.com/Wayou/p/es6_new_features.html" target="_blank" rel="noopener">ES6新特性概览</a></p>
]]></content>
      
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css选择器优先级]]></title>
      <url>http://yoursite.com/2018/03/14/css%E9%80%89%E6%8B%A9%E5%99%A8%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      <content type="html"><![CDATA[<p>确定浏览器最终渲染的样式<br><a id="more"></a><br>目的：为了解决冲突，确定哪条规则胜出并最终被应用，CSS提供了三种机制：继承、层叠和特指  </p>
<h4 id="1-继承"><a href="#1-继承" class="headerlink" title="1.继承"></a>1.继承</h4><p>CSS 中的祖先元素会向后代传递一样东西：CSS属性的值。可以继承的属性相当一部分都个文本有关，比如颜色、字体、字号。然而，也有很多 CSS 属性不能继承，因为继承这些属性没有意义。这些不能继承的属性主要涉及元素盒子的定位和显示方式，比如边框、外边距、内边距。</p>
<p>注意：由于字体和文本样式是可以继承的，所以在使用相对字体单位（如百分比和 em）时要格外小心。如果某个标签的字体大小被设置为 80%，而它的一个后代的字体大小也被设置为 80%，那么该后代中文本最终的字体大小将是 64%（ 80%的 80%）。这有时候可能并不是你想要的结果。</p>
<h4 id="2-层叠"><a href="#2-层叠" class="headerlink" title="2.层叠"></a>2.层叠</h4><p>层叠，就是层叠样式表中的层叠，是一种样式在文档层次中逐层叠加的过程，目的是让浏览器面对某个标签特定属性值的多个来源，确定最终使用哪个值。</p>
<p>提示：层叠是 CSS 的核心机制，理解了它才能以最经济的方式写出最容易改动的 CSS，让文档外观在达到设计要求的同时，也给用户留下一些空间，让他们能根据需要更改文档的显示效果（比如整体调整字号）。</p>
<h5 id="2-1-样式来源"><a href="#2-1-样式来源" class="headerlink" title="2.1 样式来源"></a>2.1 样式来源</h5><p>以下是浏览器层叠各个来源样式的顺序：</p>
<p>浏览器默认样式  </p>
<ol>
<li>用户样式表  </li>
<li>作者链接样式表（外部样式，按照它们链接到页</li>
<li>面的先后顺序  </li>
<li>作者嵌入样式 (内部样式)</li>
<li>作者行内样式<br>其中，用户 是指有特别需求的用户，例如视障人士，他们可以通过用户样式表，强制浏览器加载的所有网站都以更大的字号，更容易分辨的颜色显示内容。而 作者，就是网页设计师（你）。</li>
</ol>
<p>浏览器会按照上述顺序依次检查每个来源的样式，并在有定义的情况下，更新对每个标签属性值的设定。整个检查更新过程结束后，再将每个标签以最终设定的样式显示出来。</p>
<h5 id="2-2-层叠规则"><a href="#2-2-层叠规则" class="headerlink" title="2.2 层叠规则"></a>2.2 层叠规则</h5><ul>
<li>层叠规则一：找到应用给每个元素和属性的所有声明<br>层叠规则二：按照顺序和 权重 排序<br>层叠规则三：按 特指度（specific）排序<br>层叠规则四：顺序决定权重。  </li>
</ul>
<p>提示：声明也可以有权重，空格!important 分号( ;)用于加重声明的权重。<br>例如：p {color:green !important; font-size:12pt;}</p>
<h4 id="3-特指"><a href="#3-特指" class="headerlink" title="3.特指"></a>3.特指</h4><p>计算选择符的特指度</p>
<p>一个简单的记分规则，即对每个选择符都要按下面的 ICE 公式计算三个值：<br>I-C-E（ID-Class-Element）  </p>
<p>说明：1.三个字母间的短横线是分隔符，并非减号；2.这并非真正的三位数，只不过大多数情况下把结果看成一个三位数没问题，三位数最大的胜出。</p>
<p>但是，千万得知道 0-1-12 与 0-2-0 相比，仍然是 0-2-0 的特指度更高。  </p>
<p>针对这个公式的计分办法如下：<br>1.选择符中有一个ID，就在I的位置加1；<br>2.选择符中有一个类，就在C的位置加1；<br>3.选择符中有一个元素（标签）名，就在E的位置上加1；<br>4.得到一个三位数。<br>可以通过下面的例子来理解：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">P&#123;&#125;                                   //0-0-1 特指度=1</span><br><span class="line">p.largetext&#123;&#125;                         //0-1-1 特指度=11</span><br><span class="line">p#largetext&#123;&#125;                         //1-0-1 特指度=101</span><br><span class="line">body p#largetext&#123;&#125;                    //1-0-2 特指度=102</span><br><span class="line">body p#largetext ul.mylist&#123;&#125;          //1-1-3 特指度=113</span><br><span class="line">body p#largetext ul.mylist li&#123;&#125;       //1-1-4 特指度=114</span><br></pre></td></tr></table></figure>
<p>在此，每个选择符都比前一个选择符的特指度更高。</p>
<h4 id="4-查理版简单层叠要点"><a href="#4-查理版简单层叠要点" class="headerlink" title="4.查理版简单层叠要点"></a>4.查理版简单层叠要点</h4><p>在这个查理版里，只要记住三条规则就够了。这三条规则适合所有情况：</p>
<p><strong>规则一</strong>： 包含 ID 的选择符胜过包含类的选择符，包含类的选择符胜过包含标签名的选择符。  </p>
<p><strong>规则二：</strong> 如果几个不同来源都为同一个标签的同一个属性定义了样式，行内样式胜过嵌入样式，嵌入样式胜过链接样式。在链接的样式表中，具有相同特指度的样式，后声明的胜过先声明的。<br>规则一胜过规则二。换句话说，如果选择符更明确（特指度更高），无论它在哪里，都会<br>胜出。  </p>
<p><strong>规则三：</strong> 设定的样式胜过继承的样式，此时不用考虑特指度（即显式设定优先）。<br>下面简单解释一下规则三。</p>
<p>比如下面的标记：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cascade_demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"inheritance_fact"</span>&gt;</span>Inheritance is <span class="tag">&lt;<span class="name">em</span>&gt;</span>weak<span class="tag">&lt;/<span class="name">em</span>&gt;</span> in the Cascade<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>和下面的规则：</p>
<p>div#cascade_demo p#inheritance_fact {color:blue;}</p>
<p>2 - 0 - 2 （高特指度）<br>会导致单词 weak 变成蓝色，因为它从父元素 p 那里继承了这个颜色值。</p>
<p>但是，只要我们再给 em 添加一条规则 em {color:red;}</p>
<p>0 - 0 - 1 （低特指度）<br>em 就会变成红色。因为，虽然它的特指度低（0-0-1），但 em 继承的颜色值，会被为它明确（显式）指定的颜色值覆盖，就算（隐式）遗传该颜色值的规则的特指度高（2-0-2）也没有用</p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS中的各种居中方法]]></title>
      <url>http://yoursite.com/2018/03/14/css%E5%90%84%E7%A7%8D%E5%B1%85%E4%B8%AD%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>介绍css中的垂直居中和水平居中的方法<br><a id="more"></a></p>
<h4 id="文字居中"><a href="#文字居中" class="headerlink" title="文字居中"></a>文字居中</h4><p>对于单行文字居中，比较简单设置:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">line-height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="多行文字居中"><a href="#多行文字居中" class="headerlink" title="多行文字居中"></a>多行文字居中</h4><p>设置包含文字元素的宽高，然后使用绝对定位；<br>适用于子元素知道宽高的，不止是文字，其他块级元素也可以。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">width</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">postion</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">margin-top</span><span class="selector-pseudo">:-50px</span>;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">   <span class="selector-tag">margin-left</span><span class="selector-pseudo">:-50px</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>居中的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="无宽高图片居中"><a href="#无宽高图片居中" class="headerlink" title="无宽高图片居中"></a>无宽高图片居中</h4><p>无宽高的行内元素要居中，就有点麻烦了<br>下面介绍几种方法：</p>
<ol>
<li>使用绝对定位+margin<br>这种方法的原理是，设置子元素为绝对定位，距离父元素上下左右都为0；如果距离不够，自动用margin补充。</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#wrapper</span>&#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    background: gray;</span></span><br><span class="line"><span class="undefined">    width: 800px;</span></span><br><span class="line"><span class="undefined">    height: 800px; </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">         </span></span><br><span class="line"><span class="undefined">img &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 0;</span></span><br><span class="line"><span class="undefined">    bottom: 0;</span></span><br><span class="line"><span class="undefined">    left: 0;</span></span><br><span class="line"><span class="undefined">    right: 0;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">margin</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>button居中法<br>button内容默居中的，所以可以利用这一属性来居中内容<br>这个方法兼容性良好，但是需要禁用Butotn的默认点击事件</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 450px;</span></span><br><span class="line"><span class="undefined">    height: 450px;</span></span><br><span class="line"><span class="undefined">    border: 1px solid;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">button &#123;</span></span><br><span class="line"><span class="undefined">    width: 450px;</span></span><br><span class="line"><span class="undefined">    height: 450px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">    background: none;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>display:table-cell方法<br>设置父元素的 dispaly,但是这个方法有个问题，table-cell需要在标准文档流中才有效，所以如果父元素设置为absolute 或者float之后，此方法无效，另外，兼容性也有问题，IE6、7 并不支持这个样式。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 450px;</span></span><br><span class="line"><span class="undefined">    height: 450px;</span></span><br><span class="line"><span class="undefined">    border: 1px solid;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:table-cell</span>;</span></span><br><span class="line"><span class="undefined">    vertical-align: middle;</span></span><br><span class="line"><span class="undefined">    text-align: center; </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="定宽块状元素居中"><a href="#定宽块状元素居中" class="headerlink" title="定宽块状元素居中"></a>定宽块状元素居中</h4><p>满足定宽（块状元素的宽度width为固定值）和块状两个条件的元素可以通过设置“左右margin”值为“auto”来实现居中。   </p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css中的尺寸]]></title>
      <url>http://yoursite.com/2018/03/14/Css%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BD%8D(1)/</url>
      <content type="html"><![CDATA[<p>简单介绍css中的尺寸 包括PX em vh 等<br><a id="more"></a></p>
<h3 id="css中的尺寸"><a href="#css中的尺寸" class="headerlink" title="css中的尺寸"></a>css中的尺寸</h3><h4 id="1-Px"><a href="#1-Px" class="headerlink" title="1.Px"></a>1.Px</h4><ul>
<li><strong>相对长度单位</strong>。像素px是相对于显示器屏幕分辨率而言的<h4 id="2-em"><a href="#2-em" class="headerlink" title="2.em"></a>2.em</h4></li>
<li><strong>相对长度单位</strong>。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>body</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>div1</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>div2</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在这个例子中 </p>
<ul>
<li>body的font-size是继承自跟元素html，html的尺寸是浏览器默认尺寸14px；</li>
<li>div1的font-size=1.5*14px = 21px;</li>
<li>div2的font-size=1.5*21px = 31.5px;</li>
<li>div3的font-size=1.5*31.5px = 47.25px;</li>
</ul>
<h4 id="3-vh-and-vw："><a href="#3-vh-and-vw：" class="headerlink" title="3.vh and vw："></a>3.vh and vw：</h4><ul>
<li><p><strong>相对于视口的高度和宽度</strong>，而不是父元素的（CSS百分比是相对于包含它的最近的父元素的高度和宽度）。</p>
</li>
<li><p>1vh 等于1/100的视口高度，1vw 等于1/100的视口宽度。</p>
</li>
<li>设置一个和屏幕同宽的标题，h1{font-size:100vw}，那标题的字体大小就会自动根据浏览器的宽度进行缩放，以达到字体和viewport大小同步的效果。</li>
<li>实现与同屏幕等高的框<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  height:100vh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="4-vmin-and-vmax："><a href="#4-vmin-and-vmax：" class="headerlink" title="4.vmin and  vmax："></a>4.vmin and  vmax：</h4><ul>
<li><p><strong>关于视口高度和宽度两者的最小值或者最大值。</strong></p>
</li>
<li><p>浏览器的宽度设置为1200px，高度设置为800px， 1vmax = 1200/100px = 12px， 1vmin = 800/100px = 8px</p>
</li>
<li>如果宽度设置为600px,高度设置为1080px, 1vmin就等于6px, 1vmax则未10.8px。</li>
</ul>
<blockquote>
<p> chrome强制最小字体为12号，即使设置成 10px 最终都会显示成 12px，当把html的font-size设置成10px,子节点rem的计算还是以12px为基准</p>
</blockquote>
<ol>
<li>text-indent设置抬头距离css缩进</li>
<li>letter-spacing来设置字与字间距_字符间距离，字体间距css样式     </li>
</ol>
<blockquote>
</blockquote>
<p> <a href="http://blog.csdn.net/javaloveiphone/article/details/51120476" target="_blank" rel="noopener">参考资料</a></p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css3 使用伪类创建小箭头、绘制任意形状的三角形]]></title>
      <url>http://yoursite.com/2018/03/14/css3%20%E4%BD%BF%E7%94%A8%E4%BC%AA%E7%B1%BB%E5%88%9B%E5%BB%BA%E5%B0%8F%E7%AE%AD%E5%A4%B4%E3%80%81%E7%BB%98%E5%88%B6%E4%BB%BB%E6%84%8F%E5%BD%A2%E7%8A%B6%E7%9A%84%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
      <content type="html"><![CDATA[<p>伪类创建小箭头、绘制任意形状的三角形<br><a id="more"></a><br>平时我们经常会用到会话款或者自定义下拉宽的小箭头，处理的时候，专门切图当背景又太麻烦，这时候我们可以利用css3的一些属性，直接写一个div变形之后，就成为我们想要的了。<br>以下是实例：<br>1.使用伪类创建三角形</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    background: pink;</span></span><br><span class="line"><span class="undefined">    margin: 50px;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--使用伪类添加一个div 旋转之后定位到想要放置的地方--&gt;</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="undefined">    content: "";</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: -6px;</span></span><br><span class="line"><span class="undefined">    left: 50%;</span></span><br><span class="line"><span class="undefined">    margin-left: -6px;</span></span><br><span class="line"><span class="undefined">    z-index: -1;</span></span><br><span class="line"><span class="undefined">    width: 12px;</span></span><br><span class="line"><span class="undefined">    height: 12px;</span></span><br><span class="line"><span class="undefined">    background: red;</span></span><br><span class="line"><span class="undefined">    transform: rotate(-45deg);</span></span><br><span class="line"><span class="undefined">    -o-transform: rotate(-45deg);</span></span><br><span class="line"><span class="undefined">    -webkit-transform: rotate(-45deg);</span></span><br><span class="line"><span class="undefined">    -moz-transform: rotate(-45deg);</span></span><br><span class="line"><span class="undefined">    -ms-transform: rotate(-45deg);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--html结构--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如图所示<img src="http://ouz1r1b1f.bkt.clouddn.com/a.png" alt="image">  </p>
<p>2.绘制三角形</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 0;</span></span><br><span class="line"><span class="undefined">    height: 0;</span></span><br><span class="line"><span class="undefined">    border-left: 0px solid transparent;</span></span><br><span class="line"><span class="undefined">    border-right: 50px solid transparent;</span></span><br><span class="line"><span class="undefined">    border-bottom: 50px solid bisque;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 0;</span></span><br><span class="line"><span class="undefined">    height: 0;</span></span><br><span class="line"><span class="undefined">    border-left: 50px solid transparent;</span></span><br><span class="line"><span class="undefined">    border-right: 0px solid transparent;</span></span><br><span class="line"><span class="undefined">    border-bottom: 50px solid bisque;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.说明：用来指定全透明色彩。</p>
<ul>
<li>transparent是全透明黑色(black)的速记法，即一个类似rgba(0,0,0,0)这样的值。</li>
<li>在CSS1中，transparent被用来作为background-color的一个参数值，用于表示背景透明。</li>
<li>在CSS2中，border-color也开始接受transparent作为参数值，《Open eBook(tm) Publication Structure 1.0.1》[OEB101]延伸到color也接受transparent作为参数值。</li>
<li>在CSS3中，transparent被延伸到任何一个有color值的属性上。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ajax语法]]></title>
      <url>http://yoursite.com/2017/11/19/Ajax%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）<br><a id="more"></a><br>工作原理<br><img src="http://www.runoob.com/images/ajax.gif" alt="image"></p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//1创建ajax对象</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">	<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);<span class="comment">//兼容IE6以下版本的浏览器</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//2链接 open()接受三个参数 请求方式 请求地址 是否是异步（同步几乎不用）</span></span><br><span class="line"><span class="comment">//get是把请求的数据放到地址栏上 </span></span><br><span class="line"><span class="comment">//post是把数据放到send上</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'http://test.jgw.com/ajax/test.txt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3发送</span></span><br><span class="line">xhr.send();</span><br><span class="line">			</span><br><span class="line"><span class="comment">//4接收</span></span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;<span class="comment">//XHR对象的readyState属性表示请求/响应过程的当前活动阶段</span></span><br><span class="line"><span class="comment">//1-启动，调用了open()方法，未调用send()方法；</span></span><br><span class="line"><span class="comment">//2-发送，已经调用了send()方法，未接收到响应；</span></span><br><span class="line"><span class="comment">//3-接收，已经接收到部分响应数据；</span></span><br><span class="line"><span class="comment">//4-完成，已经接收到全部响应数据；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//readyState的值发生变化就会调用onreadystatechange 事件</span></span><br><span class="line">					</span><br><span class="line">        <span class="keyword">if</span>(xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">	<span class="comment">//status是状态码 200是成功 404是错误</span></span><br><span class="line">        	alert(xhr.responseText)<span class="comment">//responseText：响应返回的主体内容，为字符串类型</span></span><br><span class="line">		<span class="comment">//responseXML</span></span><br><span class="line">	    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			alert(<span class="string">'错误'</span>+xhr.status)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h3><h5 id="get"><a href="#get" class="headerlink" title="get"></a>get</h5><pre><code>1、会把数据放在地址栏上 发送  
2、get的安全性能底   
3、get的大小是有限制的  
PS:get多用于获取数据
</code></pre><h5 id="post"><a href="#post" class="headerlink" title="post"></a>post</h5><pre><code>1、不会把数据放在地址里上  
2、安全性能高   
3、post是没有限制的  
PS:多用于发送数据的
</code></pre><p> GET—-用于获取数据（如：浏览帖子）<br> POST—用于上传数据（如：用户注册</p>
<h3 id="封装ajax"><a href="#封装ajax" class="headerlink" title="封装ajax"></a>封装ajax</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, fncus, fner</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">	xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>); <span class="comment">//true代表异步</span></span><br><span class="line">	xhr.send();</span><br><span class="line"></span><br><span class="line">	xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">				fncus(xhr.responseText)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (fner) &#123;</span><br><span class="line">					fner(<span class="string">'请求失败，状态码'</span> + xhr.status)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ajax(<span class="string">'http://test.jgw.com/ajax/data/0.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(data) <span class="comment">//获取成功后打印出data </span></span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
